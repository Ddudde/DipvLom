plugins {
    id 'java'
}

group 'ru.mirea'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.7.5'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.7.5'
    implementation 'org.springframework.boot:spring-boot-starter-webflux:2.7.5'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.google.firebase:firebase-admin:9.1.1'
    implementation 'org.slf4j:slf4j-simple:2.0.5'
    implementation 'com.h2database:h2:2.1.214'
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'
}
import com.google.auth.oauth2.GoogleCredentials;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.messaging.*;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.internal.bind.JsonTreeWriter;
import com.google.gson.stream.JsonReader;
import ru.mirea.data.SSE.TypesConnect;
import ru.mirea.data.models.school.day.DayL;

import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.Instant;
import java.util.*;

import static java.util.Arrays.asList;

public class Test {

    private static final InputStream config = Test.class.getResourceAsStream("e-journalfcm-firebase-auth.json");

    public static void main(String[] args) throws Exception {
        notifTest1();
    }

    private static void notifTest1(){
        initialize();
        List<String> registrationTokens = asList(
            "c_LTPBf7O7LVs63ZKCrFlC:APA01bEs2EPiVtS-HAG9YPaxsj9YhOXhxAEcEVAsID1X_G8gUniOc8nLiHsOgIhwjZZfX7RbRnBD3uWxVkct2h4VtbWP4oRAuY2IBZRy3GSf_g8-Jax34UeGZRqg3LO1HjKIbaAdHWiB",
            "c_LTPBf7O7LVs63ZKCrFlC:APA91bEs2EPiVtS-HAG9YPaxsj9YhOXhxAEcEVAsID1X_G8gUniOc8nLiHsOgIhwjZZfX7RbRnBD3uWxVkct2h4VtbWP4oRAuY2IBZRy3GSf_g8-Jax34UeGZRqg3LO1HjKIbaAdHWiB",
            "c_LTPBf7O7LVs63ZKCrFlC:APA31bEs2EPiVtS-HAG9YPaxsj9YhOXhxAEcEVAsID1X_G8gUniOc8nLiHsOgIhwjZZfX7RbRnBD3uWxVkct2h4VtbWP4oRAuY2IBZRy3GSf_g8-Jax34UeGZRqg3LO1HjKIbaAdHWiB",
            "c_LTPBf7O7LVs63ZKCrFlC:APA61bEs2EPiVtS-HAG9YPaxsj9YhOXhxAEcEVAsID1X_G8gUniOc8nLiHsOgIhwjZZfX7RbRnBD3uWxVkct2h4VtbWP4oRAuY2IBZRy3GSf_g8-Jax34UeGZRqg3LO1HjKIbaAdHWiB"
        );
        unsubscribe(registrationTokens, "readers-club");
        try {
            List<Message> messages = asList(
                Message.builder()
                    .setNotification(Notification.builder()
                        .setTitle("Price drop")
                        .setBody("2% off all books")
                        .build())
                    .setTopic("readers-club")
                    .build()
            );
            FirebaseMessaging.getInstance().sendAll(messages);
            System.out.println("Successfully sent message: ");
        } catch (FirebaseMessagingException e) {
            e.printStackTrace();
        }
    }

    private static void subscribe(List<String> registrationTokens, String topic) {
        try {
            TopicManagementResponse response = FirebaseMessaging.getInstance().subscribeToTopic(
                    registrationTokens, topic);
            System.out.println(response.getSuccessCount() + " tokens were subscribed successfully");
            if (response != null && response.getFailureCount() > 0) {
                System.out.println("List of tokens that caused failures: " + response.getErrors());
            }
        } catch (FirebaseMessagingException e) {
            e.printStackTrace();
        }
    }

    private static void unsubscribe(List<String> registrationTokens, String topic) {
        try {
            TopicManagementResponse response = FirebaseMessaging.getInstance().unsubscribeFromTopic(
                    registrationTokens, topic);
            System.out.println(response.getSuccessCount() + " tokens were unsubscribed successfully");
            if (response != null && response.getFailureCount() > 0) {
                System.out.println("List of tokens that caused failures: " + response.getErrors());
            }
        } catch (FirebaseMessagingException e) {
            e.printStackTrace();
        }
    }

    private static void listTest() {
        ArrayList<String> test1 = new ArrayList<>(asList("Jan", "March"));
        ArrayList<String> test = new ArrayList<>();
        test1.remove("March");
    }

    private static void setTest(){
        Set<String> stringSet = new HashSet<>();

        // Добавляем несколько элементов в set
        stringSet.add("Jan");
        stringSet.add("Feb");
        stringSet.add("March");
        stringSet.add("April");
        System.out.println(stringSet);
        stringSet.add("April");
        System.out.println(stringSet);
        stringSet.remove("April");
        System.out.println(stringSet);
    }

    private static void notifTest(){
        initialize();
        BatchResponse response = null;
        List<String> registrationTokens = asList(
            "c_LTPBf7O7LVs63ZKCrFlC:APA01bEs2EPiVtS-HAG9YPaxsj9YhOXhxAEcEVAsID1X_G8gUniOc8nLiHsOgIhwjZZfX7RbRnBD3uWxVkct2h4VtbWP4oRAuY2IBZRy3GSf_g8-Jax34UeGZRqg3LO1HjKIbaAdHWiB",
            "c_LTPBf7O7LVs63ZKCrFlC:APA91bEs2EPiVtS-HAG9YPaxsj9YhOXhxAEcEVAsID1X_G8gUniOc8nLiHsOgIhwjZZfX7RbRnBD3uWxVkct2h4VtbWP4oRAuY2IBZRy3GSf_g8-Jax34UeGZRqg3LO1HjKIbaAdHWiB"
        );
        try {
            MulticastMessage message = MulticastMessage.builder()
                .setNotification(Notification.builder()
                    .setTitle("Price drop")
                    .setBody("5% off all electronics")
                    .build())
                .addAllTokens(registrationTokens)
                .build();
            response = FirebaseMessaging.getInstance().sendMulticast(message);
            System.out.println("Successfully sent message: ");
        } catch (FirebaseMessagingException e) {
            e.printStackTrace();
        }
        if (response != null && response.getFailureCount() > 0) {
            List<SendResponse> responses = response.getResponses();
            List<String> failedTokens = new ArrayList<>();
            for (int i = 0; i < responses.size(); i++) {
                if (!responses.get(i).isSuccessful()) {
                    failedTokens.add(registrationTokens.get(i));
                }
            }

            System.out.println("List of tokens that caused failures: " + failedTokens);
        }
    }

    private static void initialize() {
        try {
            FirebaseOptions options = FirebaseOptions.builder()
                .setCredentials(GoogleCredentials.fromStream(config))
                .build();
            if (FirebaseApp.getApps().isEmpty()) {
                FirebaseApp.initializeApp(options);
                System.out.println("Firebase application has been initialized");
            }
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    private static void mapTest(){
        Map<Integer, Day> day = new HashMap<>();
        day.put(2, new Day("ret"));
        day.put(0, new Day("pet"));
        day.put(1, new Day("mek"));
        day.remove(1);
        System.out.println(day);
        System.out.println(day.get(1));
        for(Map.Entry<Integer, Day> entr : day.entrySet()){
            System.out.println(entr.getKey()+" "+entr.getValue());
        }
        day.put(3, new Day("qek"));
        System.out.println(day);
        for(Map.Entry<Integer, Day> entr : day.entrySet()){
            System.out.println(entr.getKey()+" "+entr.getValue());
        }
    }

    private static void jsonTest4() throws Exception {
        JsonTreeWriter wrtr = new JsonTreeWriter();
        try{
            wrtr.beginObject().name("name").value("BMW")
                .name("year").value(2016)
                .name("colors").beginArray().value("WHITE")
                .value("BLACK").value("GRAY").endArray();
        } catch (Exception e) {
            wrtr.name("name").value("df1");
            System.out.println(e.fillInStackTrace());
        } finally {
            wrtr.endObject();
            System.out.println("dsf" + wrtr.get().getAsJsonObject());
            System.out.println("dsf" + wrtr.get().getAsJsonObject().toString());
            System.out.println("dsf" + wrtr.get().getAsJsonObject().get("year").toString());
            wrtr.close();
        }
    }

    private static void jsonTest3(){
        String json = "{\"name\":\"BMW\",\"model\":\"X1\",\"year\":\"2016\",\"colors\":[\"WHITE\",\"BLACK\",\"GRAY\"]}";
        try (JsonReader rdr = new JsonReader(new StringReader(json))){
            rdr.beginObject();
            while (rdr.hasNext()) {
                switch (rdr.nextName()) {
                    case "name", "model", "year" -> {
                        System.out.println(rdr.nextString());
                    }
                    case "colors" -> {
                        rdr.beginArray();
                        while (rdr.hasNext()){
                            System.out.println("\t" + rdr.nextString());
                        }
                        rdr.endArray();
                    }
                    default -> rdr.skipValue();
                }
            }
            rdr.endObject();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private static void jsonTest2(){
        JsonObject data = new JsonObject(), data1 = new JsonObject(), data2 = new JsonObject();
        data1.addProperty("id", "fgd");
        data.add("d", data1);
        data1.addProperty("id1", "fgd");
        data2.add("d", data1);
        System.out.println(data);
        System.out.println(data2);
    }

    private static void dateTest() throws ParseException {
        DateFormat df = new SimpleDateFormat("dd.MM.yyyy");
        System.out.println(df.parse(df.format(new Date())));
        System.out.println(df.parse("10.03.2023"));
        Instant after = Instant.now().plus(Duration.ofDays(30));
        Date dateAfter = Date.from(after);
        System.out.println(df.format(dateAfter));
        System.out.println(dateAfter.getTime());
        System.out.println(df.parse("09.03.2023").getTime());
        System.out.println((df.parse(df.format(new Date())).getTime() >= df.parse("09.03.2023").getTime()));
//        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd.MM.yyyy");
//        String text = dtf.format( LocalDateTime.now() );
//        System.out.println(dtf.parse("10.03.2023"));
//        System.out.println(LocalDateTime.now().toLocalDate().atStartOfDay().isBefore(LocalDate.parse("09.03.2023", dtf).atStartOfDay()));
//        System.out.println(text);
    }

    private static void enumsTest(){
//        System.out.println(TypesConnect.SCHTEACHERS == TypesConnect.HTEACHERS);
//        System.out.println(Objects.equals(TypesConnect.SCHTEACHERS.typeL1, TypesConnect.HTEACHERS.typeL1));
//        System.out.println(TypesConnect.TUTOR.typeL1 != null && Objects.equals(TypesConnect.TUTOR.typeL1, TypesConnect.PROFILES.typeL1));
//        System.out.println(TypesConnect.valueOf("hteachers")); error
        System.out.println(TypesConnect.valueOf("HTEACHERS"));
//        System.out.println(TypesConnect.valueOf("SCHTEACHERS"));
    }

    private static void getUuidFromJson(){
        JsonObject data = new JsonObject();
        data.addProperty("uuid", "bda04b06-bbe9-46d4-915e-2220890b9535");
        System.out.println(data.get("uuid").getAsString());
        System.out.println(UUID.fromString(data.get("uuid").getAsString()));
        UUID.fromString(data.get("uuid").getAsString());
    }

    private static void jsonTest1(){
        JsonObject data = new JsonObject();
        data.addProperty("type", "");
        switch (data.get("type").getAsString()){
            default -> {
                System.out.println("Error Type" + data.get("type"));
//                ans.addProperty("error", true);
//                return ans;
            }
        }
    }

    private static void jsonTest(){
        Gson g = new Gson();
//        RoleMap map = g.fromJson("{0: {YO: 4, group: 1}, 1: {YO: 8, group: 3}}", RoleMap.class);
//        System.out.println(map); //John
//        System.out.println(map.get(1L)); //John
//        System.out.println(g.toJson(map, RoleMap.class));
        JsonObject jsonObject = JsonParser.parseString("{id: 4, role: 1}").getAsJsonObject();
        System.out.println(jsonObject.get("role").getAsString());
//        ObjectMapper mapper = new ObjectMapper();
//        mapper.configure(ALLOW_UNQUOTED_FIELD_NAMES, true);
//        mapper.configure(ALLOW_SINGLE_QUOTES, true);
//        MyMap typeRef = new MyMap();
//        MyMap map = mapper.readValue("{0: {YO: 4, group: 1}, 1: {YO: 8, group: 3}}", MyMap.class);
//        System.out.println(map);
//        System.out.println(map.get(1L));
//        System.out.println(mapper
//                .writerWithDefaultPrettyPrinter()
//                .writeValueAsString(map));
//        System.out.println(mapper
//                .writeValueAsString(map));
    }
}

spring:
  datasource:
    url: jdbc:h2:~/db_test
    username: sa
    password:
    driverClassName: org.h2.Driver
  h2:
    console:
      enabled: true
      path: /console_db/
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate.ddl-auto: create
{
  "type": "service_account",
  "project_id": "e-journalfcm",
  "private_key_id": "cbbef774dc6cb20de9facb95388a10c1cf99771f",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDGAMXfH7+AtnZH\n+nlxxp+wUMvZR8TpxYv8bZzXGcBC4/h2GJHwA4aj3VUf8fy+DMekRS3RpuKL1EX5\n0zAHfBXg9BSS611i4Mltfr1LZ7PNhqGmRRW7QPTwob3rU2/9Z3uDxy/2Wo7sWXU6\nqYj38OkQUhSqGJtQBui8m8S1qezlS97F//EdtxoaNqzjO1Ek67iXERjWBaOTVS8M\ngLVMMLHsPjq/B+GpZ7vlTGjFKwlFAKBE0CZ6MiIedO+gH2F5h0X4I+YPPucXkicq\nFITdso9JAPDkLfiDs8MF+JV3VQB9XzZTfiHz7s8fp1VYGLXk3KtW7z9K1oq8Oyb8\nfDdxKEadAgMBAAECggEATbFU8xmeh49Q9ypZx+Kjm0gAzNfD9OSuapTKI373uWeB\ngTlf3jlL9fVtpvTJcvtJxPPeKDMfFrXq5T3QTUeLwDKV9hZDlP5WG1BNT4639y/a\nMwdNoSW6VsdoYbPiMCEQTqN0duqOxT/O539Jftx5Xw2ODTZNjwe+/+7xL0Unbsr3\nLcDOmvwDcnj9Dzy3LXURIZZoCnz5rACb37oAVLonor2JquBgE3wIkHtEQlHNZZUn\nUeAujevsZ1FfMtMk2dnl9gWL3Lpw2cD8B3gQu5E050Pxkn7EiBig2dD3d5GLCPig\n0T4MviEdGZOvabyGgKP1rg/PoPtYzXdQrqyit8zUAwKBgQDonn2R5kqt/79Pv2Z0\nsgbi/TOVzmy+DbPoCxBiBJ7HbiRIvfHeiWPxkCKyGrGZgI+ssRRVS9wpbsPvktSH\nu/tlWvDKoKg7XNWmigKoGGxwm9pOk63dEWsXujxuCa3HAGk3GrOkspNsD++RClAc\nMEYCmwkyg2TWfCKDRzoRYO8HOwKBgQDZ55Pt3CoArFgAAL89UezY62WldyJFKmsw\nCTCm6jnsokvbJzfwilGwPDoloSGC2PAwOmgbAcMcW6IFygCnTtks735Hdy/N28dm\ng3fGi2fVQL8c23CueXR1BCtwaKF6vRR7RgCwnJ8k2usPfET8oKECXAGg6vRFrRac\ntbAywHP8BwKBgQCbhZseeIFlY59cifLOAlhoWjCq75/0UOT/NqZ1YfFmFFVd7OBQ\nkDqpvlv0B7TFlBZ6tsmJXXaMnOmSuvAs75lcYjiqwE65oY+WEJ9GE04s24ZREpsj\nOgoHixPr3by5V6UAmnGQo3O8w8q/hc2ZiwzDoTO8+evpGoVYj75a8BvfEQKBgD1d\nUfNyRQHbhwy5KSIDqEeOQxnN6wC/aWAltmXLIHTbX7Ff4gkDau3OiDGApwdKQJnU\nWO0CGggqZf5rXLPBKLfW2iEWF4hJlGXyMBDhwWP0z904jwsTeRBbFECbtp3yEYqF\ntDwIX2jpnbjGrkbWlYEsl+jRQek9TVjkcbJZMFCRAoGBAILO+6U7KJ8x/RJn2oRW\n48B+UyhkCtaXXGgq6DNgwU2dy5ZojCpID3ie6Ro8aDog1/e78/KPBcJXkcDA2Ikf\neY0+hSOP0E9csJZaO8rJJo8q0kyaj+Vk4z2vVkyPREEQyVByCIMaflppaYvkJ55z\nJxWJlZ7GeO3MM6LVtoX6wx/8\n-----END PRIVATE KEY-----\n",
  "client_email": "firebase-adminsdk-teue9@e-journalfcm.iam.gserviceaccount.com",
  "client_id": "111099191821885029779",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-teue9%40e-journalfcm.iam.gserviceaccount.com"
}

package ru.mirea;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.scheduling.annotation.EnableScheduling;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

@SpringBootApplication(exclude = { JacksonAutoConfiguration.class })
@EnableScheduling
public class Main {

    private static ConfigurableApplicationContext ctx;

    private final static boolean debug = true;

    public final static DateFormat df = new SimpleDateFormat("dd.MM.yyyy");

    public static void main(String[] args) {
        ctx = SpringApplication.run(Main.class, args);
        System.out.println("Hello world!");
    }

    public static boolean excp(Exception e) {
        if(debug) {
            e.printStackTrace();
        } else {
            System.out.println(e.getMessage());
        }
        return false;
    }
}
package ru.mirea.services;

import com.google.auth.oauth2.GoogleCredentials;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.messaging.*;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import static java.util.Arrays.asList;

@Service public class PushService {

    public PushService() {
        try {
            InputStream config = getClass().getResourceAsStream("/e-journalfcm-firebase-auth.json");
            FirebaseOptions options = FirebaseOptions.builder()
                .setCredentials(GoogleCredentials.fromStream(config))
                .build();
            if (FirebaseApp.getApps().isEmpty()) {
                FirebaseApp.initializeApp(options);
                System.out.println("Firebase application has been initialized");
            }
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    public void send(String topic, String title, String text, String imgUrl) {
        try {
            List<Message> messages = asList(
                Message.builder()
                    .setNotification(Notification.builder()
                        .setTitle(title)
                        .setBody(text)
                        .setImage(imgUrl)
                        .build())
                    .setTopic(topic)
                    .build()
            );
            FirebaseMessaging.getInstance().sendAll(messages);
            System.out.println("Successfully sent message: ");
        } catch (FirebaseMessagingException e) {
            e.printStackTrace();
        }
    }

    public void send(List<String> registrationTokens, String title, String text, String imgUrl) {
        BatchResponse response = null;
        try {
            MulticastMessage message = MulticastMessage.builder()
                .setNotification(Notification.builder()
                    .setTitle(title)
                    .setBody(text)
                    .setImage(imgUrl)
                    .build())
                .addAllTokens(registrationTokens)
                .build();
            response = FirebaseMessaging.getInstance().sendMulticast(message);
            System.out.println("Successfully sent message: ");
        } catch (FirebaseMessagingException e) {
            e.printStackTrace();
        }
        if (response != null && response.getFailureCount() > 0) {
            List<SendResponse> responses = response.getResponses();
            List<String> failedTokens = new ArrayList<>();
            for (int i = 0; i < responses.size(); i++) {
                if (!responses.get(i).isSuccessful()) {
                    failedTokens.add(registrationTokens.get(i));
                }
            }
            System.out.println("List of tokens that caused failures: " + failedTokens);
        }
    }

    public int subscribe(List<String> registrationTokens, String topic) {
        try {
            TopicManagementResponse response = FirebaseMessaging.getInstance().subscribeToTopic(
                    registrationTokens, topic);
            System.out.println(response.getSuccessCount() + " request were subscribed successfully");
            if (response != null && response.getFailureCount() > 0) {
                System.out.println("List of tokens that caused failures: " + response.getErrors());
            }
            return response.getFailureCount();
        } catch (FirebaseMessagingException e) {
            e.printStackTrace();
        }
        return 0;
    }

    public int unsubscribe(List<String> registrationTokens, String topic) {
        try {
            TopicManagementResponse response = FirebaseMessaging.getInstance().unsubscribeFromTopic(
                    registrationTokens, topic);
            System.out.println(response.getSuccessCount() + " request were unsubscribed successfully");
            if (response != null && response.getFailureCount() > 0) {
                System.out.println("List of tokens that caused failures: " + response.getErrors());
            }
            return response.getFailureCount();
        } catch (FirebaseMessagingException e) {
            e.printStackTrace();
        }
        return 0;
    }
}

package ru.mirea.services;

import com.google.gson.JsonObject;
import com.google.gson.internal.bind.JsonTreeWriter;
import com.google.gson.stream.JsonWriter;
import lombok.Getter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.RequestBody;
import ru.mirea.Main;
import ru.mirea.controllers.CallInterface;
import ru.mirea.data.models.auth.Role;
import ru.mirea.data.models.Contacts;
import ru.mirea.data.models.News;
import ru.mirea.data.models.Syst;
import ru.mirea.data.models.auth.Invite;
import ru.mirea.data.models.auth.User;
import ru.mirea.data.models.school.Group;
import ru.mirea.data.models.school.Request;
import ru.mirea.data.models.school.School;
import ru.mirea.data.models.school.dayOfWeek.DayOfWeek;
import ru.mirea.data.models.school.Lesson;
import ru.mirea.data.models.school.dayOfWeek.Subject;
import ru.mirea.data.reps.ContactsRepository;
import ru.mirea.data.reps.NewsRepository;
import ru.mirea.data.reps.SystRepository;
import ru.mirea.data.reps.auth.InviteRepository;
import ru.mirea.data.reps.auth.UserRepository;
import ru.mirea.data.reps.school.GroupRepository;
import ru.mirea.data.reps.school.RequestRepository;
import ru.mirea.data.reps.school.SchoolRepository;
import ru.mirea.data.reps.school.day.DayRepository;
import ru.mirea.data.reps.school.day.MarkRepository;
import ru.mirea.data.reps.school.LessonRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import static java.util.Arrays.asList;

@Getter
@Service public class ServerService {

    private final UserRepository userRepository;

    private final InviteRepository inviteRepository;

    private final SchoolRepository schoolRepository;

    private final RequestRepository requestRepository;

    private final SystRepository systRepository;

    private final NewsRepository newsRepository;

    private final ContactsRepository contactsRepository;

    private final GroupRepository groupRepository;

    private final DayOfWeekRepository dayOfWeekRepository;

    private final DayRepository dayRepository;

    private final LessonRepository lessonRepository;

    private final MarkRepository markRepository;

    private final SubjectRepository subjectRepository;

    private final JsonObject errObj = new JsonObject();

    @Autowired
    private PushService pushService;

    public ServerService(UserRepository userRepository, InviteRepository inviteRepository, SchoolRepository schoolRepository, RequestRepository requestRepository, SystRepository systRepository, NewsRepository newsRepository, ContactsRepository contactsRepository, GroupRepository groupRepository, DayOfWeekRepository dayOfWeekRepository, DayRepository dayRepository, LessonRepository lessonRepository, MarkRepository markRepository, SubjectRepository subjectRepository) {
        this.userRepository = userRepository;
        this.inviteRepository = inviteRepository;
        this.schoolRepository = schoolRepository;
        this.requestRepository = requestRepository;
        this.systRepository = systRepository;
        this.newsRepository = newsRepository;
        this.contactsRepository = contactsRepository;
        this.groupRepository = groupRepository;
        this.dayOfWeekRepository = dayOfWeekRepository;
        this.dayRepository = dayRepository;
        this.lessonRepository = lessonRepository;
        this.markRepository = markRepository;
        this.subjectRepository = subjectRepository;

        errObj.addProperty("error", true);

        new IniDB(this);
    }

    public void createUser(User user) {
        User savedUser = userRepository.saveAndFlush(user);
        System.out.println(savedUser);
    }

    public List<User> getUsers() {
        return userRepository.findAll();
    }

    public void addToken(User user, String token) {
        user.getTokens().add(token);
        user.getTopics().forEach((topic) -> {
            if(pushService.subscribe(asList(token), topic) > 0) {
                user.getTokens().remove(token);
            }
        });
    }

    public void remToken(User user, String token){
        user.getTokens().remove(token);
        user.getTopics().forEach((topic) -> {
            pushService.unsubscribe(asList(token), topic);
        });
    }

    public void addTopic(User user, String topic) {
        user.getTopics().add(topic);
        pushService.subscribe(new ArrayList<>(user.getTokens()), topic);
    }

    public void remTopic(User user, String topic){
        user.getTopics().remove(topic);
        pushService.unsubscribe(new ArrayList<>(user.getTokens()), topic);
    }

    public User userByLogin(String login){
        return userRepository.findByLogin(login);
    }

    public User userByCode(String code){
        return userRepository.findByCode(code);
    }

    public User userById(Long id){
        return id == null ? null : userRepository.findById(id).orElse(null);
    }

    public void usersByList(List<Long> list, JsonObject obj){
        for (Long i : list) {
            JsonObject objO = new JsonObject();
            User objU = userById(i);
            objO.addProperty("name", objU.getFio());
            objO.addProperty("login", objU.getLogin());
            if (!ObjectUtils.isEmpty(objU.getCode())) objO.addProperty("link", objU.getCode());
            obj.add(i + "", objO);
        }
    }

    public void usersByList(List<Long> list, JsonWriter wrtr) throws Exception {
        for (Long i : list) {
            wrtr.name(i + "").beginObject();
            User objU = userById(i);
            wrtr.name("name").value(objU.getFio())
                .name("login").value(objU.getLogin());
            if (!ObjectUtils.isEmpty(objU.getCode())) {
                wrtr.name("link").value(objU.getCode());
            }
            wrtr.endObject();
        }
    }

    public Long getFirstRoleId(Map<Long, Role> map){
        return (Long) map.keySet().toArray()[0];
    }

    public Role getFirstRole(Map<Long, Role> map){
        return map.get(getFirstRoleId(map));
    }

    public void createInvite(Invite inv) {
        Invite savedInv = inviteRepository.saveAndFlush(inv);
        System.out.println(savedInv);
    }

    public List<Invite> getInvites() {
        return inviteRepository.findAll();
    }

    public Invite inviteByCode(String code){
        return inviteRepository.findByCode(code);
    }

    public Invite inviteById(Long id){
        return id == null ? null : inviteRepository.findById(id).orElse(null);
    }

    public void invitesByList(List<Long> list, JsonObject obj){
        for (Long i : list) {
            JsonObject objO = new JsonObject();
            Invite objI = inviteById(i);
            objO.addProperty("name", objI.getFio());
            if (!ObjectUtils.isEmpty(objI.getCode())) objO.addProperty("link", objI.getCode());
            obj.add(i + "", objO);
        }
    }

    public void invitesByList(List<Long> list, JsonWriter wrtr) throws Exception {
        for (Long i : list) {
            wrtr.name(i + "").beginObject();
            Invite objI = inviteById(i);
            wrtr.name("name").value(objI.getFio());
            if (!ObjectUtils.isEmpty(objI.getCode())) {
                wrtr.name("link").value(objI.getCode());
            }
            wrtr.endObject();
        }
    }

    public List<Request> createReq(@RequestBody Request request) {
        Request savedRequest = requestRepository.saveAndFlush(request);
        System.out.println(savedRequest);
        return requestRepository.findAll();
    }

    public List<Request> getRequests() {
        return requestRepository.findAll();
    }

    public Request requestById(Long id){
        return id == null ? null : requestRepository.findById(id).orElse(null);
    }

    public void createSchool(School school) {
        School savedSchool = schoolRepository.saveAndFlush(school);
        System.out.println(savedSchool);
    }

    public List<School> getSchools() {
        return schoolRepository.findAll();
    }

    public School schoolById(Long id){
        return id == null ? null : schoolRepository.findById(id).orElse(null);
    }

    public void createSyst(Syst syst) {
        Syst savedSyst = systRepository.saveAndFlush(syst);
        System.out.println(savedSyst);
    }

    public Syst getSyst() {
        List<Syst> systs = systRepository.findAll();
        return systs.isEmpty() ? null : systs.get(0);
    }

    public void createNews(News news) {
        News savedNews = newsRepository.saveAndFlush(news);
        System.out.println(savedNews);
    }

    public List<News> getNews() {
        return newsRepository.findAll();
    }

    public News newsById(Long id){
        return id == null ? null : newsRepository.findById(id).orElse(null);
    }

    public void createContacts(Contacts contacts) {
        Contacts savedContacts = contactsRepository.saveAndFlush(contacts);
        System.out.println(savedContacts);
    }

    public List<Contacts> getContacts() {
        return contactsRepository.findAll();
    }

    public Contacts contactsById(Long id){
        return id == null ? null : contactsRepository.findById(id).orElse(null);
    }

    public void createGroup(Group group) {
        Group savedGroup = groupRepository.saveAndFlush(group);
        System.out.println(savedGroup);
    }

    public List<Group> getGroups() {
        return groupRepository.findAll();
    }

    public Group groupById(Long id){
        return id == null ? null : groupRepository.findById(id).orElse(null);
    }

    public Long groupsByUser(User user, JsonObject bodyAns){
        Long first = null;
        if(user != null){
            Long schId = getFirstRole(user.getRoles()).getYO();
            School school = schoolById(schId);
            if (!ObjectUtils.isEmpty(school.getGroups())) {
                first = school.getGroups().get(0);
                for (Long i : school.getGroups()) {
                    Group gr = groupById(i);
                    bodyAns.addProperty(i + "", gr.getName());
                }
            }
        }
        return first;
    }

    public Long groupsByUser(User user, JsonWriter wrtr) throws Exception {
        Long first = null;
        if(user != null){
            Long schId = getFirstRole(user.getRoles()).getYO();
            School school = schoolById(schId);
            if (!ObjectUtils.isEmpty(school.getGroups())) {
                first = school.getGroups().get(0);
                for (Long i : school.getGroups()) {
                    Group gr = groupById(i);
                    wrtr.name(i + "").value(gr.getName());
                }
            }
        }
        wrtr.endObject();
        return first;
    }

    public void teachersBySchool(School school, JsonObject obj){
        JsonObject nt = new JsonObject(),
            tea = new JsonObject();
        obj.add("nt", nt);
        nt.add("tea", tea);
        if (!ObjectUtils.isEmpty(school.getTeachers())) {
            usersByList(school.getTeachers(), tea);
        }
        if (!ObjectUtils.isEmpty(school.getTeachersInv())) {
            invitesByList(school.getTeachersInv(), tea);
        }
        if (!ObjectUtils.isEmpty(school.getSubjects())) {
            for (Long i1 : school.getSubjects()) {
                Subject subject = subjectById(i1);
                if (subject != null) {
                    JsonObject nt1 = new JsonObject();
                    JsonObject tea1 = new JsonObject();
                    obj.add(i1 + "", nt1);
                    nt1.addProperty("name", subject.getName());
                    nt1.add("tea", tea1);
                    if (!ObjectUtils.isEmpty(subject.getTeachers())) {
                        usersByList(subject.getTeachers(), tea1);
                    }
                    if (!ObjectUtils.isEmpty(subject.getTeachersInv())) {
                        invitesByList(subject.getTeachersInv(), tea1);
                    }
                }
            }
        }
    }

    public void teachersBySchool(School school, JsonWriter wrtr) throws Exception {
        wrtr.name("nt").beginObject().name("tea").beginObject();
        if (!ObjectUtils.isEmpty(school.getTeachers())) {
            usersByList(school.getTeachers(), wrtr);
        }
        if (!ObjectUtils.isEmpty(school.getTeachersInv())) {
            invitesByList(school.getTeachersInv(), wrtr);
        }
        wrtr.endObject().endObject();
        if (!ObjectUtils.isEmpty(school.getSubjects())) {
            for (Long i1 : school.getSubjects()) {
                Subject subject = subjectById(i1);
                if (subject != null) {
                    wrtr.name(i1 + "").beginObject()
                        .name("name").value(subject.getName())
                        .name("tea").beginObject();
                    if (!ObjectUtils.isEmpty(subject.getTeachers())) {
                        usersByList(subject.getTeachers(), wrtr);
                    }
                    if (!ObjectUtils.isEmpty(subject.getTeachersInv())) {
                        invitesByList(subject.getTeachersInv(), wrtr);
                    }
                    wrtr.endObject().endObject();
                }
            }
        }
        wrtr.endObject();
    }

    public void createSubject(Subject subject) {
        Subject savedSubject = subjectRepository.saveAndFlush(subject);
        System.out.println(savedSubject);
    }

    public List<Subject> getSubjects() {
        return subjectRepository.findAll();
    }

    public Subject subjectById(Long id){
        return id == null ? null : subjectRepository.findById(id).orElse(null);
    }

    public Subject subjectByNameAndSchool(String name, Long school){
//        List<Subject> list = subjectRepository.findByNameAndSchool(name, school);
        for(Subject subject : subjectRepository.findBySchool(school)){
            if(Objects.equals(subject.getName(), name)) return subject;
        }
        return null;
    }

    public void createDayOfWeek(DayOfWeek dayOfWeek) {
        DayOfWeek savedDayOfWeek = dayOfWeekRepository.saveAndFlush(dayOfWeek);
        System.out.println(savedDayOfWeek);
    }

    public List<DayOfWeek> getDaysOfWeek() {
        return dayOfWeekRepository.findAll();
    }

    public DayOfWeek dayOfWeekById(Long id){
        return id == null ? null : dayOfWeekRepository.findById(id).orElse(null);
    }

    public void createLesson(Lesson lesson) {
        Lesson savedLesson = lessonRepository.saveAndFlush(lesson);
        System.out.println(savedLesson);
    }

    public List<Lesson> getLessons() {
        return lessonRepository.findAll();
    }

    public Lesson lessonById(Long id){
        return id == null ? null : lessonRepository.findById(id).orElse(null);
    }

    public JsonObject getObj(CallInterface callable, JsonTreeWriter wrtr, boolean bol) {
        JsonObject ans = null;
        try {
            wrtr.endObject();
            ans = wrtr.get().getAsJsonObject();
            System.out.println("dsf" + ans);
            wrtr.close();
        } catch (Exception e) {bol = Main.excp(e);}
        if (ans != null && ans.keySet().size() > 1 && bol) {
            callable.call(ans);
        } else {
            ans = errObj;
        }
        return ans;
    }

    public JsonTreeWriter ini(String data) throws Exception {
        System.out.println("Post! " + data);
        JsonTreeWriter wrtr = new JsonTreeWriter();
        wrtr.beginObject().name("error").value(false);
        return wrtr;
    }

}

package ru.mirea.services;

import org.springframework.util.ObjectUtils;
import ru.mirea.Main;
import ru.mirea.data.models.auth.Role;
import ru.mirea.data.models.Contacts;
import ru.mirea.data.models.News;
import ru.mirea.data.models.Syst;
import ru.mirea.data.models.auth.Invite;
import ru.mirea.data.models.auth.User;
import ru.mirea.data.models.school.Group;
import ru.mirea.data.models.school.Request;
import ru.mirea.data.models.school.School;
import ru.mirea.data.models.school.dayOfWeek.DayOfWeek;
import ru.mirea.data.models.school.Lesson;
import ru.mirea.data.models.school.dayOfWeek.Subject;

import java.text.ParseException;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.Map;
import java.util.Set;

import static java.util.Arrays.asList;

public class IniDB {

    private final ServerService serv;

    public IniDB(ServerService serverService) {
        serv = serverService;
        serv.createUser(new User("nm1", "1111",
            "Петров В.В.", 2, Map.of(
            0L, new Role("ex@ya.ru", 5L, 17L, new ArrayList<>(asList(1L, 2L))),
            1L, new Role("ex@ya.ru", 5L, new ArrayList<>(asList(1L, 2L))),
            2L, new Role("ex@ya.ru", new ArrayList<>(), 5L),
            3L, new Role("ex@ya.ru", 5L),
            4L, new Role("ex@ya.ru")
            ), 4L, 1L));
        serv.createUser(new User("nm12", "1111",
            "Петров В.В.", 1, Map.of(
            0L, new Role("ex@ya.ru", 6L, 17L, new ArrayList<>(asList(1L, 2L))),
            1L, new Role("ex@ya.ru", 6L, new ArrayList<>(asList(1L, 2L))),
            2L, new Role("ex@ya.ru", new ArrayList<>(), 6L),
            3L, new Role("ex@ya.ru", 6L),
            4L, new Role("ex@ya.ru")
            ), 4L, 1L));
        System.out.println(serv.getUsers());

        serv.createReq(new Request("ex@ya.ru","11.11.2022", "Всем своим дружным коллективом мы остановились на данном варианте."));
        System.out.println(serv.getRequests());

        serv.createSchool(new School("Школа", new ArrayList<>(asList(7L, 8L)), new ArrayList<>(asList(14L)), 15L, new ArrayList<>(asList(17L, 18L, 19L, 20L)), new ArrayList<>(asList(64L, 65L)), new ArrayList<>(asList(66L))));
        serv.createSchool(new School("Гимназия", new ArrayList<>(asList(1L)), new ArrayList<>(asList(9L)), new ArrayList<>(asList(14L)), 15L, new ArrayList<>(asList(17L, 18L, 19L, 20L)), new ArrayList<>(), new ArrayList<>()));
        serv.createSchool(new School("Лицей", new ArrayList<>(asList(2L)), new ArrayList<>(asList(14L)), 15L, new ArrayList<>(asList(17L, 18L, 19L, 20L)), new ArrayList<>(), new ArrayList<>()));
        System.out.println(serv.getSchools());

        serv.createUser(new User("nm13", "1111",
            "Петров В.В.", 2, Map.of(
            3L, new Role("ex@ya.ru", 4L)
            ), 3L, null, Set.of("4_news")));
        serv.createUser(new User("nm14", "1111",
            "Петров В.В.", 2, Map.of(
            3L, new Role("ex@ya.ru", 4L)
            ), 3L));

        Instant after = Instant.now().plus(Duration.ofDays(30));
        Date dateAfter = Date.from(after);
        serv.createInvite(new Invite("Петров А.А.", Map.of(
            3L, new Role(null, 5L)
            ), Main.df.format(dateAfter)));
        System.out.println(serv.getInvites());
        checkDates();
        System.out.println(serv.getInvites());

        serv.createSyst(new Syst(new ArrayList<>(asList(1L, 2L)), new ArrayList<>(asList(11L, 12L)), 13L));
        System.out.println(serv.getSyst());

        serv.createNews(new News("День рождения портала!","25.04.2022", "Начались первые работы"));
        serv.createNews(new News("А проект вышел большим...","02.12.2022", "/static/media/tuman.jpg", "Да-да, всё ещё не конец..."));
        System.out.println(serv.getNews());

        serv.createContacts(new Contacts(
            "8 (800) 555 35 37\n5 (353) 555 00 88",
            "Ближайшие станции метро:\nАлександровский сад, 610 м (Филёвская линия, выход 5)\nБиблиотека им. Ленина, 680 м (Сокольническая линия, выход 3)\nАрбатская, 750 м (Арбатско-Покровская линия, выход 8)",
            "/static/media/map.jpg"));
        System.out.println(serv.getContacts());

        serv.createNews(new News("Мы перешли на этот сервис","11.11.2022", "Всем своим дружным коллективом мы остановились на данном варианте."));

        serv.createContacts(new Contacts(
            "8 (800) 555 35 36\n5 (353) 555 00 88",
            "Ближайшие станции метро:\nАлександровский сад, 610 м (Филёвская линия, выход 5)\nБиблиотека им. Ленина, 680 м (Сокольническая линия, выход 3)\nАрбатская, 750 м (Арбатско-Покровская линия, выход 8)",
            "/static/media/map.jpg"));

        serv.createUser(new User("nm15", "1111",
            "Петров В.В.", 2, Map.of(
            0L, new Role("ex@ya.ru", 4L, 17L, new ArrayList<>(asList(1L, 2L)))
            ), 0L));//16L

        createGroups();//60L
        System.out.println(serv.getGroups());

        serv.createUser(new User("nm16", "1111",
            "Петров В.В.", 2, Map.of(
            0L, new Role("ex@ya.ru", 4L, 18L, new ArrayList<>(asList(62L, 63L)))
            ), 0L));//61L

        serv.createUser(new User("nm17", "1111",
            "Петров В.В.", 2, Map.of(
            1L, new Role("ex@ya.ru", 4L, new ArrayList<>(asList(61L, 75L)))
            ), 1L, 61L));//62L

        serv.createUser(new User("nm18", "1111",
            "Петрова В.В.", 2, Map.of(
            1L, new Role("ex@ya.ru", 4L, new ArrayList<>(asList(61L, 75L)))
            ), 1L, 61L));//63L

        serv.createSubject(new Subject("Англ. Яз.", 4L, new ArrayList<>(asList(67L))));
        serv.createSubject(new Subject("Математика", 4L, new ArrayList<>(asList(68L))));
        System.out.println(serv.getSubjects());

        serv.createUser(new User("nm19", "1111",
            "Петрова В1.В.", 2, Map.of(
            2L, new Role("ex@ya.ru", new ArrayList<>(), 4L)
            ), 2L));//66L

        serv.createUser(new User("nm20", "1111",
            "Петрова В2.В.", 2, Map.of(
            2L, new Role("ex@ya.ru", new ArrayList<>(asList(64L)), 4L)
            ), 2L));//67L

        serv.createUser(new User("nm21", "1111",
            "Петрова В3.В.", 2, Map.of(
            2L, new Role("ex@ya.ru", new ArrayList<>(asList(65L)), 4L)
            ), 2L));//68L

        serv.createLesson(new Lesson(64L, 67L, "300"));
        serv.createLesson(new Lesson(64L, 67L, "301"));
        serv.createLesson(new Lesson(65L, 68L, "302"));
        serv.createLesson(new Lesson(65L, 68L, "303"));
        System.out.println(serv.getLessons());
        serv.createDayOfWeek(new DayOfWeek(Map.of(0L, 69L, 1L, 70L, 2L, 71L)));
        serv.createDayOfWeek(new DayOfWeek(Map.of(0L, 72L)));
        System.out.println(serv.getDaysOfWeek());

        serv.createUser(new User("nm22", "1111",
            "Петров В.Вa.", 2, Map.of(
            0L, new Role("ex@ya.ru", 4L, 18L, new ArrayList<>(asList(62L, 63L)))
            ), 0L));//75L
    }

    private void checkDates(){
        try {
            long now = Main.df.parse(Main.df.format(new Date())).getTime();
            for(Invite inv : serv.getInvites()){
                if(now >= Main.df.parse(inv.getExpDate()).getTime()){
                    delInv(inv);
                    System.out.println("Удалён код " + inv.getCode() + " по истечению срока действия");
                }
            }
            for(User user : serv.getUsers()){
                if(!ObjectUtils.isEmpty(user.getExpDate()) && now >= Main.df.parse(user.getExpDate()).getTime()){
                    delCodeUser(user);
                    System.out.println("Удалён код " + user.getCode() + " по истечению срока действия");
                }
            }
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    public void delCodeUser(User user){
        if(user != null){
            user.setCode(null);
            user.setExpDate(null);
            serv.getUserRepository().saveAndFlush(user);
        }
    }

    public void delInv(Invite inv) {
        if(inv != null){
            School school = serv.schoolById(serv.getFirstRole(inv.getRole()).getYO());
            school.getHteachersInv().remove(inv.getId());
            serv.getSchoolRepository().saveAndFlush(school);
            serv.getInviteRepository().delete(inv);
        }
    }

    public void createGroups(){
        serv.createGroup(new Group("11A", new ArrayList<>(asList(1L, 2L, 16L))));//17L
        serv.createGroup(new Group("11Б", new ArrayList<>(asList(61L, 75L)), Map.of(0L, 73L, 1L, 74L)));
        serv.createGroup(new Group("11В"));
        serv.createGroup(new Group("11Г"));
        serv.createGroup(new Group("10А"));
        serv.createGroup(new Group("10Б"));
        serv.createGroup(new Group("10В"));
        serv.createGroup(new Group("10Г"));
        serv.createGroup(new Group("9А"));
        serv.createGroup(new Group("9Б"));
        serv.createGroup(new Group("9В"));
        serv.createGroup(new Group("9Г"));
        serv.createGroup(new Group("8А"));
        serv.createGroup(new Group("8Б"));
        serv.createGroup(new Group("8В"));
        serv.createGroup(new Group("8Г"));
        serv.createGroup(new Group("7А"));
        serv.createGroup(new Group("7Б"));
        serv.createGroup(new Group("7В"));
        serv.createGroup(new Group("7Г"));
        serv.createGroup(new Group("6А"));
        serv.createGroup(new Group("6Б"));
        serv.createGroup(new Group("6В"));
        serv.createGroup(new Group("6Г"));
        serv.createGroup(new Group("5А"));
        serv.createGroup(new Group("5Б"));
        serv.createGroup(new Group("5В"));
        serv.createGroup(new Group("5Г"));
        serv.createGroup(new Group("4А"));
        serv.createGroup(new Group("4Б"));
        serv.createGroup(new Group("4В"));
        serv.createGroup(new Group("4Г"));
        serv.createGroup(new Group("3А"));
        serv.createGroup(new Group("3Б"));
        serv.createGroup(new Group("3В"));
        serv.createGroup(new Group("3Г"));
        serv.createGroup(new Group("2А"));
        serv.createGroup(new Group("2Б"));
        serv.createGroup(new Group("2В"));
        serv.createGroup(new Group("2Г"));
        serv.createGroup(new Group("1А"));
        serv.createGroup(new Group("1Б"));
        serv.createGroup(new Group("1В"));
        serv.createGroup(new Group("1Г"));//60L
    }
}

package ru.mirea.data;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import org.springframework.beans.factory.annotation.Autowired;
import ru.mirea.data.models.auth.Role;

import javax.persistence.AttributeConverter;
import java.lang.reflect.Type;
import java.util.Map;

public class MapRoleConverter implements AttributeConverter<Map<Long, Role>, String> {

    @Autowired
    private Gson g;

    private final Type ex = new TypeToken<Map<Long,Role>>(){}.getType();

    public String convertToDatabaseColumn(Map<Long,Role> map) {
        return g.toJson(map, ex);
    }

    @Override
    public Map<Long,Role> convertToEntityAttribute(String dbData) {
        return g.fromJson(dbData, ex);
    }
}

package ru.mirea.data;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import org.springframework.beans.factory.annotation.Autowired;

import javax.persistence.AttributeConverter;
import java.lang.reflect.Type;
import java.util.Set;

public class SetStringConverter implements AttributeConverter<Set<String>, String> {

    @Autowired
    private Gson g;

    final Type ex = new TypeToken<Set<String>>(){}.getType();

    public String convertToDatabaseColumn(Set<String> map) {
        return g.toJson(map, ex);
    }

    @Override
    public Set<String> convertToEntityAttribute(String dbData) {
        return g.fromJson(dbData, ex);
    }
}

package ru.mirea.data;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import org.springframework.beans.factory.annotation.Autowired;

import javax.persistence.AttributeConverter;
import java.lang.reflect.Type;
import java.util.Map;

public class MapLongConverter implements AttributeConverter<Map<Long, Long>, String> {

    @Autowired
    private Gson g;

    private final Type ex = new TypeToken<Map<Long,Long>>(){}.getType();

    public String convertToDatabaseColumn(Map<Long,Long> map) {
        return g.toJson(map, ex);
    }

    @Override
    public Map<Long,Long> convertToEntityAttribute(String dbData) {
        return g.fromJson(dbData, ex);
    }
}

package ru.mirea.data;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import org.springframework.beans.factory.annotation.Autowired;

import javax.persistence.AttributeConverter;
import java.lang.reflect.Type;
import java.util.List;

public class ListLongConverter implements AttributeConverter<List<Long>, String> {

    @Autowired
    private Gson g;

    final Type ex = new TypeToken<List<Long>>(){}.getType();

    public String convertToDatabaseColumn(List<Long> map) {
        return g.toJson(map, ex);
    }

    @Override
    public List<Long> convertToEntityAttribute(String dbData) {
        return g.fromJson(dbData, ex);
    }
}

package ru.mirea.data.SSE;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.springframework.http.codec.ServerSentEvent;
import reactor.core.publisher.FluxSink;

@Getter
@Setter
@AllArgsConstructor
@ToString
public class Subscriber {

    private String login;

    private TypesConnect type;

    private String lvlSch;//sch

    private String lvlGr;//gr

    private String lvlMore1;//role

    private String lvlMore2;//more

    private FluxSink<ServerSentEvent> fluxSink;

    public Subscriber(FluxSink<ServerSentEvent> fluxSink) {
        this.fluxSink = fluxSink;
    }
}
package ru.mirea.data.SSE;

public enum TypesConnect {
    MAIN,
    REQUESTS,
    AUTH,
    PROFILES,
    SETTINGS,
    TUTOR,
    NEWS,
    CONTACTS,
    HTEACHERS,
    ADMINS,
    STUDENTS,
    PARENTS,
    TEACHERS,
    SCHEDULE
}

package ru.mirea.data.reps;

import org.springframework.data.jpa.repository.JpaRepository;
import ru.mirea.data.models.News;

public interface NewsRepository extends JpaRepository<News, Long> {
}
package ru.mirea.data.reps;

import org.springframework.data.jpa.repository.JpaRepository;
import ru.mirea.data.models.Contacts;

public interface ContactsRepository extends JpaRepository<Contacts, Long> {
}
package ru.mirea.data.reps;

import org.springframework.data.jpa.repository.JpaRepository;
import ru.mirea.data.models.Syst;

public interface SystRepository extends JpaRepository<Syst, Long> {
}
package ru.mirea.data.reps.school;

import org.springframework.data.jpa.repository.JpaRepository;
import ru.mirea.data.models.school.Request;

public interface RequestRepository extends JpaRepository<Request, Long> {
}
package ru.mirea.data.reps.school;

import org.springframework.data.jpa.repository.JpaRepository;
import ru.mirea.data.models.school.Group;

public interface GroupRepository extends JpaRepository<Group, Long> {
}
package ru.mirea.data.reps.school;

import org.springframework.data.jpa.repository.JpaRepository;
import ru.mirea.data.models.school.School;

public interface SchoolRepository extends JpaRepository<School, Long> {
}
package ru.mirea.data.reps.school.dayOfWeek;

import org.springframework.data.jpa.repository.JpaRepository;
import ru.mirea.data.models.school.dayOfWeek.Subject;

import java.util.List;

public interface SubjectRepository extends JpaRepository<Subject, Long> {

    List<Subject> findByNameAndSchool(String name, Long school);

    List<Subject> findBySchool(Long school);
}
package ru.mirea.data.reps.school.dayOfWeek;

import org.springframework.data.jpa.repository.JpaRepository;
import ru.mirea.data.models.school.Lesson;

public interface LessonRepository extends JpaRepository<Lesson, Long> {
}
package ru.mirea.data.reps.school.dayOfWeek;

import org.springframework.data.jpa.repository.JpaRepository;
import ru.mirea.data.models.school.dayOfWeek.DayOfWeek;

public interface DayOfWeekRepository extends JpaRepository<DayOfWeek, Long> {
}
package ru.mirea.data.reps.school.day;

import org.springframework.data.jpa.repository.JpaRepository;
import ru.mirea.data.models.school.day.Mark;

public interface MarkRepository extends JpaRepository<Mark, Long> {
}
package ru.mirea.data.reps.school.day;

import org.springframework.data.jpa.repository.JpaRepository;
import ru.mirea.data.models.school.day.DayL;

public interface DayRepository extends JpaRepository<Day, Long> {
}
package ru.mirea.data.reps.auth;

import org.springframework.data.jpa.repository.JpaRepository;
import ru.mirea.data.models.auth.User;

public interface UserRepository extends JpaRepository<User, Long> {
    User findByLogin(String login);

    User findByCode(String code);
}
package ru.mirea.data.reps.auth;

import org.springframework.data.jpa.repository.JpaRepository;
import ru.mirea.data.models.auth.Invite;

public interface InviteRepository extends JpaRepository<Invite, Long> {
    Invite findByCode(String code);
}
package ru.mirea.data.models;

import lombok.*;
import ru.mirea.data.ListLongConverter;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

@Getter @Setter
@NoArgsConstructor @AllArgsConstructor
@ToString
@Entity public class Syst {

    @Id
    @GeneratedValue(strategy= GenerationType.AUTO)
    private Long id;

    @Convert(converter = ListLongConverter.class)
    @Column(columnDefinition="CLOB")
    private List<Long> admins, adminsInv, news;

    private Long contacts;

    public Syst(List<Long> admins) {
        this.admins = admins;
    }

    public Syst(List<Long> admins, List<Long> news, Long contacts) {
        this.admins = admins;
        this.news = news;
        this.contacts = contacts;
    }

    public List<Long> getAdmins() {
        if(admins == null) new ArrayList<>();
        return admins;
    }

    public List<Long> getAdminsInv() {
        if(adminsInv == null) adminsInv = new ArrayList<>();
        return adminsInv;
    }

    public List<Long> getNews() {
        if(news == null) news = new ArrayList<>();
        return news;
    }
}

package ru.mirea.data.models;

import lombok.*;

import javax.persistence.*;

@Getter @Setter
@NoArgsConstructor @AllArgsConstructor
@ToString
@Entity public class Contacts {

    @Id
    @GeneratedValue(strategy= GenerationType.AUTO)
    private Long id;

    @Column(columnDefinition="CLOB")
    private String contact, text;

    private String imgUrl;

    public Contacts(String contact, String text) {
        this.contact = contact;
        this.text = text;
    }

    public Contacts(String contact, String text, String imgUrl) {
        this.contact = contact;
        this.text = text;
        this.imgUrl = imgUrl;
    }
}
package ru.mirea.data.models;

import lombok.*;

import javax.persistence.*;

@Getter @Setter
@NoArgsConstructor @AllArgsConstructor
@ToString
@Entity public class News {

    @Id
    @GeneratedValue(strategy= GenerationType.AUTO)
    private Long id;

    private String title, date, img_url;

    @Column(columnDefinition="CLOB")
    private String text;

    public News(String title, String date, String text) {
        this.title = title;
        this.date = date;
        this.text = text;
    }

    public News(String title, String date, String img_url, String text) {
        this.title = title;
        this.date = date;
        this.img_url = img_url;
        this.text = text;
    }
}
package ru.mirea.data.models.school;

import lombok.*;

import javax.persistence.*;

@Getter @Setter
@NoArgsConstructor @AllArgsConstructor
@ToString
@Entity public class Request {

    @Id
    @GeneratedValue(strategy= GenerationType.AUTO)
    private Long id;

    private String email, date;

    @Column(columnDefinition="CLOB")
    private String text;//FIO

    public Request(String email, String date, String text) {
        this.email = email;
        this.date = date;
        this.text = text;
    }
}

package ru.mirea.data.models.school;

import lombok.*;
import ru.mirea.data.ListLongConverter;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

@Getter @Setter
@NoArgsConstructor @AllArgsConstructor
@ToString
@Entity public class School {

    @Id
    @GeneratedValue(strategy= GenerationType.AUTO)
    private Long id;

    private String name;

    @Convert(converter = ListLongConverter.class)
    @Column(columnDefinition="CLOB")
    private List<Long> hteachers, hteachersInv, news, groups, teachers,
        teachersInv, subjects;

    private Long contacts;

    public School(String name) {
        this.name = name;
    }

    public School(String name, List<Long> hteachers) {
        this.name = name;
        this.hteachers = hteachers;
    }

    public School(List<Long> hteachers, String name, List<Long> hteachersInv) {
        this.name = name;
        this.hteachers = hteachers;
        this.hteachersInv = hteachersInv;
    }

    public School(String name, List<Long> hteachers, List<Long> news, Long contacts, List<Long> groups, List<Long> subjects, List<Long> teachers) {
        this.name = name;
        this.hteachers = hteachers;
        this.news = news;
        this.contacts = contacts;
        this.groups = groups;
        this.subjects = subjects;
        this.teachers = teachers;
    }

    public School(String name, List<Long> hteachers, List<Long> hteachersInv, List<Long> news, Long contacts, List<Long> groups, List<Long> subjects, List<Long> teachers) {
        this.name = name;
        this.hteachers = hteachers;
        this.hteachersInv = hteachersInv;
        this.news = news;
        this.contacts = contacts;
        this.groups = groups;
        this.subjects = subjects;
        this.teachers = teachers;
    }

    public List<Long> getHteachers() {
        if(hteachers == null) hteachers = new ArrayList<>();
        return hteachers;
    }

    public List<Long> getHteachersInv() {
        if(hteachersInv == null) hteachersInv = new ArrayList<>();
        return hteachersInv;
    }

    public List<Long> getNews() {
        if(news == null) news = new ArrayList<>();
        return news;
    }

    public List<Long> getGroups() {
        if(groups == null) groups = new ArrayList<>();
        return groups;
    }

    public List<Long> getTeachers() {
        if(teachers == null) teachers = new ArrayList<>();
        return teachers;
    }

    public List<Long> getTeachersInv() {
        if(teachersInv == null) teachersInv = new ArrayList<>();
        return teachersInv;
    }

    public List<Long> getSubjects() {
        if(subjects == null) subjects = new ArrayList<>();
        return subjects;
    }
}

package ru.mirea.data.models.school;

import lombok.*;
import ru.mirea.data.ListLongConverter;
import ru.mirea.data.MapLongConverter;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Getter @Setter
@NoArgsConstructor @AllArgsConstructor
@ToString
@Entity(name = "grp") public class Group {

    @Id
    @GeneratedValue(strategy= GenerationType.AUTO)
    private Long id;

    private String name;

    @Convert(converter = ListLongConverter.class)
    @Column(columnDefinition="CLOB")
    private List<Long> kids, kidsInv;

    @Convert(converter = MapLongConverter.class)
    @Column(columnDefinition="CLOB")
    private Map<Long, Long> daysOfWeek;

    public Group(String name) {
        this.name = name;
    }

    public Group(String name, List<Long> kids) {
        this.name = name;
        this.kids = kids;
    }

    public Group(String name, List<Long> kids, Map<Long, Long> daysOfWeek) {
        this.name = name;
        this.kids = kids;
        this.daysOfWeek = daysOfWeek;
    }

    public Map<Long, Long> getDaysOfWeek() {
        if(daysOfWeek == null) daysOfWeek = new HashMap<>();
        return daysOfWeek;
    }

    public List<Long> getKids() {
        if(kids == null) kids = new ArrayList<>();
        return kids;
    }

    public List<Long> getKidsInv() {
        if(kidsInv == null) kidsInv = new ArrayList<>();
        return kidsInv;
    }
}
package ru.mirea.data.models.school.dayOfWeek;

import lombok.*;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Getter @Setter
@NoArgsConstructor @AllArgsConstructor
@ToString
@Entity public class Lesson {

    @Id
    @GeneratedValue(strategy= GenerationType.AUTO)
    private Long id;

    private Long subject, teacher, teacherInv;

    private String kab;

    public Lesson(Long subject, Long teacher, String kab) {
        this.subject = subject;
        this.teacher = teacher;
        this.kab = kab;
    }
}
package ru.mirea.data.models.school.dayOfWeek;

import lombok.*;
import ru.mirea.data.ListLongConverter;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

@Getter @Setter
@NoArgsConstructor @AllArgsConstructor
@ToString
@Entity public class Subject {

    @Id
    @GeneratedValue(strategy= GenerationType.AUTO)
    private Long id;

    private String name;

    private Long school;

    @Convert(converter = ListLongConverter.class)
    @Column(columnDefinition="CLOB")
    private List<Long> teachers, teachersInv, days;

    public Subject(String name, List<Long> teachers) {
        this.name = name;
        this.teachers = teachers;
    }

    public Subject(String name, Long school, List<Long> teachers) {
        this.name = name;
        this.school = school;
        this.teachers = teachers;
    }

    public List<Long> getTeachersInv() {
        if(teachersInv == null) teachersInv = new ArrayList<>();
        return teachersInv;
    }

    public List<Long> getTeachers() {
        if(teachers == null) teachers = new ArrayList<>();
        return teachers;
    }
}
package ru.mirea.data.models.school.dayOfWeek;

import lombok.*;
import ru.mirea.data.MapLongConverter;

import javax.persistence.*;
import java.util.HashMap;
import java.util.Map;

@Getter @Setter
@NoArgsConstructor @AllArgsConstructor
@ToString
@Entity public class DayOfWeek {

    @Id
    @GeneratedValue(strategy= GenerationType.AUTO)
    private Long id;

    @Convert(converter = MapLongConverter.class)
    @Column(columnDefinition="CLOB")
    private Map<Long, Long> lessons;

    public DayOfWeek(Map<Long, Long> lessons) {
        this.lessons = lessons;
    }

    public Map<Long, Long> getLessons() {
        if(lessons == null) lessons = new HashMap<>();
        return lessons;
    }
}
package ru.mirea.data.models.school.day;

import lombok.*;
import ru.mirea.data.ListLongConverter;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

@Getter @Setter
@NoArgsConstructor @AllArgsConstructor
@ToString
@Entity(name = "daay") public class Day {

    @Id
    @GeneratedValue(strategy= GenerationType.AUTO)
    private Long id;

    private String date;

    private Long teacher, teacherInv;

    @Column(name = "grp")
    private Long group;

    @Column(columnDefinition="CLOB")
    private String homework;

    @Convert(converter = ListLongConverter.class)
    private List<Long> marks;

    public Day(String date) {
        this.date = date;
    }

    public List<Long> getMarks() {
        if(marks == null) marks = new ArrayList<>();
        return marks;
    }
}
package ru.mirea.data.models.school.day;

import lombok.*;

import javax.persistence.*;

@Getter @Setter
@NoArgsConstructor @AllArgsConstructor
@ToString
@Entity public class Mark {

    @Id
    @GeneratedValue(strategy= GenerationType.AUTO)
    private Long id;

    @Column(name = "usr")
    private Long user;

    private Long userInv;

    private int mark, weight;

    private String type;
}
package ru.mirea.data.models.auth;

import lombok.*;
import ru.mirea.data.MapRoleConverter;
import ru.mirea.data.SetStringConverter;
import ru.mirea.data.models.auth.Role;

import javax.persistence.*;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

@Getter @Setter
@NoArgsConstructor @AllArgsConstructor
@ToString
@Entity(name = "useer") public class User {

    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    private Long id;

    private String login, password, code, expDate, fio, secFr, info;

    private Long selRole, selKid;

    private int ico;

    @Convert(converter = MapRoleConverter.class)
    @Column(columnDefinition="CLOB")
    private Map<Long, Role> roles;

    @Convert(converter = SetStringConverter.class)
    @Column(columnDefinition="CLOB")
    private Set<String> tokens, topics;

    public User(String login, String password, int ico) {
        this.login = login;
        this.password = password;
        this.ico = ico;
    }

    public User(String login, String password, String fio, int ico, Map<Long, Role> roles, Long selRole) {
        this.login = login;
        this.password = password;
        this.fio = fio;
        this.selRole = selRole;
        this.ico = ico;
        this.roles = roles;
    }

    public User(String login, String password, String fio, int ico, Map<Long, Role> roles, Long selRole, Long selKid) {
        this.login = login;
        this.password = password;
        this.fio = fio;
        this.selRole = selRole;
        this.selKid = selKid;
        this.ico = ico;
        this.roles = roles;
    }

    public User(String login, String password, String fio, int ico, Map<Long, Role> roles, Long selRole, Long selKid, Set<String> topics) {
        this.login = login;
        this.password = password;
        this.fio = fio;
        this.selRole = selRole;
        this.selKid = selKid;
        this.ico = ico;
        this.roles = roles;
        this.topics = topics;
    }

    public Map<Long, Role> getRoles() {
        if(roles == null) roles = new HashMap<>();
        return roles;
    }

    public Set<String> getTokens() {
        if(tokens == null) tokens = new HashSet<>();
        return tokens;
    }

    public Set<String> getTopics() {
        if(topics == null) topics = new HashSet<>();
        return topics;
    }
}
package ru.mirea.data.models.auth;

import lombok.*;
import ru.mirea.data.MapRoleConverter;
import ru.mirea.data.models.auth.Role;

import javax.persistence.*;
import java.util.HashMap;
import java.util.Map;

@Getter @Setter
@NoArgsConstructor @AllArgsConstructor
@ToString
@Entity public class Invite {

    @Id
    @GeneratedValue(strategy= GenerationType.AUTO)
    private Long id;

    private String fio, code, expDate;

    @Convert(converter = MapRoleConverter.class)
    @Column(columnDefinition="CLOB")
    private Map<Long, Role> role;

    public Invite(String fio, Map<Long, Role> role, String expDate) {
        this.fio = fio;
        this.expDate = expDate;
        this.role = role;
    }

    public Map<Long, Role> getRole() {
        if(role == null) role = new HashMap<>();
        return role;
    }
}
package ru.mirea.data.json;

import lombok.*;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

@Getter @Setter
@NoArgsConstructor @AllArgsConstructor
@ToString
public class Role implements Serializable {
    private String email;
    private Long YO;
    private Long group;
    private List<Long> kids;

    private List<Long> kidsInv;
    private List<Long> parents;

    private List<Long> parentsInv;
    private List<Long> subjects;

    public Role(String email, Long YO, Long group, List<Long> parents) { // kid
        this.email = email;
        this.YO = YO;
        this.group = group;
        this.parents = parents;
    }

    public Role(String email, Long YO, List<Long> kids) { // par
        this.email = email;
        this.YO = YO;
        this.kids = kids;
    }

    public Role(String email, List<Long> subjects, Long YO) { // tea
        this.email = email;
        this.YO = YO;
        this.subjects = subjects;
    }

    public Role(String email, Long YO) { //zav
        this.email = email;
        this.YO = YO;
    }

    public Role(String email) { //adm
        this.email = email;
    }

    public List<Long> getSubjects() {
        if(subjects == null) {
            subjects = new ArrayList<>();
        }
        return subjects;
    }

    public List<Long> getKids() {
        if(kids == null) {
            kids = new ArrayList<>();
        }
        return kids;
    }

    public List<Long> getKidsInv() {
        if(kidsInv == null) {
            kidsInv = new ArrayList<>();
        }
        return kidsInv;
    }

    public List<Long> getParents() {
        if(parents == null) {
            parents = new ArrayList<>();
        }
        return parents;
    }

    public List<Long> getParentsInv() {
        if(parentsInv == null) {
            parentsInv = new ArrayList<>();
        }
        return parentsInv;
    }
}

package ru.mirea.configs;

import org.springframework.context.annotation.Configuration;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.GsonHttpMessageConverter;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

import java.util.List;

@Configuration
public class ConfigMVC extends WebMvcConfigurerAdapter {
    @Override
    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
        converters.add(new GsonHttpMessageConverter());
    }
}

package ru.mirea.configs;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.task.AsyncTaskExecutor;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.concurrent.ConcurrentTaskExecutor;
import org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import java.util.concurrent.Executors;

@Configuration
@EnableWebMvc
@EnableAsync
public class WebMVCConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
            .allowedOrigins("http://localhost:3000", "http://192.168.1.66:3000", "https://ddudde.github.io")
            .allowedMethods("GET","POST");
    }

    public void configureAsyncSupport(AsyncSupportConfigurer configurer) {
        configurer.setTaskExecutor(taskExecutor());
    }

    @Bean
    public AsyncTaskExecutor taskExecutor() {
        return new ConcurrentTaskExecutor(Executors.newCachedThreadPool());
    }

}
package ru.mirea.controllers;

import com.google.gson.JsonObject;

public interface CallInterface{
    void call(JsonObject ans);
}
package ru.mirea.controllers;

import com.google.gson.JsonObject;
import lombok.NoArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ru.mirea.data.SSE.Subscriber;
import ru.mirea.data.SSE.TypesConnect;
import ru.mirea.data.models.Contacts;
import ru.mirea.data.models.Syst;
import ru.mirea.data.models.auth.User;
import ru.mirea.data.models.school.School;
import ru.mirea.services.ServerService;

import java.util.Objects;

@RequestMapping("/contacts")
@NoArgsConstructor
@RestController public class ContactsController {

    @Autowired
    private ServerService datas;

    @Autowired
    private AuthController authController;

    @PostMapping
    public JsonObject post(@RequestBody JsonObject data) {
        System.out.println("Post! " + data);
        JsonObject ans = new JsonObject(), body = null, bodyAns;
        ans.addProperty("error", false);
        if(data.has("body") && data.get("body").isJsonObject()) body = data.get("body").getAsJsonObject();
        if(!data.has("type")) data.addProperty("type", "default");
        switch (data.get("type").getAsString()){
            case "getContacts" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                bodyAns = new JsonObject();
                JsonObject map = new JsonObject();
                Long conId = null, schId = null;
                if(subscriber != null) {
                    ans.add("body", bodyAns);
                    bodyAns.add("mapPr", map);
                    User user = datas.userByLogin(subscriber.getLogin());
                    Syst syst = datas.getSyst();
                    if (user != null) {
                        schId = user.getRoles().get(body.get("role").getAsLong()).getYO();
                        School school = datas.schoolById(schId);
                        if (Objects.equals(body.get("type").getAsString(), "Yo") && school != null) {
                            conId = school.getContacts();
                        }
                    }
                    if (Objects.equals(body.get("type").getAsString(), "Por") && syst != null) {
                        conId = syst.getContacts();
                        schId = null;
                    }
                    authController.infCon(body.get("uuid").getAsString(), subscriber.getLogin(), TypesConnect.CONTACTS, schId + "", "main", "main", body.get("type").getAsString());
                }
                if(conId != null) {
                    Contacts conM = datas.contactsById(conId);
                    bodyAns.addProperty("contact", conM.getContact());
                    map.addProperty("text", conM.getText());
                    map.addProperty("imgUrl", conM.getImgUrl());
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "chContact" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                Syst syst = datas.getSyst();
                Contacts contacts = null;
                if(user != null) {
                    if(user.getRoles().containsKey(4L) && Objects.equals(subscriber.getLvlSch(), "Por")){
                        contacts = datas.contactsById(syst.getContacts());
                    }
                    if(user.getRoles().containsKey(3L) && Objects.equals(subscriber.getLvlSch(), "Yo")){
                        Long schId = user.getRoles().get(body.get("role").getAsLong()).getYO();
                        School school = datas.schoolById(schId);
                        if(school != null) {
                            contacts = datas.contactsById(school.getContacts());
                        }
                    }
                }
                if(contacts != null) {
                    String p = body.get("p").getAsString();
                    String p1 = body.has("p1") ? body.get("p1").getAsString() : null;
                    if(Objects.equals(p, "contact")) {
                        contacts.setContact(body.get("val").getAsString());
                    }
                    if(Objects.equals(p, "mapPr")) {
                        if(Objects.equals(p1, "text")) {
                            contacts.setText(body.get("val").getAsString());
                        }
                        if(Objects.equals(p1, "imgUrl")) {
                            contacts.setImgUrl(body.get("val").getAsString());
                        }
                    }
                    datas.getContactsRepository().saveAndFlush(contacts);
                    ans.add("val", body.get("val"));
                    ans.add("p", body.get("p"));
                    ans.add("p1", body.get("p1"));

                    authController.sendMessageForAll("chContactC", ans, TypesConnect.CONTACTS, subscriber.getLvlSch(), subscriber.getLvlGr(), subscriber.getLvlMore1(), subscriber.getLvlMore2());
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            default -> {
                System.out.println("Error Type" + data.get("type"));
                ans.addProperty("error", true);
                return ans;
            }
        }
    }
}
package ru.mirea.controllers;

import com.google.gson.JsonObject;
import lombok.NoArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ru.mirea.data.SSE.TypesConnect;
import ru.mirea.data.models.auth.User;
import ru.mirea.data.models.school.Request;
import ru.mirea.services.ServerService;

@RequestMapping("/requests")
@NoArgsConstructor
@RestController public class RequestController {

    @Autowired
    private ServerService datas;

    @Autowired
    private AuthController authController;

    @PostMapping
    public JsonObject post(@RequestBody JsonObject data) {
        System.out.println("Post! " + data);
        JsonObject ans = new JsonObject(), body = null, bodyAns;
        ans.addProperty("error", false);
        if(data.has("body") && data.get("body").isJsonObject()) body = data.get("body").getAsJsonObject();
        if(!data.has("type")) data.addProperty("type", "default");
        switch (data.get("type").getAsString()){
            case "getRequests" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                User user = datas.userByLogin(body.get("login").getAsString());
                if(user != null && user.getRoles().containsKey(4L)) {
                    for(Request reqR : datas.getRequests()){
                        JsonObject req = new JsonObject();
                        bodyAns.add(reqR.getId()+"", req);
                        req.addProperty("title", reqR.getEmail());
                        req.addProperty("date", reqR.getDate());
                        req.addProperty("text", reqR.getText());
                    }
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "chText" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                User user = datas.userByLogin(body.get("login").getAsString());
                Request request = datas.requestById(body.get("id").getAsLong());
                if(user != null && user.getRoles().containsKey(4L) && request != null) {
                    request.setText(body.get("text").getAsString());
                    datas.getRequestRepository().saveAndFlush(request);

                    JsonObject ansToCl = new JsonObject();
                    ansToCl.addProperty("id", request.getId());
                    ansToCl.addProperty("text", request.getText());
                    authController.sendMessageForAll("chText", ansToCl, TypesConnect.REQUESTS, "main", "main", "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "chDate" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                User user = datas.userByLogin(body.get("login").getAsString());
                Request request = datas.requestById(body.get("id").getAsLong());
                if(user != null && user.getRoles().containsKey(4L) && request != null) {
                    request.setDate(body.get("date").getAsString());
                    datas.getRequestRepository().saveAndFlush(request);

                    JsonObject ansToCl = new JsonObject();
                    ansToCl.addProperty("id", request.getId());
                    ansToCl.addProperty("date", request.getDate());
                    authController.sendMessageForAll("chDate", ansToCl, TypesConnect.REQUESTS, "main", "main", "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "chTitle" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                User user = datas.userByLogin(body.get("login").getAsString());
                Request request = datas.requestById(body.get("id").getAsLong());
                if(user != null && user.getRoles().containsKey(4L) && request != null) {
                    request.setEmail(body.get("title").getAsString());
                    datas.getRequestRepository().saveAndFlush(request);

                    JsonObject ansToCl = new JsonObject();
                    ansToCl.addProperty("id", request.getId());
                    ansToCl.addProperty("title", request.getEmail());
                    authController.sendMessageForAll("chTitle", ansToCl, TypesConnect.REQUESTS, "main", "main", "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "delReq" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                User user = datas.userByLogin(body.get("login").getAsString());
                Request request = datas.requestById(body.get("id").getAsLong());
                if(user != null && user.getRoles().containsKey(4L) && request != null) {
                    datas.getRequestRepository().delete(request);

                    JsonObject ansToCl = new JsonObject();
                    ansToCl.addProperty("id", request.getId());
                    authController.sendMessageForAll("delReq", ansToCl, TypesConnect.REQUESTS, "main", "main", "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "addReq" -> {
                bodyAns = new JsonObject();
                if(body.has("title") && body.has("dat") && body.has("text")) {
                    Request request = new Request(body.get("title").getAsString(), body.get("dat").getAsString(), body.get("text").getAsString());
                    datas.getRequestRepository().saveAndFlush(request);

                    JsonObject ansToCl = new JsonObject();
                    ansToCl.addProperty("id", request.getId());
                    ansToCl.add("body", bodyAns);
                    bodyAns.addProperty("title", request.getEmail());
                    bodyAns.addProperty("date", request.getDate());
                    bodyAns.addProperty("text", request.getText());
                    authController.sendMessageForAll("addReq", ansToCl, TypesConnect.REQUESTS, "main", "main", "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            default -> {
                System.out.println("Error Type" + data.get("type"));
                ans.addProperty("error", true);
                return ans;
            }
        }
    }
}
package ru.mirea.controllers;

import com.google.gson.JsonObject;
import com.google.gson.internal.bind.JsonTreeWriter;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.codec.ServerSentEvent;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;
import ru.mirea.Main;
import ru.mirea.data.SSE.Subscriber;
import ru.mirea.data.SSE.TypesConnect;
import ru.mirea.data.models.auth.Role;
import ru.mirea.data.models.auth.Invite;
import ru.mirea.data.models.auth.User;
import ru.mirea.data.models.school.School;
import ru.mirea.services.ServerService;

import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import java.util.Map;
import java.util.Objects;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

@RequestMapping("/auth")
@NoArgsConstructor
@RestController public class AuthController {

    @Autowired
    private ServerService datas;

    private final Map<UUID, Subscriber> subscriptions = new ConcurrentHashMap<>();

    @GetMapping(path = "/open-stream", produces = MediaType.TEXT_EVENT_STREAM_VALUE)
    public Flux<ServerSentEvent> openSseStream() {
        Flux<ServerSentEvent> stream = Flux.create(fluxSink -> {
            UUID uuid = UUID.randomUUID();
            Subscriber subscriber = new Subscriber(fluxSink);
            subscriptions.put(uuid, subscriber);
            System.out.println("create subscription for " + uuid);
            ServerSentEvent<Object> event = ServerSentEvent.builder()
                .event("chck").data(uuid).build();
            fluxSink.next(event);
            fluxSink.onCancel(() -> {
                    subscriptions.remove(uuid);
                    System.out.println("subscription " + uuid + " was closed from onCancel");
            });
            fluxSink.onDispose(() -> {
                    subscriptions.remove(uuid);
                    System.out.println("subscription " + uuid + " was closed from onDispose");
            });
            ServerSentEvent<Object> event1 = ServerSentEvent.builder()
                .event("connect").data("").build();
            fluxSink.next(event1);
        });
        return stream;
    }

    @Scheduled(cron = "*/10 * * * * *")
    public void ping(){
        sendMessageForAll("ping", "test", TypesConnect.MAIN, "main", "main", "main", "main");
    }

    public void sendMessageForAll(String evName, Object data, TypesConnect type, String lvlSch, String lvlGr, String lvlMore1, String lvlMore2) {
        ServerSentEvent<Object> event = ServerSentEvent.builder()
            .event(evName).data(data).build();
        subscriptions.forEach((uuid, subscriber) -> {
            if ((type == TypesConnect.MAIN || Objects.equals(type, subscriber.getType()))
             && (Objects.equals(lvlSch, "main") || Objects.equals(lvlSch, subscriber.getLvlSch()))
             && (Objects.equals(lvlGr, "main") || Objects.equals(lvlGr, subscriber.getLvlGr()))
             && (Objects.equals(lvlMore1, "main") || Objects.equals(lvlMore1, subscriber.getLvlMore1()))
             && (Objects.equals(lvlMore2, "main") || Objects.equals(lvlMore2, subscriber.getLvlMore2()))) {
                try {
                    subscriber.getFluxSink().next(event);
                } catch (Error e) {
                    subscriptions.remove(uuid);
                    System.out.println("subscription " + uuid + " was closed from Ping");
                }
            }
            }
        );
    }

    public Subscriber getSubscriber(String uuid) {
        return subscriptions.get(UUID.fromString(uuid));
    }

    public void infCon(String uuid, String login, TypesConnect type, String lvlSch, String lvlGr, String lvlMore1, String lvlMore2){
        if(uuid != null) {
            if(login != null) {
                subscriptions.get(UUID.fromString(uuid)).setLogin(login);
                System.out.println("setLog " + login + " subscription for " + uuid);
            }
            if(type != null) {
                subscriptions.get(UUID.fromString(uuid)).setType(type);
                System.out.println("setType " + type + " subscription for " + uuid);
            }
            if(lvlSch != null) {
                subscriptions.get(UUID.fromString(uuid)).setLvlSch(lvlSch);
                System.out.println("setLvlSch " + lvlSch + " subscription for " + uuid);
            }
            if(lvlGr != null) {
                subscriptions.get(UUID.fromString(uuid)).setLvlGr(lvlGr);
                System.out.println("setLvlGr " + lvlGr + " subscription for " + uuid);
            }
            if(lvlMore1 != null) {
                subscriptions.get(UUID.fromString(uuid)).setLvlMore1(lvlMore1);
                System.out.println("setLvlMore1 " + lvlMore1 + " subscription for " + uuid);
            }
            if(lvlMore2 != null) {
                subscriptions.get(UUID.fromString(uuid)).setLvlMore2(lvlMore2);
                System.out.println("setLvlMore2 " + lvlMore2 + " subscription for " + uuid);
            }
        }
    }

    @PostMapping(value = "/infCon")
    public JsonObject infCon(@RequestBody DataAuth body) {
        try {
            body.wrtr = datas.ini(body.toString());
            TypesConnect type = null;
            if(!ObjectUtils.isEmpty(body.type)) {
                type = TypesConnect.valueOf(body.type);
            }
            infCon(body.uuid, body.login, type, null, null, null, null);
            Subscriber subscriber = getSubscriber(body.uuid);
            User user = datas.userByLogin(subscriber.getLogin());
            if(user != null) {
                if (!ObjectUtils.isEmpty(body.notifToken)) {
                    if(body.permis) {
                        datas.addToken(user, body.notifToken);
                    } else {
                        datas.remToken(user, body.notifToken);
                    }
                    datas.getUserRepository().saveAndFlush(user);
                }
                body.wrtr.name("body").beginObject()
                    .name("role").value(user.getSelRole());
                if (user.getSelRole() == 1L) {
                    Role role = user.getRoles().get(1L);
                    body.wrtr.name("kid").value(user.getSelKid())
                        .name("kids").beginObject();
                    if (!ObjectUtils.isEmpty(role.getKids())) {
                        for (Long i1 : role.getKids()) {
                            User kid = datas.userById(i1);
                            body.wrtr.name(i1 + "").value(kid.getFio());
                        }
                    }
                    if (!ObjectUtils.isEmpty(role.getKidsInv())) {
                        for (Long i1 : role.getKidsInv()) {
                            Invite kid = datas.inviteById(i1);
                            body.wrtr.name(i1 + "").value(kid.getFio());
                        }
                    }
                    body.wrtr.endObject();
                }
                body.wrtr.endObject();
            }
        } catch (Exception e) {body.bol = Main.excp(e);}
        return datas.getObj(ans -> {}, body.wrtr, body.bol);
    }

    @PostMapping(value = "/remCon")
    public JsonObject remCon(@RequestBody DataAuth body) {
        try {
            body.wrtr = datas.ini(body.toString());
            if(!ObjectUtils.isEmpty(body.uuid)) {
                subscriptions.remove(UUID.fromString(body.uuid));
                System.out.println("subscription remCon " + body.uuid + " was closed");
            }
            body.wrtr.name("yes").value(true);
        } catch (Exception e) {body.bol = Main.excp(e);}
        return datas.getObj(ans -> {}, body.wrtr, body.bol);
    }

    @PostMapping(value = "/auth")
    public JsonObject auth(@RequestBody DataAuth body) {
        User user = datas.userByLogin(body.login);
        try {
            body.wrtr = datas.ini(body.toString());
            body.wrtr.name("body").beginObject();
            if(user != null && Objects.equals(user.getPassword(), body.password)) {
                if(!ObjectUtils.isEmpty(body.notifToken)) {
                    if(body.permis) {
                        datas.addToken(user, body.notifToken);
                    } else {
                        datas.remToken(user, body.notifToken);
                    }
                    datas.getUserRepository().saveAndFlush(user);
                }
                body.wrtr.name("auth").value(true)
                    .name("login").value(user.getLogin())
//                        bodyAns.addProperty("role", ObjectUtils.isEmpty(user.getRoles()) ? 0 : ((Long) user.getRoles().keySet().toArray()[4]));
                    .name("role").value(user.getSelRole())
                    .name("ico").value(user.getIco())
                    .name("roles").value(!ObjectUtils.isEmpty(user.getRoles()) && user.getRoles().size() > 1)
                    .name("secFr").value(!ObjectUtils.isEmpty(user.getSecFr()));
                if(user.getSelRole() == 1L) {
                    Role role = user.getRoles().get(1L);
                    body.wrtr.name("kid").value(user.getSelKid())
                        .name("kids").beginObject();
                    if (!ObjectUtils.isEmpty(role.getKids())) {
                        for (Long i1 : role.getKids()) {
                            User kid = datas.userById(i1);
                            body.wrtr.name(i1 + "").value(kid.getFio());
                        }
                    }
                    if (!ObjectUtils.isEmpty(role.getKidsInv())) {
                        for (Long i1 : role.getKidsInv()) {
                            Invite kid = datas.inviteById(i1);
                            body.wrtr.name(i1 + "").value(kid.getFio());
                        }
                    }
                    body.wrtr.endObject();
                }
                infCon(body.uuid, body.login, null, null, null, null, null);
            }
            body.wrtr.endObject();
        } catch (Exception e) {body.bol = Main.excp(e);}
        return datas.getObj(ans -> {}, body.wrtr, body.bol);
    }

    @PostMapping(value = "/reg")
    public JsonObject reg(@RequestBody DataAuth body) {
        User user = datas.userByLogin(body.login), user1 = null;
        Invite inv = null;
        if(Objects.equals(body.mod, "inv")){
            inv = datas.inviteByCode(body.code);
        }
        if(Objects.equals(body.mod, "rea")){
            user1 = datas.userByCode(body.code);
        }
        try {
            body.wrtr = datas.ini(body.toString());
            if(inv == null && user1 == null){
                body.wrtr.name("error").value(2);
                body.wrtr.name("yes").value(true);
                return datas.getObj(ans -> {}, body.wrtr, body.bol);
            }
            if(user == null) {
                if(inv != null) {
                    user = new User(body.login, body.par, body.ico);
                    user.setRoles(inv.getRole());
                    user.setSelRole(datas.getFirstRoleId(inv.getRole()));
                    if(inv.getRole().containsKey(1L)) {
                        if(!ObjectUtils.isEmpty(inv.getRole().get(1L).getKids())) {
                            user.setSelKid(inv.getRole().get(1L).getKids().get(0));
                        } else if(!ObjectUtils.isEmpty(inv.getRole().get(1L).getKidsInv())) {
                            user.setSelKid(inv.getRole().get(1L).getKidsInv().get(0));
                        }
                    }
                    user.setFio(inv.getFio());
                    Long schId = datas.getFirstRole(inv.getRole()).getYO();
                    datas.addTopic(user, schId+"_news");
                    datas.getUserRepository().saveAndFlush(user);
                    School school = datas.schoolById(schId);
                    school.getHteachersInv().remove(inv.getId());
                    school.getHteachers().add(user.getId());
                    datas.getSchoolRepository().saveAndFlush(school);
                    datas.getInviteRepository().delete(inv);
                }
                if(user1 != null){
                    user1.setLogin(body.login);
                    user1.setPassword(body.par);
                    user1.setIco(body.ico);
                    user1.setCode(null);
                    user1.setExpDate(null);
                    datas.getUserRepository().saveAndFlush(user1);
                }
            }
            body.wrtr.name("yes").value(true);
        } catch (Exception e) {body.bol = Main.excp(e);}
        return datas.getObj(ans -> {}, body.wrtr, body.bol);
    }

    @PostMapping(value = "/chPass")
    public JsonObject chPass(@RequestBody DataAuth body) {
        User user = datas.userByLogin(body.login);
        try {
            body.wrtr = datas.ini(body.toString());
            if(user != null && Objects.equals(user.getSecFr(), body.secFr)) {
                user.setPassword(body.par);
                datas.getUserRepository().saveAndFlush(user);
                body.wrtr.name("yes").value(true);
            }
        } catch (Exception e) {body.bol = Main.excp(e);}
        return datas.getObj(ans -> {}, body.wrtr, body.bol);
    }

    @PostMapping(value = "/chKid")
    public JsonObject chKid(@RequestBody DataAuth body) {
        Subscriber subscriber = getSubscriber(body.uuid);
        User user = datas.userByLogin(subscriber.getLogin());
        try {
            body.wrtr = datas.ini(body.toString());
            if(user != null && user.getSelRole() == 1L && body.idL != null) {
                user.setSelKid(body.idL);
                body.wrtr.name("kid").value(user.getSelKid());
                datas.getUserRepository().saveAndFlush(user);
            }
        } catch (Exception e) {body.bol = Main.excp(e);}
        return datas.getObj(ans -> {}, body.wrtr, body.bol);
    }

    @PostMapping(value = "/chRole")
    public JsonObject chRole(@RequestBody DataAuth body) {
        Subscriber subscriber = getSubscriber(body.uuid);
        User user = datas.userByLogin(subscriber.getLogin());
        long curRol = user.getSelRole();
        try {
            body.wrtr = datas.ini(body.toString());
            if(user != null && user.getRoles().containsKey(curRol)) {
                body.wrtr.name("body").beginObject();
                for(long i = (curRol == 4 ? 0 : curRol+1L); i < 5; i++){
                    if(!user.getRoles().containsKey(i)) continue;
                    body.wrtr.name("role").value(i);
                    user.setSelRole(i);
                    datas.getUserRepository().saveAndFlush(user);
                    Role role = user.getRoles().get(i);
                    if(i == 1L) {
                        body.wrtr.name("kid").value(user.getSelKid())
                            .name("kids").beginObject();
                        if (!ObjectUtils.isEmpty(role.getKids())) {
                            for (Long i1 : role.getKids()) {
                                User kid = datas.userById(i1);
                                body.wrtr.name(i1 + "").value(kid.getFio());
                            }
                        }
                        if (!ObjectUtils.isEmpty(role.getKidsInv())) {
                            for (Long i1 : role.getKidsInv()) {
                                Invite kid = datas.inviteById(i1);
                                body.wrtr.name(i1 + "").value(kid.getFio());
                            }
                        }
                        body.wrtr.endObject();
                    }
                    break;
                }
                body.wrtr.endObject();
            }
        } catch (Exception e) {body.bol = Main.excp(e);}
        return datas.getObj(ans -> {}, body.wrtr, body.bol);
    }

    @PostMapping(value = "/exit")
    public JsonObject exit(@RequestBody DataAuth body) {
        Subscriber subscriber = getSubscriber(body.uuid);
        if(!ObjectUtils.isEmpty(body.notifToken)) {
            User user = datas.userByLogin(subscriber.getLogin());
            datas.remToken(user, body.notifToken);
            datas.getUserRepository().saveAndFlush(user);
        }
        subscriber.setLogin(null);
        subscriber.setLvlGr(null);
        try {
            body.wrtr = datas.ini(body.toString());
            body.wrtr.name("yes").value(true);
        } catch (Exception e) {body.bol = Main.excp(e);}
        return datas.getObj(ans -> {}, body.wrtr, body.bol);
    }

    @PostMapping(value = "/checkInvCode")
    public JsonObject checkInvCode(@RequestBody DataAuth body) {
        Subscriber subscriber = getSubscriber(body.uuid);
        User user = datas.userByLogin(subscriber.getLogin());
        Invite inv = datas.inviteByCode(body.code);
        try {
            body.wrtr = datas.ini(body.toString());
            if (user != null) {
                user.getRoles().putAll(inv.getRole());
                datas.getUserRepository().saveAndFlush(user);
                School school = datas.schoolById(((Role) inv.getRole().values().toArray()[0]).getYO());
                school.getHteachersInv().remove(inv.getId());
                school.getHteachers().add(user.getId());
                datas.getSchoolRepository().saveAndFlush(school);
                datas.getInviteRepository().delete(inv);
                body.wrtr.name("yes").value(true);
            }
        } catch (Exception e) {body.bol = Main.excp(e);}
        return datas.getObj(ans -> {}, body.wrtr, body.bol);
    }

    @PostMapping(value = "/checkReaCode")
    public JsonObject checkReaCode(@RequestBody DataAuth body) {
        User user = datas.userByCode(body.code);
        try {
            body.wrtr = datas.ini(body.toString());
            if(user != null) body.wrtr.name("yes").value(true);
        } catch (Exception e) {body.bol = Main.excp(e);}
        return datas.getObj(ans -> {}, body.wrtr, body.bol);
    }

    @PostMapping(value = "/setCodePep")
    public JsonObject setCodePep(@RequestBody DataAuth body) {
        Subscriber subscriber = getSubscriber(body.uuid);
        User user = datas.userByLogin(subscriber.getLogin());
        User user1 = datas.userByLogin(body.id);
        Invite inv = datas.inviteById(body.id1);
        final var ref = new Object() {
            Long schId = null;
        };
        try {
            body.wrtr = datas.ini(body.toString());
            if(user != null && (user1 != null || inv != null)
                    && (user.getSelRole() == 3L && user.getRoles().containsKey(3L)
                    || user.getSelRole() == 4L && user.getRoles().containsKey(4L))) {
                UUID uuid = UUID.randomUUID();
                Instant after = Instant.now().plus(Duration.ofDays(30));
                Date dateAfter = Date.from(after);
                if(user1 != null){
                    user1.setCode(uuid.toString());
                    user1.setExpDate(Main.df.format(dateAfter));
                    datas.getUserRepository().saveAndFlush(user1);
                    ref.schId = datas.getFirstRole(user1.getRoles()).getYO();

                    body.wrtr.name("id").value(user1.getId());
                } else if(inv != null){
                    inv.setCode(uuid.toString());
                    inv.setExpDate(Main.df.format(dateAfter));
                    datas.getInviteRepository().saveAndFlush(inv);
                    ref.schId = datas.getFirstRole(inv.getRole()).getYO();

                    body.wrtr.name("id").value(inv.getId());
                }
                System.out.println("setCode " + uuid);

                body.wrtr.name("code").value(uuid.toString())
                    .name("id1").value(ref.schId);
            }
        } catch (Exception e) {body.bol = Main.excp(e);}
        return datas.getObj(ans -> {
            sendMessageForAll("codPepL2C", ans, subscriber.getType(), "null", subscriber.getLvlGr(), "adm", "main");
            sendMessageForAll("codPepL1C", ans, subscriber.getType(), ref.schId +"", subscriber.getLvlGr(), "ht", "main");
        }, body.wrtr, body.bol);
    }
}

@ToString
@NoArgsConstructor @AllArgsConstructor
class DataAuth {
    public String uuid, code, notifToken, login, secFr, par, mod,
        password, type, id;
    public Long id1, idL;
    public int ico;
    public boolean permis;
    public transient boolean bol = true;
    public transient JsonTreeWriter wrtr;
}
package ru.mirea.controllers;

import com.google.gson.JsonObject;
import com.google.gson.internal.bind.JsonTreeWriter;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ru.mirea.Main;
import ru.mirea.data.SSE.Subscriber;
import ru.mirea.data.SSE.TypesConnect;
import ru.mirea.data.models.News;
import ru.mirea.data.models.Syst;
import ru.mirea.data.models.auth.User;
import ru.mirea.data.models.school.School;
import ru.mirea.services.ServerService;

import java.util.List;
import java.util.Objects;

@RequestMapping("/news")
@NoArgsConstructor
@RestController public class NewsController {

    @Autowired
    private ServerService datas;

    @Autowired
    private AuthController authController;

    @PostMapping(value = "/delNews")
    public JsonObject delNews(@RequestBody DataNews body) {
        Subscriber subscriber = authController.getSubscriber(body.uuid);
        User user = datas.userByLogin(subscriber.getLogin());
        News news = datas.newsById(body.id);
        Syst syst = datas.getSyst();
        try {
            body.wrtr = datas.ini(body.toString());
            if (user != null && news != null && syst != null
                    && (user.getRoles().containsKey(4L) && Objects.equals(subscriber.getLvlMore2(), "Por")
                    || user.getRoles().containsKey(3L) && Objects.equals(subscriber.getLvlMore2(), "Yo"))) {
                datas.getNewsRepository().delete(news);
                if (!ObjectUtils.isEmpty(syst.getNews())) syst.getNews().remove(news.getId());
                datas.getSystRepository().saveAndFlush(syst);
                body.wrtr.name("id").value(body.id);
            }
        } catch (Exception e) {
            body.bol = Main.excp(e);
        }
        return datas.getObj(ans -> {
            authController.sendMessageForAll("delNewsC", ans, TypesConnect.NEWS, subscriber.getLvlSch(), subscriber.getLvlGr(), subscriber.getLvlMore1(), subscriber.getLvlMore2());
        }, body.wrtr, body.bol);
    }

    @PostMapping(value = "/chNews")
    public JsonObject chNews(@RequestBody DataNews body) {
        Subscriber subscriber = authController.getSubscriber(body.uuid);
        try {
            body.wrtr = datas.ini(body.toString());
            User user = datas.userByLogin(subscriber.getLogin());
            News news = datas.newsById(body.id);
            if (user != null && news != null
                    && (user.getRoles().containsKey(4L) && Objects.equals(subscriber.getLvlMore2(), "Por")
                    || user.getRoles().containsKey(3L) && Objects.equals(subscriber.getLvlMore2(), "Yo"))) {
                switch (body.type) {
                    case "title" -> news.setTitle(body.val);
                    case "date" -> news.setDate(body.val);
                    case "img_url" -> news.setImg_url(body.val);
                    case "text" -> news.setText(body.val);
                    default -> {
                    }
                }
                datas.getNewsRepository().saveAndFlush(news);
                body.wrtr.name("id").value(body.id)
                        .name("type").value(body.type)
                        .name("val").value(body.val);
            }
        } catch (Exception e) {
            body.bol = Main.excp(e);
        }
        return datas.getObj(ans -> {
            authController.sendMessageForAll("chNewsC", ans, TypesConnect.NEWS, subscriber.getLvlSch(), subscriber.getLvlGr(), subscriber.getLvlMore1(), subscriber.getLvlMore2());
        }, body.wrtr, body.bol);
    }

    @PostMapping(value = "/addNews")
    public JsonObject addNews(@RequestBody DataNews body) {
        Subscriber subscriber = authController.getSubscriber(body.uuid);
        try {
            body.wrtr = datas.ini(body.toString());
            if (subscriber != null) {
                body.wrtr.name("body").beginObject();
                User user = datas.userByLogin(subscriber.getLogin());
                Syst syst = datas.getSyst();
                School school = datas.schoolById(user.getRoles().get(user.getSelRole()).getYO());
                boolean b, b1;
                b = Objects.equals(subscriber.getLvlMore2(), "Por") && user.getRoles().containsKey(4L) && syst != null;
                b1 = Objects.equals(subscriber.getLvlMore2(), "Yo") && user.getRoles().containsKey(3L) && school != null;
                if (user != null && (b || b1)) {
                    News news = new News();
                    if (!ObjectUtils.isEmpty(body.title)) {
                        news.setTitle(body.title);
                    }
                    if (!ObjectUtils.isEmpty(body.date)) {
                        news.setDate(body.date);
                    }
                    if (!ObjectUtils.isEmpty(body.img_url)) {
                        news.setImg_url(body.img_url);
                    }
                    if (!ObjectUtils.isEmpty(body.text)) {
                        news.setText(body.text);
                    }
                    datas.getNewsRepository().saveAndFlush(news);
                    if (b) {
                        syst.getNews().add(news.getId());
                        datas.getSystRepository().saveAndFlush(syst);
                    } else if (b1) {
                        school.getNews().add(news.getId());
                        datas.getSchoolRepository().saveAndFlush(school);
                    }
                    body.wrtr.name("title").value(news.getTitle())
                        .name("date").value(news.getDate())
                        .name("img_url").value(news.getImg_url())
                        .name("text").value(news.getText()).endObject()
                        .name("id").value(news.getId());
                }
            }
        } catch (Exception e) {
            body.bol = Main.excp(e);
        }
        return datas.getObj(ans -> {
            if(!ObjectUtils.isEmpty(subscriber.getLvlSch())) {
                datas.getPushService().send(subscriber.getLvlSch()+"_news", "Новые объявления!", "В вашей школе новое объявление!\nУведомления можно регулировать на странице 'Настройки'", "/DipvLom/static/media/info.jpg");
            }
            authController.sendMessageForAll("addNewsC", ans, TypesConnect.NEWS, subscriber.getLvlSch(), subscriber.getLvlGr(), subscriber.getLvlMore1(), subscriber.getLvlMore2());
        }, body.wrtr, body.bol);
    }

    @PostMapping(value = "/getNews")
    public JsonObject getNews(@RequestBody DataNews body) {
        Subscriber subscriber = authController.getSubscriber(body.uuid);
        final var ref = new Object() {
            Long schId = null;
        };
        try {
            body.wrtr = datas.ini(body.toString());
            List<Long> list = null;
            body.wrtr.name("body").beginObject();
            Syst syst = null;
            School school = null;
            if (subscriber != null) {
                User user = datas.userByLogin(subscriber.getLogin());
                syst = datas.getSyst();
                if (user != null) {
                    ref.schId = user.getRoles().get(user.getSelRole()).getYO();
                    school = datas.schoolById(ref.schId);
                    if (Objects.equals(body.type, "Yo") && school != null && !ObjectUtils.isEmpty(school.getNews())) {
                        list = school.getNews();
                    }
                }
                if (Objects.equals(body.type, "Por") && syst != null && !ObjectUtils.isEmpty(syst.getNews())) {
                    list = syst.getNews();
                    ref.schId = null;
                }
            }
            if (!ObjectUtils.isEmpty(list)) {
                for (Long i1 : list) {
                    News newsU = datas.newsById(i1);
                    if (newsU == null) {
                        if (ref.schId == null) {
                            syst.getNews().remove(i1);
                        } else {
                            school.getNews().remove(i1);
                        }
                        continue;
                    }
                    body.wrtr.name(i1 + "").beginObject()
                            .name("title").value(newsU.getTitle())
                            .name("date").value(newsU.getDate())
                            .name("img_url").value(newsU.getImg_url())
                            .name("text").value(newsU.getText())
                            .endObject();
                }
            }
            body.wrtr.endObject();
        } catch (Exception e) {
            body.bol = Main.excp(e);
        }
        return datas.getObj(ans -> {
            authController.infCon(body.uuid, subscriber.getLogin(), TypesConnect.NEWS, ref.schId + "", "main", "main", body.type);
        }, body.wrtr, body.bol);
    }
}

@ToString
@NoArgsConstructor @AllArgsConstructor
class DataNews {
    public String uuid, type, title, date, img_url, text, val;
    public Long id;
    public transient boolean bol = true;
    public transient JsonTreeWriter wrtr;
}
package ru.mirea.controllers.people;

import com.google.gson.JsonObject;
import lombok.NoArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ru.mirea.Main;
import ru.mirea.controllers.AuthController;
import ru.mirea.data.SSE.Subscriber;
import ru.mirea.data.SSE.TypesConnect;
import ru.mirea.data.models.auth.Role;
import ru.mirea.data.models.auth.Invite;
import ru.mirea.data.models.auth.User;
import ru.mirea.data.models.school.Group;
import ru.mirea.data.models.school.School;
import ru.mirea.services.ServerService;

import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import java.util.HashMap;
import java.util.UUID;

@RequestMapping("/parents")
@NoArgsConstructor
@RestController public class ParentsController {

    @Autowired
    private ServerService datas;

    @Autowired
    private AuthController authController;

    @PostMapping
    public JsonObject post(@RequestBody JsonObject data) {
        System.out.println("Post! " + data);
        JsonObject ans = new JsonObject(), body = null, bodyAns;
        ans.addProperty("error", false);
        if(data.has("body") && data.get("body").isJsonObject()) body = data.get("body").getAsJsonObject();
        if(!data.has("type")) data.addProperty("type", "default");
        switch (data.get("type").getAsString()){
            case "getInfo" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                bodyAns = new JsonObject();
                ans.add("bodyC", bodyAns);
                JsonObject bodA1 = new JsonObject();
                ans.add("bodyP", bodA1);
                User user = datas.userByLogin(subscriber.getLogin());
                Group group = null;
                Long schId = null;
                if(user != null) {
                    schId = datas.getFirstRole(user.getRoles()).getYO();
                    School school = datas.schoolById(schId);
                    if(user.getRoles().containsKey(3L)) {
                        group = datas.groupById(body.get("group").getAsLong());
                    } else {
                        group = datas.groupById(datas.getFirstRole(user.getRoles()).getGroup());
                    }
                    if(group != null && school != null && school.getGroups().contains(group.getId())) {
                        if (!ObjectUtils.isEmpty(group.getKids())) {
                            for (Long i1 : group.getKids()) {
                                JsonObject studO = new JsonObject(), studC, parGL = null, parO;
                                User studU = datas.userById(i1);
                                studO.addProperty("name", studU.getFio());
                                studO.addProperty("login", studU.getLogin());
                                if (!ObjectUtils.isEmpty(studU.getCode())) studO.addProperty("link", studU.getCode());
                                if(studU != null && (!ObjectUtils.isEmpty(studU.getRoles().get(0L).getParentsInv())
                                || !ObjectUtils.isEmpty(studU.getRoles().get(0L).getParents()))){
                                    studC = studO.deepCopy();
                                    bodA1.add(i1 + "", studC);
                                    parGL = new JsonObject();
                                    studC.add("par", parGL);
                                }
                                if(studU != null && !ObjectUtils.isEmpty(studU.getRoles().get(0L).getParents())){
                                    for (Long i2 : studU.getRoles().get(0L).getParents()) {
                                        parO = new JsonObject();
                                        User parU = datas.userById(i2);
                                        parO.addProperty("name", parU.getFio());
                                        parO.addProperty("login", parU.getLogin());
                                        if (!ObjectUtils.isEmpty(parU.getCode())) parO.addProperty("link", parU.getCode());
                                        parGL.add(i2 + "", parO);
                                    }
                                }
                                if(studU != null && !ObjectUtils.isEmpty(studU.getRoles().get(0L).getParentsInv())){
                                    for (Long i2 : studU.getRoles().get(0L).getParentsInv()) {
                                        parO = new JsonObject();
                                        Invite parI = datas.inviteById(i2);
                                        parO.addProperty("name", parI.getFio());
                                        if (!ObjectUtils.isEmpty(parI.getCode())) parO.addProperty("link", parI.getCode());
                                        parGL.add(i2 + "", parO);
                                    }
                                }
                                bodyAns.add(i1 + "", studO);
                            }
                        }
                        if (!ObjectUtils.isEmpty(group.getKidsInv())) {
                            for (Long i1 : group.getKidsInv()) {
                                JsonObject studO = new JsonObject(), studC, parGL = null, parO;
                                Invite studI = datas.inviteById(i1);
                                studO.addProperty("name", studI.getFio());
                                if (!ObjectUtils.isEmpty(studI.getCode())) studO.addProperty("link", studI.getCode());
                                if(studI != null && (!ObjectUtils.isEmpty(studI.getRole().get(0L).getParentsInv())
                                        || !ObjectUtils.isEmpty(studI.getRole().get(0L).getParents()))){
                                    studC = studO.deepCopy();
                                    bodA1.add(i1 + "", studC);
                                    parGL = new JsonObject();
                                    studC.add("par", parGL);
                                }
                                if(studI != null && !ObjectUtils.isEmpty(studI.getRole().get(0L).getParents())){
                                    for (Long i2 : studI.getRole().get(0L).getParents()) {
                                        parO = new JsonObject();
                                        User parU = datas.userById(i2);
                                        parO.addProperty("name", parU.getFio());
                                        parO.addProperty("login", parU.getLogin());
                                        if (!ObjectUtils.isEmpty(parU.getCode())) parO.addProperty("link", parU.getCode());
                                        parGL.add(i2 + "", parO);
                                    }
                                }
                                if(studI != null && !ObjectUtils.isEmpty(studI.getRole().get(0L).getParentsInv())){
                                    for (Long i2 : studI.getRole().get(0L).getParentsInv()) {
                                        parO = new JsonObject();
                                        Invite parI = datas.inviteById(i2);
                                        parO.addProperty("name", parI.getFio());
                                        if (!ObjectUtils.isEmpty(parI.getCode())) parO.addProperty("link", parI.getCode());
                                        parGL.add(i2 + "", parO);
                                    }
                                }
                                bodyAns.add(i1 + "", studO);
                            }
                        }
                    }
                }
                if(group == null){
                    ans.addProperty("error", true);
                } else {
                    authController.infCon(body.get("uuid").getAsString(), subscriber.getLogin(), TypesConnect.PARENTS, schId+"", group.getId()+"", user.getRoles().containsKey(3L) ? "ht" : "main", "main");
                }
                return ans;
            }
            case "addKid" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                Invite inv = null;
                if(user != null && user.getRoles().containsKey(3L)) {
                    User kidU = datas.userById(body.get("id").getAsLong());
                    Invite kidI = datas.inviteById(body.get("id").getAsLong());
                    JsonObject par = body.get("bod").getAsJsonObject().get("par").getAsJsonObject(), parA = new JsonObject();
                    if(kidU != null) {
                        ans.addProperty("id", kidU.getId());
                        bodyAns.addProperty("name", kidU.getFio());
                        bodyAns.addProperty("login", kidU.getLogin());
                        bodyAns.add("par", parA);
                        for (String id : par.keySet()) {
                            Instant after = Instant.now().plus(Duration.ofDays(30));
                            Date dateAfter = Date.from(after);
                            inv = new Invite(par.get(id).getAsJsonObject().get("name").getAsString(), new HashMap<>() {{
                                put(1L, new Role(null, Long.parseLong(subscriber.getLvlSch()), null));
                            }}, Main.df.format(dateAfter));
                            datas.getInviteRepository().saveAndFlush(inv);

                            JsonObject parO = new JsonObject();
                            parO.addProperty("name", inv.getFio());
                            parA.add(inv.getId()+"", parO);

                            if (!kidU.getRoles().get(0L).getParentsInv().contains(kidU.getId())) {
                                kidU.getRoles().get(0L).getParentsInv().add(kidU.getId());
                            }
                            kidU.getRoles().get(0L).getParentsInv().add(inv.getId());
                            datas.getUserRepository().saveAndFlush(kidU);
                        }
                    }
                    if(kidI != null) {
                        ans.addProperty("id", kidI.getId());
                        bodyAns.addProperty("name", kidI.getFio());
                        bodyAns.add("par", parA);
                        for (String id : par.keySet()) {
                            Instant after = Instant.now().plus(Duration.ofDays(30));
                            Date dateAfter = Date.from(after);
                            inv = new Invite(par.get(id).getAsJsonObject().get("name").getAsString(), new HashMap<>() {{
                                put(1L, new Role(null, Long.parseLong(subscriber.getLvlSch()), null));
                            }}, Main.df.format(dateAfter));
                            datas.getInviteRepository().saveAndFlush(inv);

                            JsonObject parO = new JsonObject();
                            parO.addProperty("name", inv.getFio());
                            parA.add(inv.getId()+"", parO);

                            if (!kidI.getRole().get(0L).getParentsInv().contains(kidI.getId())) {
                                kidI.getRole().get(0L).getParentsInv().add(kidI.getId());
                            }
                            kidI.getRole().get(0L).getParentsInv().add(inv.getId());
                            datas.getInviteRepository().saveAndFlush(kidI);
                        }
                    }
                }
                if(inv == null){
                    ans.addProperty("error", true);
                } else {
//                    ans.addProperty("id", inv.getId());
//                    bodyAns.addProperty("name", body.get("name").getAsString());

                    authController.sendMessageForAll("addKidC", ans, TypesConnect.PARENTS, subscriber.getLvlSch(), subscriber.getLvlGr(), "main", "main");
                }
                return ans;
            }
            case "setCodePep" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                User user1 = datas.userById(body.get("id1").getAsLong());
                Invite inv = datas.inviteById(body.get("id1").getAsLong());
                Long schId = null;
                if(user != null && (user1 != null || inv != null)
                        && body.get("role").getAsLong() == 3L && user.getRoles().containsKey(3L)) {
                    UUID uuid = UUID.randomUUID();
                    Instant after = Instant.now().plus(Duration.ofDays(30));
                    Date dateAfter = Date.from(after);
                    if(user1 != null){
                        user1.setCode(uuid.toString());
                        user1.setExpDate(Main.df.format(dateAfter));
                        datas.getUserRepository().saveAndFlush(user1);
                        schId = datas.getFirstRole(user1.getRoles()).getYO();

                        ans.addProperty("id1", user1.getId());
                    } else if(inv != null){
                        inv.setCode(uuid.toString());
                        inv.setExpDate(Main.df.format(dateAfter));
                        datas.getInviteRepository().saveAndFlush(inv);
                        schId = datas.getFirstRole(inv.getRole()).getYO();

                        ans.addProperty("id1", inv.getId());
                    }
                    System.out.println("setCode " + uuid);

                    ans.addProperty("code", uuid.toString());
                    ans.add("id", body.get("id"));
                    authController.sendMessageForAll("codPepL1C", ans, subscriber.getType(), schId+"", subscriber.getLvlGr(), "ht", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "chPep" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                User user1 = datas.userByLogin(body.get("id").getAsString());
                Invite inv = datas.inviteById(body.get("id1").getAsLong());
                if(user != null && user.getRoles().containsKey(3L) && (user1 != null || inv != null)) {
                    if(user1 != null){
                        user1.setFio(body.get("name").getAsString());
                        datas.getUserRepository().saveAndFlush(user1);

                        ans.addProperty("id", user1.getId());
                    } else if(inv != null){
                        inv.setFio(body.get("name").getAsString());
                        datas.getInviteRepository().saveAndFlush(inv);

                        ans.addProperty("id", inv.getId());
                    }

                    ans.addProperty("name", body.get("name").getAsString());

                    authController.sendMessageForAll("chPepC", ans, TypesConnect.STUDENTS, subscriber.getLvlSch(), subscriber.getLvlGr(), "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "remPep" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                User user1 = datas.userByLogin(body.get("id").getAsString());
                Invite inv = datas.inviteById(body.get("id1").getAsLong());
                if(user != null && user.getRoles().containsKey(3L) && (user1 != null || inv != null)) {
                    Group group = datas.groupById(Long.parseLong(subscriber.getLvlGr()));
                    if(group != null) {
                        if (user1 != null) {
                            user1.getRoles().remove(3L);
                            datas.getUserRepository().saveAndFlush(user1);
                            if (!ObjectUtils.isEmpty(group.getKids())) group.getKids().remove(user1.getId());
                            datas.getGroupRepository().saveAndFlush(group);

                            ans.addProperty("id", user1.getId());
                        } else if (inv != null) {
                            datas.getInviteRepository().delete(inv);
                            if (!ObjectUtils.isEmpty(group.getKidsInv())) group.getKidsInv().remove(inv.getId());
                            datas.getGroupRepository().saveAndFlush(group);

                            ans.addProperty("id", inv.getId());
                        }
                    }
                }
                if(ans.has("id")){
                    authController.sendMessageForAll("remPepC", ans, TypesConnect.STUDENTS, subscriber.getLvlSch(), subscriber.getLvlGr(), "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            default -> {
                System.out.println("Error Type" + data.get("type"));
                ans.addProperty("error", true);
                return ans;
            }
        }
    }
}
package ru.mirea.controllers.people;

import com.google.gson.JsonObject;
import lombok.NoArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ru.mirea.Main;
import ru.mirea.controllers.AuthController;
import ru.mirea.data.SSE.Subscriber;
import ru.mirea.data.SSE.TypesConnect;
import ru.mirea.data.models.auth.Role;
import ru.mirea.data.models.auth.Invite;
import ru.mirea.data.models.auth.User;
import ru.mirea.data.models.school.Group;
import ru.mirea.data.models.school.School;
import ru.mirea.services.ServerService;

import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import java.util.HashMap;
import java.util.UUID;

@RequestMapping("/teachers")
@NoArgsConstructor
@RestController public class TeachersController {

    @Autowired
    private ServerService datas;

    @Autowired
    private AuthController authController;

    @PostMapping
    public JsonObject post(@RequestBody JsonObject data) {
        System.out.println("Post! " + data);
        JsonObject ans = new JsonObject(), body = null, bodyAns;
        ans.addProperty("error", false);
        if(data.has("body") && data.get("body").isJsonObject()) body = data.get("body").getAsJsonObject();
        if(!data.has("type")) data.addProperty("type", "default");
        switch (data.get("type").getAsString()){
            case "getTeachers" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                User user = datas.userByLogin(subscriber.getLogin());
                Long schId = null;
                if(user != null) {
                    schId = datas.getFirstRole(user.getRoles()).getYO();
                    School school = datas.schoolById(schId);
                    if(school != null) {
                        if (user.getRoles().containsKey(3L)) {
                            datas.teachersBySchool(school, bodyAns);
                        } else {

                        }
                    }
                }
                if(ObjectUtils.isEmpty(bodyAns.keySet())){
                    ans.addProperty("error", true);
                } else {
                    authController.infCon(body.get("uuid").getAsString(), subscriber.getLogin(), TypesConnect.TEACHERS, schId+"", "main", user.getRoles().containsKey(3L) ? "ht" : "main", "main");
                }
                return ans;
            }
            case "addTea" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                Invite inv = null;
                if(user != null && user.getRoles().containsKey(3L)) {
                    School school = datas.schoolById(Long.parseLong(subscriber.getLvlSch()));
                    if(school != null) {
                        Instant after = Instant.now().plus(Duration.ofDays(30));
                        Date dateAfter = Date.from(after);
                        inv = new Invite(body.get("name").getAsString(), new HashMap<>() {{
                            put(2L, new Role(null, null, Long.parseLong(subscriber.getLvlSch())));
                        }}, Main.df.format(dateAfter));
                        datas.getInviteRepository().saveAndFlush(inv);
                        school.getTeachersInv().add(inv.getId());
                        datas.getSchoolRepository().saveAndFlush(school);
                    }
                }
                if(inv == null){
                    ans.addProperty("error", true);
                } else {
                    ans.addProperty("id", inv.getId());
                    ans.addProperty("name", body.get("name").getAsString());

                    authController.sendMessageForAll("addTeaC", ans, TypesConnect.TEACHERS, subscriber.getLvlSch(), "main", "ht", "main");
                }
                return ans;
            }
            case "setCodePep" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                User user1 = datas.userById(body.get("id1").getAsLong());
                Invite inv = datas.inviteById(body.get("id1").getAsLong());
                Long schId = null;
                if(user != null && (user1 != null || inv != null)
                        && body.get("role").getAsLong() == 3L && user.getRoles().containsKey(3L)) {
                    UUID uuid = UUID.randomUUID();
                    Instant after = Instant.now().plus(Duration.ofDays(30));
                    Date dateAfter = Date.from(after);
                    if(user1 != null){
                        user1.setCode(uuid.toString());
                        user1.setExpDate(Main.df.format(dateAfter));
                        datas.getUserRepository().saveAndFlush(user1);
                        schId = datas.getFirstRole(user1.getRoles()).getYO();

                        ans.addProperty("id1", user1.getId());
                    } else if(inv != null){
                        inv.setCode(uuid.toString());
                        inv.setExpDate(Main.df.format(dateAfter));
                        datas.getInviteRepository().saveAndFlush(inv);
                        schId = datas.getFirstRole(inv.getRole()).getYO();

                        ans.addProperty("id1", inv.getId());
                    }
                    System.out.println("setCode " + uuid);

                    ans.addProperty("code", uuid.toString());
                    ans.add("id", body.get("id"));
                    authController.sendMessageForAll("codPepL1C", ans, subscriber.getType(), schId+"", "main", "ht", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "chPep" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                User user1 = datas.userByLogin(body.get("id").getAsString());
                Invite inv = datas.inviteById(body.get("id1").getAsLong());
                if(user != null && user.getRoles().containsKey(3L) && (user1 != null || inv != null)) {
                    if(user1 != null){
                        user1.setFio(body.get("name").getAsString());
                        datas.getUserRepository().saveAndFlush(user1);

                        ans.addProperty("id", user1.getId());
                    } else if(inv != null){
                        inv.setFio(body.get("name").getAsString());
                        datas.getInviteRepository().saveAndFlush(inv);

                        ans.addProperty("id", inv.getId());
                    }

                    ans.addProperty("name", body.get("name").getAsString());

                    authController.sendMessageForAll("chPepC", ans, TypesConnect.STUDENTS, subscriber.getLvlSch(), subscriber.getLvlGr(), "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "remPep" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                User user1 = datas.userByLogin(body.get("id").getAsString());
                Invite inv = datas.inviteById(body.get("id1").getAsLong());
                if(user != null && user.getRoles().containsKey(3L) && (user1 != null || inv != null)) {
                    Group group = datas.groupById(Long.parseLong(subscriber.getLvlGr()));
                    if(group != null) {
                        if (user1 != null) {
                            user1.getRoles().remove(3L);
                            datas.getUserRepository().saveAndFlush(user1);
                            if (!ObjectUtils.isEmpty(group.getKids())) group.getKids().remove(user1.getId());
                            datas.getGroupRepository().saveAndFlush(group);

                            ans.addProperty("id", user1.getId());
                        } else if (inv != null) {
                            datas.getInviteRepository().delete(inv);
                            if (!ObjectUtils.isEmpty(group.getKidsInv())) group.getKidsInv().remove(inv.getId());
                            datas.getGroupRepository().saveAndFlush(group);

                            ans.addProperty("id", inv.getId());
                        }
                    }
                }
                if(ans.has("id")){
                    authController.sendMessageForAll("remPepC", ans, TypesConnect.STUDENTS, subscriber.getLvlSch(), subscriber.getLvlGr(), "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            default -> {
                System.out.println("Error Type" + data.get("type"));
                ans.addProperty("error", true);
                return ans;
            }
        }
    }
}
package ru.mirea.controllers.people;

import com.google.gson.JsonObject;
import lombok.NoArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.*;
import ru.mirea.Main;
import ru.mirea.controllers.AuthController;
import ru.mirea.data.SSE.Subscriber;
import ru.mirea.data.SSE.TypesConnect;
import ru.mirea.data.models.auth.Role;
import ru.mirea.data.models.Syst;
import ru.mirea.data.models.auth.Invite;
import ru.mirea.data.models.auth.User;
import ru.mirea.services.ServerService;

import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import java.util.HashMap;

@RestController
@RequestMapping("/admins")
@NoArgsConstructor
@CrossOrigin(origins = {"http://localhost:3000", "http://192.168.1.66:3000", "https://ddudde.github.io"})
public class AdminsController {

    @Autowired
    private ServerService datas;

    @Autowired
    private AuthController authController;

    @PostMapping
    public JsonObject post(@RequestBody JsonObject data) {
        System.out.println("Post! " + data);
        JsonObject ans = new JsonObject(), body = null, bodyAns;
        ans.addProperty("error", false);
        if(data.has("body") && data.get("body").isJsonObject()) body = data.get("body").getAsJsonObject();
        if(!data.has("type")) data.addProperty("type", "default");
        switch (data.get("type").getAsString()){
            case "getAdmins" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                User user = datas.userByLogin(subscriber.getLogin());
                Syst syst = datas.getSyst();
                if(user != null && syst != null) {
                    if(!ObjectUtils.isEmpty(syst.getAdmins())){
                        for(Long i1 : syst.getAdmins()){
                            JsonObject admO = new JsonObject();
                            User admU = datas.userById(i1);
                            admO.addProperty("name", admU.getFio());
                            admO.addProperty("login", admU.getLogin());
                            if(!ObjectUtils.isEmpty(admU.getCode())) admO.addProperty("link", admU.getCode());
                            bodyAns.add(i1+"", admO);
                        }
                    }
                    if(!ObjectUtils.isEmpty(syst.getAdminsInv())){
                        for(Long i1 : syst.getAdminsInv()){
                            JsonObject admO = new JsonObject();
                            Invite admI = datas.inviteById(i1);
                            admO.addProperty("name", admI.getFio());
                            if(!ObjectUtils.isEmpty(admI.getCode())) admO.addProperty("link", admI.getCode());
                            bodyAns.add(i1+"", admO);
                        }
                    }
                    authController.infCon(body.get("uuid").getAsString(), subscriber.getLogin(), TypesConnect.ADMINS, "null", "main", user.getRoles().containsKey(4L) ? "adm" : "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "addPep" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                Syst syst = datas.getSyst();
                if(user != null && user.getRoles().containsKey(4L) && syst != null) {
                    Instant after = Instant.now().plus(Duration.ofDays(30));
                    Date dateAfter = Date.from(after);
                    Invite inv = new Invite(body.get("name").getAsString(), new HashMap<>(){{
                        put(4L, new Role(null));
                    }}, Main.df.format(dateAfter));
                    datas.getInviteRepository().saveAndFlush(inv);
                    syst.getAdminsInv().add(inv.getId());
                    datas.getSystRepository().saveAndFlush(syst);

                    ans.addProperty("id", inv.getId());
                    bodyAns.addProperty("name", body.get("name").getAsString());

                    authController.sendMessageForAll("addPepC", ans, TypesConnect.ADMINS, "main", "main", "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "chPep" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                User user1 = datas.userByLogin(body.get("id").getAsString());
                Invite inv = datas.inviteById(body.get("id1").getAsLong());
                if(user != null && user.getRoles().containsKey(4L) && (user1 != null || inv != null)) {
                    if(user1 != null){
                        user1.setFio(body.get("name").getAsString());
                        datas.getUserRepository().saveAndFlush(user1);

                        ans.addProperty("id", user1.getId());
                    } else if(inv != null){
                        inv.setFio(body.get("name").getAsString());
                        datas.getInviteRepository().saveAndFlush(inv);

                        ans.addProperty("id", inv.getId());
                    }

                    ans.addProperty("name", body.get("name").getAsString());

                    authController.sendMessageForAll("chPepC", ans, TypesConnect.ADMINS, "main", "main", "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "remPep" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                User user1 = datas.userByLogin(body.get("id").getAsString());
                Syst syst = datas.getSyst();
                Invite inv = datas.inviteById(body.get("id1").getAsLong());
                if(user != null && user.getRoles().containsKey(4L) && (user1 != null || inv != null) && syst != null) {
                    if(user1 != null){
                        user1.getRoles().remove(4L);
                        datas.getUserRepository().saveAndFlush(user1);
                        if(!ObjectUtils.isEmpty(syst.getAdmins())) syst.getAdmins().remove(user1.getId());
                        datas.getSystRepository().saveAndFlush(syst);

                        ans.addProperty("id", user1.getId());
                    } else if(inv != null){
                        datas.getInviteRepository().delete(inv);
                        if(!ObjectUtils.isEmpty(syst.getAdminsInv())) syst.getAdminsInv().remove(inv.getId());
                        datas.getSystRepository().saveAndFlush(syst);

                        ans.addProperty("id", inv.getId());
                    }

                    authController.sendMessageForAll("remPepC", ans, TypesConnect.ADMINS, "main", "main", "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            default -> {
                System.out.println("Error Type" + data.get("type"));
                ans.addProperty("error", true);
                return ans;
            }
        }
    }
}
package ru.mirea.controllers.people;

import com.google.gson.JsonObject;
import lombok.NoArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ru.mirea.Main;
import ru.mirea.controllers.AuthController;
import ru.mirea.data.SSE.Subscriber;
import ru.mirea.data.SSE.TypesConnect;
import ru.mirea.data.models.auth.Role;
import ru.mirea.data.models.auth.Invite;
import ru.mirea.data.models.auth.User;
import ru.mirea.data.models.school.Group;
import ru.mirea.data.models.school.School;
import ru.mirea.services.ServerService;

import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import java.util.HashMap;
import java.util.Objects;

@RequestMapping("/students")
@NoArgsConstructor
@RestController public class StudentsController {

    @Autowired
    private ServerService datas;

    @Autowired
    private AuthController authController;

    @PostMapping
    public JsonObject post(@RequestBody JsonObject data) {
        System.out.println("Post! " + data);
        JsonObject ans = new JsonObject(), body = null, bodyAns;
        ans.addProperty("error", false);
        if(data.has("body") && data.get("body").isJsonObject()) body = data.get("body").getAsJsonObject();
        if(!data.has("type")) data.addProperty("type", "default");
        switch (data.get("type").getAsString()){
            case "getStud" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                User user = datas.userByLogin(subscriber.getLogin());
                Group group = null;
                Long schId = null;
                if(user != null) {
                    schId = datas.getFirstRole(user.getRoles()).getYO();
                    School school = datas.schoolById(schId);
                    if(user.getRoles().containsKey(3L)) {
                        group = datas.groupById(body.get("group").getAsLong());
                    } else {
                        group = datas.groupById(datas.getFirstRole(user.getRoles()).getGroup());
                    }
                    if(group != null && school != null && school.getGroups().contains(group.getId())) {
                        if (!ObjectUtils.isEmpty(group.getKids())) {
                            for (Long i1 : group.getKids()) {
                                if(Objects.equals(user.getId(), i1)) continue;
                                JsonObject studO = new JsonObject();
                                User studU = datas.userById(i1);
                                studO.addProperty("name", studU.getFio());
                                studO.addProperty("login", studU.getLogin());
                                if (!ObjectUtils.isEmpty(studU.getCode())) studO.addProperty("link", studU.getCode());
                                bodyAns.add(i1 + "", studO);
                            }
                        }
                        if (!ObjectUtils.isEmpty(group.getKidsInv())) {
                            for (Long i1 : group.getKidsInv()) {
                                JsonObject studO = new JsonObject();
                                Invite studI = datas.inviteById(i1);
                                studO.addProperty("name", studI.getFio());
                                if (!ObjectUtils.isEmpty(studI.getCode())) studO.addProperty("link", studI.getCode());
                                bodyAns.add(i1 + "", studO);
                            }
                        }
                    }
                }
                if(group == null){
                    ans.addProperty("error", true);
                } else {

                    authController.infCon(body.get("uuid").getAsString(), subscriber.getLogin(), TypesConnect.STUDENTS, schId+"", group.getId()+"", user.getRoles().containsKey(3L) ? "ht" : "main", "main");
                }
                return ans;
            }
            case "addPep" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                Invite inv = null;
                if(user != null && user.getRoles().containsKey(3L)) {
                    Group group = datas.groupById(Long.parseLong(subscriber.getLvlGr()));
                    if(group != null) {
                        Instant after = Instant.now().plus(Duration.ofDays(30));
                        Date dateAfter = Date.from(after);
                        inv = new Invite(body.get("name").getAsString(), new HashMap<>() {{
                            put(0L, new Role(null, Long.parseLong(subscriber.getLvlSch()), group.getId(), null));
                        }}, Main.df.format(dateAfter));
                        datas.getInviteRepository().saveAndFlush(inv);
                        group.getKidsInv().add(inv.getId());
                        datas.getGroupRepository().saveAndFlush(group);
                    }
                }
                if(inv == null){
                    ans.addProperty("error", true);
                } else {
                    ans.addProperty("id", inv.getId());
                    bodyAns.addProperty("name", body.get("name").getAsString());

                    authController.sendMessageForAll("addPepC", ans, TypesConnect.STUDENTS, subscriber.getLvlSch(), subscriber.getLvlGr(), "main", "main");
                }
                return ans;
            }
            case "chPep" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                User user1 = datas.userByLogin(body.get("id").getAsString());
                Invite inv = datas.inviteById(body.get("id1").getAsLong());
                if(user != null && user.getRoles().containsKey(3L) && (user1 != null || inv != null)) {
                    if(user1 != null){
                        user1.setFio(body.get("name").getAsString());
                        datas.getUserRepository().saveAndFlush(user1);

                        ans.addProperty("id", user1.getId());
                    } else if(inv != null){
                        inv.setFio(body.get("name").getAsString());
                        datas.getInviteRepository().saveAndFlush(inv);

                        ans.addProperty("id", inv.getId());
                    }

                    ans.addProperty("name", body.get("name").getAsString());

                    authController.sendMessageForAll("chPepC", ans, TypesConnect.STUDENTS, subscriber.getLvlSch(), subscriber.getLvlGr(), "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "remPep" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                User user1 = datas.userByLogin(body.get("id").getAsString());
                Invite inv = datas.inviteById(body.get("id1").getAsLong());
                if(user != null && user.getRoles().containsKey(3L) && (user1 != null || inv != null)) {
                    Group group = datas.groupById(Long.parseLong(subscriber.getLvlGr()));
                    if(group != null) {
                        if (user1 != null) {
                            user1.getRoles().remove(3L);
                            datas.getUserRepository().saveAndFlush(user1);
                            if (!ObjectUtils.isEmpty(group.getKids())) group.getKids().remove(user1.getId());
                            datas.getGroupRepository().saveAndFlush(group);

                            ans.addProperty("id", user1.getId());
                        } else if (inv != null) {
                            datas.getInviteRepository().delete(inv);
                            if (!ObjectUtils.isEmpty(group.getKidsInv())) group.getKidsInv().remove(inv.getId());
                            datas.getGroupRepository().saveAndFlush(group);

                            ans.addProperty("id", inv.getId());
                        }
                    }
                }
                if(ans.has("id")){
                    authController.sendMessageForAll("remPepC", ans, TypesConnect.STUDENTS, subscriber.getLvlSch(), subscriber.getLvlGr(), "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            default -> {
                System.out.println("Error Type" + data.get("type"));
                ans.addProperty("error", true);
                return ans;
            }
        }
    }
}
package ru.mirea.controllers.people;

import com.google.gson.JsonObject;
import lombok.NoArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ru.mirea.Main;
import ru.mirea.controllers.AuthController;
import ru.mirea.data.SSE.Subscriber;
import ru.mirea.data.SSE.TypesConnect;
import ru.mirea.data.models.auth.Role;
import ru.mirea.data.models.auth.Invite;
import ru.mirea.data.models.auth.User;
import ru.mirea.data.models.school.Group;
import ru.mirea.data.models.school.School;
import ru.mirea.services.ServerService;

import java.time.Duration;
import java.time.Instant;
import java.util.Date;
import java.util.HashMap;

@RequestMapping("/hteachers")
@NoArgsConstructor
@RestController public class HTeachersController {

    @Autowired
    private ServerService datas;

    @Autowired
    private AuthController authController;

    @PostMapping
    public JsonObject post(@RequestBody JsonObject data) {
        System.out.println("Post! " + data);
        JsonObject ans = new JsonObject(), body = null, bodyAns;
        ans.addProperty("error", false);
        if(data.has("body") && data.get("body").isJsonObject()) body = data.get("body").getAsJsonObject();
        if(!data.has("type")) data.addProperty("type", "default");
        switch (data.get("type").getAsString()){
            case "getInfo" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                User user = datas.userByLogin(subscriber.getLogin());
                JsonObject htO = null;
                Long schId = null;
                if(user != null) {
                    if(body.get("role").getAsLong() == 4L && user.getRoles().containsKey(4L)) {
                        for(School el : datas.getSchools()){
                            JsonObject schools = new JsonObject();
                            schools.addProperty("name", el.getName());
                            JsonObject pep = new JsonObject();
                            schools.add("pep", pep);
                            if(!ObjectUtils.isEmpty(el.getHteachers())){
                                for(Long i1 : el.getHteachers()){
                                    htO = new JsonObject();
                                    User htU = datas.userById(i1);
                                    htO.addProperty("name", htU.getFio());
                                    htO.addProperty("login", htU.getLogin());
                                    System.out.println(htU.getCode());
                                    if(!ObjectUtils.isEmpty(htU.getCode())) htO.addProperty("link", htU.getCode());
                                    pep.add(i1+"", htO);
                                }
                            }
                            if(!ObjectUtils.isEmpty(el.getHteachersInv())){
                                for(Long i1 : el.getHteachersInv()){
                                    htO = new JsonObject();
                                    Invite htI = datas.inviteById(i1);
                                    htO.addProperty("name", htI.getFio());
                                    System.out.println(htI.getCode());
                                    if(!ObjectUtils.isEmpty(htI.getCode())) htO.addProperty("link", htI.getCode());
                                    pep.add(i1+"", htO);
                                }
                            }
                            bodyAns.add(el.getId()+"", schools);
                        }
                    } else {
                        schId = user.getRoles().get(body.get("role").getAsLong()).getYO();
                        School school = datas.schoolById(schId);
                        if(school != null) {
                            if (!ObjectUtils.isEmpty(school.getHteachers())) {
                                for (Long i1 : school.getHteachers()) {
                                    htO = new JsonObject();
                                    User htU = datas.userById(i1);
                                    htO.addProperty("name", htU.getFio());
                                    htO.addProperty("login", htU.getLogin());
                                    System.out.println(htU.getCode());
                                    if (!ObjectUtils.isEmpty(htU.getCode())) htO.addProperty("link", htU.getCode());
                                    bodyAns.add(i1 + "", htO);
                                }
                            }
                            if (!ObjectUtils.isEmpty(school.getHteachersInv())) {
                                for (Long i1 : school.getHteachersInv()) {
                                    htO = new JsonObject();
                                    Invite htI = datas.inviteById(i1);
                                    htO.addProperty("name", htI.getFio());
                                    System.out.println(htI.getCode());
                                    if (!ObjectUtils.isEmpty(htI.getCode())) htO.addProperty("link", htI.getCode());
                                    bodyAns.add(i1 + "", htO);
                                }
                            }
                        }
                    }
                }
                if(htO == null){
                    ans.addProperty("error", true);
                } else {
                    String l2 = "";
                    if(body.get("role").getAsLong() == 4L && user.getRoles().containsKey(4L)){
                        l2 = "adm";
                    } else if(body.get("role").getAsLong() == 3L && user.getRoles().containsKey(3L)){
                        l2 = "ht";
                    } else {
                        l2 = "user";
                    }
                    authController.infCon(body.get("uuid").getAsString(), subscriber.getLogin(), TypesConnect.HTEACHERS, schId+"", "main", l2, "main");
                }
                return ans;
            }
            case "addSch" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                if(user != null && user.getRoles().containsKey(4L)) {
                    School school = new School(body.get("name").getAsString());
                    datas.getSchoolRepository().saveAndFlush(school);

                    ans.addProperty("id", school.getId());
                    bodyAns.addProperty("name", body.get("name").getAsString());

                    authController.sendMessageForAll("addInfoL1C", ans, TypesConnect.HTEACHERS, subscriber.getLvlSch(), subscriber.getLvlGr(), subscriber.getLvlMore1(), subscriber.getLvlMore2());
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "remSch" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                School school = datas.schoolById(body.get("id").getAsLong());
                if(user != null && user.getRoles().containsKey(4L) && school != null) {
                    datas.getSchoolRepository().delete(school);

                    ans.addProperty("id", body.get("id").getAsLong());

                    authController.sendMessageForAll("remInfoL1C", ans, TypesConnect.HTEACHERS, subscriber.getLvlSch(), subscriber.getLvlGr(), subscriber.getLvlMore1(), subscriber.getLvlMore2());
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "chSch" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                School school = datas.schoolById(body.get("id").getAsLong());
                if(user != null && user.getRoles().containsKey(4L) && school != null) {
                    school.setName(body.get("name").getAsString());
                    datas.getSchoolRepository().saveAndFlush(school);

                    ans.addProperty("id", body.get("id").getAsLong());
                    ans.addProperty("name", body.get("name").getAsString());

                    authController.sendMessageForAll("chInfoL1C", ans, TypesConnect.HTEACHERS, subscriber.getLvlSch(), subscriber.getLvlGr(), subscriber.getLvlMore1(), subscriber.getLvlMore2());
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "addPep" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                Long schId = null;
                if(body.get("role").getAsLong() == 4L){
                    schId = body.get("yo").getAsLong();
                } else {
                    schId = user.getRoles().get(3L).getYO();
                }
                School sch = datas.schoolById(schId);
                Invite inv = null;
                if(user != null && sch != null) {
                    if(body.get("role").getAsLong() == 3L && user.getRoles().containsKey(3L)
                            || body.get("role").getAsLong() == 4L && user.getRoles().containsKey(4L)) {
                        Instant after = Instant.now().plus(Duration.ofDays(30));
                        Date dateAfter = Date.from(after);
                        Long finalSchId = schId;
                        inv = new Invite(body.get("name").getAsString(), new HashMap<>() {{
                            put(3L, new Role(null, finalSchId));
                        }}, Main.df.format(dateAfter));
                        datas.getInviteRepository().saveAndFlush(inv);
                        sch.getHteachersInv().add(inv.getId());
                        datas.getSchoolRepository().saveAndFlush(sch);

                        ans.addProperty("id1", sch.getId());
                        ans.addProperty("id", inv.getId());
                        bodyAns.addProperty("name", body.get("name").getAsString());
                    }
                }
                if(inv == null) {
                    ans.addProperty("error", true);
                } else {
                    if(body.get("role").getAsLong() == 4L) {
                        authController.sendMessageForAll("addInfoL2C", ans, TypesConnect.HTEACHERS, subscriber.getLvlSch(), subscriber.getLvlGr(), subscriber.getLvlMore1(), subscriber.getLvlMore2());
                        authController.sendMessageForAll("addInfoL1C", ans, TypesConnect.HTEACHERS, schId+"", "main", "user", "main");
                        authController.sendMessageForAll("addInfoL1C", ans, TypesConnect.HTEACHERS, schId+"", "main", "ht", "main");
                    }
                    if(body.get("role").getAsLong() == 3L) {
                        authController.sendMessageForAll("addInfoL1C", ans, TypesConnect.HTEACHERS, subscriber.getLvlSch(), subscriber.getLvlGr(), subscriber.getLvlMore1(), subscriber.getLvlMore2());
                        authController.sendMessageForAll("addInfoL1C", ans, TypesConnect.HTEACHERS, subscriber.getLvlSch(), "main", "user", "main");
                        authController.sendMessageForAll("addInfoL2C", ans, TypesConnect.HTEACHERS, "null", "main", "adm", "main");
                    }
                }
                return ans;
            }
            case "remPep" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                User user1 = datas.userByLogin(body.get("id").getAsString());
                Invite inv = datas.inviteById(body.get("id1").getAsLong());
                School sch = null;
                if(user1 != null){
                    sch = datas.schoolById(user1.getRoles().get(3L).getYO());
                } else if(inv != null){
                    sch = datas.schoolById(inv.getRole().get(3L).getYO());
                }
                if(user != null && sch != null) {
                    if((body.get("role").getAsLong() == 4L && user.getRoles().containsKey(4L)
                            || body.get("role").getAsLong() == 3L && user.getRoles().containsKey(3L))
                            && (user1 != null || inv != null)) {
                        if (user1 != null) {
                            user1.getRoles().remove(3L);
                            datas.getUserRepository().saveAndFlush(user1);
                            if (!ObjectUtils.isEmpty(sch.getHteachers())) sch.getHteachers().remove(user1.getId());
                            datas.getSchoolRepository().saveAndFlush(sch);

                            ans.addProperty("id", user1.getId());
                        } else if (inv != null) {
                            datas.getInviteRepository().delete(inv);
                            if (!ObjectUtils.isEmpty(sch.getHteachersInv())) sch.getHteachersInv().remove(inv.getId());
                            datas.getSchoolRepository().saveAndFlush(sch);

                            ans.addProperty("id", inv.getId());
                        }
                        ans.addProperty("id1", sch.getId());
                    }
                }
                if(ans.has("id")){
                    if(body.get("role").getAsLong() == 4L) {
                        authController.sendMessageForAll("remInfoL2C", ans, TypesConnect.HTEACHERS, subscriber.getLvlSch(), subscriber.getLvlGr(), subscriber.getLvlMore1(), subscriber.getLvlMore2());
                        authController.sendMessageForAll("remInfoL1C", ans, TypesConnect.HTEACHERS, sch.getId()+"", "main", "user", "main");
                        authController.sendMessageForAll("remInfoL1C", ans, TypesConnect.HTEACHERS, sch.getId()+"", "main", "ht", "main");
                    }
                    if(body.get("role").getAsLong() == 3L) {
                        authController.sendMessageForAll("remInfoL1C", ans, TypesConnect.HTEACHERS, subscriber.getLvlSch(), subscriber.getLvlGr(), subscriber.getLvlMore1(), subscriber.getLvlMore2());
                        authController.sendMessageForAll("remInfoL1C", ans, TypesConnect.HTEACHERS, subscriber.getLvlSch(), "main", "user", "main");
                        authController.sendMessageForAll("remInfoL2C", ans, TypesConnect.HTEACHERS, "null", "main", "adm", "main");
                    }
                } else{
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "chPep" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                User user1 = datas.userByLogin(body.get("id").getAsString());
                Invite inv = datas.inviteById(body.get("id1").getAsLong());
                School sch = null;
                if(user1 != null){
                    sch = datas.schoolById(user1.getRoles().get(3L).getYO());
                } else if(inv != null){
                    sch = datas.schoolById(inv.getRole().get(3L).getYO());
                }
                if(user != null && sch != null) {
                    if((body.get("role").getAsLong() == 4L && user.getRoles().containsKey(4L)
                            || body.get("role").getAsLong() == 3L && user.getRoles().containsKey(3L))
                            && (user1 != null || inv != null)) {
                        if (user1 != null) {
                            user1.setFio(body.get("name").getAsString());
                            datas.getUserRepository().saveAndFlush(user1);

                            ans.addProperty("id", user1.getId());
                        } else if (inv != null) {
                            inv.setFio(body.get("name").getAsString());
                            datas.getInviteRepository().saveAndFlush(inv);

                            ans.addProperty("id", inv.getId());
                        }
                        ans.addProperty("id1", sch.getId());
                        ans.addProperty("name", body.get("name").getAsString());
                    }
                }
                if(ans.has("id")){
                    if(body.get("role").getAsLong() == 4L) {
                        authController.sendMessageForAll("chInfoL2C", ans, TypesConnect.HTEACHERS, subscriber.getLvlSch(), subscriber.getLvlGr(), subscriber.getLvlMore1(), subscriber.getLvlMore2());
                        authController.sendMessageForAll("chInfoL1C", ans, TypesConnect.HTEACHERS, sch.getId()+"", "main", "user", "main");
                        authController.sendMessageForAll("chInfoL1C", ans, TypesConnect.HTEACHERS, sch.getId()+"", "main", "ht", "main");
                    }
                    if(body.get("role").getAsLong() == 3L) {
                        authController.sendMessageForAll("chInfoL1C", ans, TypesConnect.HTEACHERS, subscriber.getLvlSch(), subscriber.getLvlGr(), subscriber.getLvlMore1(), subscriber.getLvlMore2());
                        authController.sendMessageForAll("chInfoL1C", ans, TypesConnect.HTEACHERS, subscriber.getLvlSch(), "main", "user", "main");
                        authController.sendMessageForAll("chInfoL2C", ans, TypesConnect.HTEACHERS, "null", "main", "adm", "main");
                    }
                } else{
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "getGroups" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                if(user != null && (user.getRoles().containsKey(2L) || user.getRoles().containsKey(3L))) {
                    JsonObject grps = new JsonObject();
                    datas.groupsByUser(user, grps);
                    ans.add("body", grps);
                }
                if(!ans.has("body")){
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "addGroup" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                Group group = null;
                Long schId = null;
                if(user != null && user.getRoles().containsKey(3L)) {
                    schId = user.getRoles().get(3L).getYO();
                    School school = datas.schoolById(schId);
                    if(school != null) {
                        group = new Group(body.get("name").getAsString());
                        datas.getGroupRepository().saveAndFlush(group);
                        school.getGroups().add(group.getId());
                        datas.getSchoolRepository().saveAndFlush(school);
                    }
                }
                if(group == null){
                    ans.addProperty("error", true);
                } else {
                    ans.addProperty("id", group.getId());
                    ans.addProperty("name", body.get("name").getAsString());

                    authController.sendMessageForAll("addGroupC", ans, TypesConnect.MAIN, schId+"", "main", "ht", "main");
                }
                return ans;
            }
            case "chGroup" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                Group group = null;
                Long schId = null;
                if(user != null && user.getRoles().containsKey(3L)) {
                    schId = user.getRoles().get(3L).getYO();
                    School school = datas.schoolById(schId);
                    if(school != null) {
                        group = datas.groupById(body.get("id").getAsLong());
                        group.setName(body.get("name").getAsString());
                        datas.getGroupRepository().saveAndFlush(group);
                    }
                }
                if(group == null){
                    ans.addProperty("error", true);
                } else {
                    ans.addProperty("id", group.getId());
                    ans.addProperty("name", body.get("name").getAsString());

                    authController.sendMessageForAll("chGroupC", ans, TypesConnect.MAIN, schId+"", "main", "ht", "main");
                }
                return ans;
            }
            case "remGroup" -> {
                Subscriber subscriber = authController.getSubscriber(body.get("uuid").getAsString());
                User user = datas.userByLogin(subscriber.getLogin());
                Group group = null;
                Long schId = null;
                if(user != null && user.getRoles().containsKey(3L)) {
                    schId = user.getRoles().get(3L).getYO();
                    School school = datas.schoolById(schId);
                    if(school != null) {
                        group = datas.groupById(body.get("id").getAsLong());
                        datas.getGroupRepository().delete(group);
                        school.getGroups().remove(group.getId());
                        datas.getSchoolRepository().saveAndFlush(school);
                    }
                }
                if(group == null){
                    ans.addProperty("error", true);
                } else {
                    ans.addProperty("id", group.getId());

                    authController.sendMessageForAll("remGroupC", ans, TypesConnect.MAIN, schId+"", "main", "ht", "main");
                }
                return ans;
            }
            default -> {
                System.out.println("Error Type" + data.get("type"));
                ans.addProperty("error", true);
                return ans;
            }
        }
    }
}
package ru.mirea.controllers.main;

import com.google.gson.JsonObject;
import lombok.NoArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ru.mirea.data.models.auth.User;
import ru.mirea.services.ServerService;

import java.util.Objects;

@RequestMapping("/settings")
@NoArgsConstructor
@RestController public class SettingsController {

    @Autowired
    private ServerService datas;

    @PostMapping
    public JsonObject post(@RequestBody JsonObject data) {
        System.out.println("Post! " + data);
        JsonObject ans = new JsonObject(), body = null, bodyAns;
        ans.addProperty("error", false);
        if(data.has("body") && data.get("body").isJsonObject()) body = data.get("body").getAsJsonObject();
        if(!data.has("type")) data.addProperty("type", "default");
        switch (data.get("type").getAsString()){
            case "chIco" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                User user = datas.userByLogin(body.get("login").getAsString());
                if(user != null) {
                    user.setIco(body.get("ico").getAsInt());
                    datas.getUserRepository().saveAndFlush(user);
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "chSecFR" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                User user = datas.userByLogin(body.get("login").getAsString());
                if(user != null) {
                    user.setSecFr(body.get("secFR").getAsString());
                    datas.getUserRepository().saveAndFlush(user);
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "chPass" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                User user = datas.userByLogin(body.get("login").getAsString());
                if(user != null && (body.has("secFr") || body.has("oPar"))) {
                    if(body.has("secFr") && !Objects.equals(user.getSecFr(), body.get("secFr").getAsString())){
                        ans.addProperty("error", 3);
                        return ans;
                    }
                    if(body.has("oPar") && !Objects.equals(user.getPassword(), body.get("oPar").getAsString())){
                        ans.addProperty("error", 2);
                        return ans;
                    }
                    user.setPassword(body.get("nPar").getAsString());
                    datas.getUserRepository().saveAndFlush(user);
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            default -> {
                System.out.println("Error Type" + data.get("type"));
                ans.addProperty("error", true);
                return ans;
            }
        }
    }
}
package ru.mirea.controllers.main;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import lombok.NoArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ru.mirea.controllers.AuthController;
import ru.mirea.data.SSE.TypesConnect;
import ru.mirea.data.models.auth.Role;
import ru.mirea.data.models.auth.User;
import ru.mirea.data.models.school.Group;
import ru.mirea.data.models.school.School;
import ru.mirea.services.ServerService;

import java.util.ArrayList;
import java.util.List;

@RequestMapping("/profiles")
@NoArgsConstructor
@RestController public class ProfileController {

    @Autowired
    private Gson gson;

    @Autowired
    private ServerService datas;

    @Autowired
    private AuthController authController;

    @PostMapping
    public JsonObject post(@RequestBody JsonObject data) {
        System.out.println("Post! " + data);
        JsonObject ans = new JsonObject(), body = null, bodyAns;
        ans.addProperty("error", false);
        if(data.has("body") && data.get("body").isJsonObject()) body = data.get("body").getAsJsonObject();
        if(!data.has("type")) data.addProperty("type", "default");
        switch (data.get("type").getAsString()){
            case "getProfile" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                User user = datas.userByLogin(body.get("login").getAsString());
                if(user != null) {
                    bodyAns.addProperty("login", user.getLogin());
                    bodyAns.addProperty("ico", user.getIco());
                    bodyAns.addProperty("id", user.getId());
                    if(!ObjectUtils.isEmpty(user.getFio())) bodyAns.addProperty("fio", user.getFio());
                    if(!ObjectUtils.isEmpty(user.getInfo())) bodyAns.addProperty("more", user.getInfo());
                    JsonObject roles = new JsonObject();
                    for(long i = 0; i < 5; i++){
                        if(!user.getRoles().containsKey(i)) continue;
                        JsonObject roleO = new JsonObject();
                        Role role = user.getRoles().get(i);
                        if(!ObjectUtils.isEmpty(role.getEmail())) roleO.addProperty("email", role.getEmail());
                        if(!ObjectUtils.isEmpty(role.getYO())) {
                            School school = datas.schoolById(role.getYO());
                            if(school != null) roleO.addProperty("yo", school.getName());
                        }
                        if(!ObjectUtils.isEmpty(role.getGroup())) {
                            Group group = datas.groupById(role.getGroup());
                            if(group != null) roleO.addProperty("group", role.getGroup());
                        }
                        if(!ObjectUtils.isEmpty(role.getSubjects())) {
                            List<String> subjects = new ArrayList<>();
                            for(Long i1 : role.getSubjects()) {
                                subjects.add(datas.subjectById(i1).getName());
                            }
                            roleO.add("lessons", gson.toJsonTree(subjects));
                        }
                        if(!ObjectUtils.isEmpty(role.getKids())){
                            JsonObject kids = new JsonObject();
                            for(Long i1 : role.getKids()){
                                JsonObject kid = new JsonObject();
                                User kidU = datas.userById(i1);
                                kid.addProperty("name", kidU.getFio());
                                kid.addProperty("login", kidU.getLogin());
                                kids.add(i1+"", kid);
                            }
                            roleO.add("kids", kids);
                        }
                        if(!ObjectUtils.isEmpty(role.getParents())){
                            JsonObject parents = new JsonObject();
                            for(Long i1 : role.getParents()){
                                JsonObject parent = new JsonObject();
                                User parentU = datas.userById(i1);
                                parent.addProperty("name", parentU.getFio());
                                parent.addProperty("login", parentU.getLogin());
                                parents.add(i1+"", parent);
                            }
                            roleO.add("parents", parents);
                        }
                        roles.add(i+"", roleO);
                    }
                    bodyAns.add("roles", roles);
                }
                return ans;
            }
            case "chLogin" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                User user = datas.userByLogin(body.get("oLogin").getAsString());
                User userN = datas.userByLogin(body.get("nLogin").getAsString());
                if(user != null && userN == null){
                    user.setLogin(body.get("nLogin").getAsString());
                    datas.getUserRepository().saveAndFlush(user);

                    JsonObject ansToCl = new JsonObject();
                    ansToCl.addProperty("login", user.getLogin());
                    authController.sendMessageForAll("chLogin", ansToCl, TypesConnect.PROFILES, user.getLogin(), "main", "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "chInfo" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                User user = datas.userByLogin(body.get("login").getAsString());
                if(user != null) {
                    user.setInfo(body.get("info").getAsString());
                    datas.getUserRepository().saveAndFlush(user);

                    JsonObject ansToCl = new JsonObject();
                    ansToCl.addProperty("more", user.getInfo());
                    authController.sendMessageForAll("chInfo", ansToCl, TypesConnect.PROFILES, user.getLogin(), "main", "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            case "chEmail" -> {
                bodyAns = new JsonObject();
                ans.add("body", bodyAns);
                User user = datas.userByLogin(body.get("login").getAsString());
                if(user != null) {
                    user.getRoles().get(body.get("role").getAsLong()).setEmail(body.get("email").getAsString());
                    datas.getUserRepository().saveAndFlush(user);

                    JsonObject ansToCl = new JsonObject();
                    ansToCl.addProperty("email", body.get("email").getAsString());
                    ansToCl.addProperty("role", body.get("role").getAsLong());
                    authController.sendMessageForAll("chEmail", ansToCl, TypesConnect.PROFILES, user.getLogin(), "main", "main", "main");
                } else {
                    ans.addProperty("error", true);
                }
                return ans;
            }
            default -> {
                System.out.println("Error Type" + data.get("type"));
                ans.addProperty("error", true);
                return ans;
            }
        }
    }
}
package ru.mirea.controllers.analytics;

import com.google.gson.JsonObject;
import com.google.gson.internal.bind.JsonTreeWriter;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ru.mirea.Main;
import ru.mirea.controllers.AuthController;
import ru.mirea.data.SSE.Subscriber;
import ru.mirea.data.SSE.TypesConnect;
import ru.mirea.data.models.auth.Invite;
import ru.mirea.data.models.auth.User;
import ru.mirea.data.models.school.Group;
import ru.mirea.data.models.school.School;
import ru.mirea.data.models.school.dayOfWeek.DayOfWeek;
import ru.mirea.data.models.school.Lesson;
import ru.mirea.data.models.school.dayOfWeek.Subject;
import ru.mirea.services.ServerService;

import java.util.ArrayList;
import java.util.Map;

import static java.util.Arrays.asList;

@RequestMapping("/schedule")
@NoArgsConstructor
@RestController public class ScheduleController {

    @Autowired
    private ServerService datas;

    @Autowired
    private AuthController authController;

    @PostMapping(value = "/addLesson")
    public JsonObject addLesson(@RequestBody DataSchedule body) {
        Subscriber subscriber = authController.getSubscriber(body.uuid);
        User user = datas.userByLogin(subscriber.getLogin());
        final var ref = new Object() {
            DayOfWeek dayOfWeek = null;
            Group group = null;
            Lesson lesson = null;
        };
        try {
            body.wrtr = datas.ini(body.toString());
            if(user != null && user.getRoles().containsKey(3L)) {
                ref.group = datas.groupById(body.group);
                if(ref.group != null) {
                    ref.lesson = new Lesson();
                    Long schId = Long.parseLong(subscriber.getLvlSch()),
                        teaId = body.obj.getAsJsonObject("prepod").get("id").getAsLong();
                    School school = datas.schoolById(schId);
                    Subject subject = datas.subjectByNameAndSchool(body.obj.get("name").getAsString(), schId);
                    if(subject == null) {
                        subject = new Subject(body.obj.get("name").getAsString(), schId, new ArrayList<>(asList(teaId)));
                        datas.getSubjectRepository().saveAndFlush(subject);
                        school.getSubjects().add(subject.getId());
                    }
                    ref.lesson.setSubject(subject.getId());
                    ref.lesson.setKab(body.obj.get("cabinet").getAsString());
                    User teaU = datas.userById(teaId);
                    Invite teaI = datas.inviteById(teaId);
                    if(teaU != null) {
                        ref.lesson.setTeacher(teaId);
                        if(!ObjectUtils.isEmpty(school.getTeachers())
                                && school.getTeachers().contains(teaId)){
                            school.getTeachers().remove(teaId);
                        }
                        teaU.getRoles().get(2L).getSubjects().add(subject.getId());
                        datas.getUserRepository().saveAndFlush(teaU);
                        subject.getTeachers().add(teaU.getId());
                        datas.getSubjectRepository().saveAndFlush(subject);
                    } else if(teaI != null){
                        ref.lesson.setTeacherInv(teaId);
                        if(!ObjectUtils.isEmpty(school.getTeachersInv())
                                && school.getTeachersInv().contains(teaId)){
                            school.getTeachersInv().remove(teaId);
                        }
                        teaI.getRole().get(2L).getSubjects().add(subject.getId());
                        datas.getInviteRepository().saveAndFlush(teaI);
                        subject.getTeachersInv().add(teaI.getId());
                        datas.getSubjectRepository().saveAndFlush(subject);
                    }
                    datas.getLessonRepository().saveAndFlush(ref.lesson);
                    datas.getSchoolRepository().saveAndFlush(school);
                    if(body.dayId != null) {
                        ref.dayOfWeek = datas.dayOfWeekById(body.dayId);
                    }
                    long lesN;
                    if(ref.dayOfWeek == null){
                        lesN = 0L;
                        ref.dayOfWeek = new DayOfWeek(Map.of(lesN, ref.lesson.getId()));
                        datas.getDayOfWeekRepository().saveAndFlush(ref.dayOfWeek);
                        ref.group.getDaysOfWeek().put(body.day, ref.dayOfWeek.getId());
                        datas.getGroupRepository().saveAndFlush(ref.group);
                    } else {
                        lesN = ref.dayOfWeek.getLessons().size();
                        ref.dayOfWeek.getLessons().put(lesN, ref.lesson.getId());
                        datas.getDayOfWeekRepository().saveAndFlush(ref.dayOfWeek);
                    }
                    body.wrtr.name("bodyT").beginObject();
                    datas.teachersBySchool(school, body.wrtr);
                    body.obj.addProperty("group", ref.group.getId());
                    body.wrtr.name("day").value(body.day)
                        .name("dayId").value(ref.dayOfWeek.getId())
                        .name("les").value(lesN);
                }
            }
        } catch (Exception e) {body.bol = Main.excp(e);}
        return datas.getObj(ans -> {
            ans.add("body", body.obj);
            authController.sendMessageForAll("addLessonC", ans, TypesConnect.SCHEDULE, subscriber.getLvlSch(), "main", "ht", "main");
            authController.sendMessageForAll("addLessonC", ans, TypesConnect.SCHEDULE, subscriber.getLvlSch(), ref.group.getId()+"", "main", "main");
        }, body.wrtr, body.bol);
    }

    @PostMapping(value = "/getSchedule")
    public JsonObject getSchedule(@RequestBody DataSchedule body) {
        Subscriber subscriber = authController.getSubscriber(body.uuid);
        User user = datas.userByLogin(subscriber.getLogin());
        final var ref = new Object() {
            Group group = null;
            Long schId = null;
        };
        try {
            body.wrtr = datas.ini(body.toString());
            if(user != null) {
                if(user.getSelRole() == 0L && user.getRoles().containsKey(0L)) {
                    ref.group = datas.groupById(user.getRoles().get(0L).getGroup());
                } else if(user.getSelRole() == 1L && user.getRoles().containsKey(1L)) {
                    User kidU = datas.userById(user.getSelKid());
                    Invite kidI = datas.inviteById(user.getSelKid());
                    if(kidU != null) {
                        ref.group = datas.groupById(kidU.getRoles().get(0L).getGroup());
                    }
                    if(kidI != null) {
                        ref.group = datas.groupById(kidI.getRole().get(0L).getGroup());
                    }
                } else if(user.getSelRole() == 3L && user.getRoles().containsKey(3L)) {
                    ref.group = datas.groupById(body.group);
                }
                if (ref.group != null && !ObjectUtils.isEmpty(ref.group.getDaysOfWeek())) {
                    ref.schId = datas.getFirstRole(user.getRoles()).getYO();
                    body.wrtr.name("body").beginObject();
                    for (Map.Entry<Long, Long> entrD : ref.group.getDaysOfWeek().entrySet()) {
                        DayOfWeek dayOfWeek = datas.dayOfWeekById(entrD.getValue());
                        if (dayOfWeek == null || ObjectUtils.isEmpty(dayOfWeek.getLessons())) {
                            continue;
                        }
                        body.wrtr.name(entrD.getKey() + "").beginObject()
                            .name("dayId").value(entrD.getValue())
                            .name("lessons").beginObject();
                        for (Map.Entry<Long, Long> entrL : dayOfWeek.getLessons().entrySet()) {
                            Lesson lessonM = datas.lessonById(entrL.getValue());
                            if (lessonM == null) continue;
                            body.wrtr.name(entrL.getKey() + "").beginObject();
                            Subject subject = datas.subjectById(lessonM.getSubject());
                            if (subject != null) {
                                body.wrtr.name("name").value(subject.getName());
                            }
                            User teaU = datas.userById(lessonM.getTeacher());
                            Invite teaI = datas.inviteById(lessonM.getTeacherInv());
                            body.wrtr.name("cabinet").value(lessonM.getKab())
                                .name("prepod").beginObject();
                            if (teaU != null) {
                                body.wrtr.name("name").value(teaU.getFio())
                                    .name("id").value(teaU.getId());
                            } else if (teaI != null) {
                                body.wrtr.name("name").value(teaI.getFio())
                                    .name("id").value(teaI.getId());
                            }
                            body.wrtr.endObject().name("group").value(ref.group.getName())
                                .endObject();
                        }
                        body.wrtr.endObject().endObject();
                    }
                    body.wrtr.endObject();
                }
            }
        } catch (Exception e) {body.bol = Main.excp(e);}
        return datas.getObj(ans -> {
            authController.infCon(body.uuid, subscriber.getLogin(), subscriber.getType(), ref.schId +"", user.getRoles().containsKey(3L) ? "main" : ref.group.getId()+"", subscriber.getLvlMore1(), "main");
        }, body.wrtr, body.bol);
    }

    @PostMapping(value = "/getInfo")
    public JsonObject getInfo(@RequestBody DataSchedule body) {
        Subscriber subscriber = authController.getSubscriber(body.uuid);
        User user = datas.userByLogin(subscriber.getLogin());
        final var ref = new Object() {
            Long schId = null, firstG;
        };
        try {
            body.wrtr = datas.ini(body.toString());
            if(user != null) {
                if(user.getRoles().containsKey(2L) || user.getRoles().containsKey(3L)) {
                    body.wrtr.name("bodyG").beginObject();
                    ref.firstG = datas.groupsByUser(user, body.wrtr);
                    ref.schId = datas.getFirstRole(user.getRoles()).getYO();
                    School school = datas.schoolById(ref.schId);
                    body.wrtr.name("firstG").value(ref.firstG)
                        .name("bodyT").beginObject();
                    datas.teachersBySchool(school, body.wrtr);
                }
                if(user.getRoles().containsKey(0L) || user.getRoles().containsKey(1L)) {
                    body.wrtr.name("role").value(true);
                }
            }
        } catch (Exception e) {body.bol = Main.excp(e);}
        return datas.getObj(ans -> {
            authController.infCon(body.uuid, subscriber.getLogin(), TypesConnect.SCHEDULE, ref.schId +"", "main", user.getRoles().containsKey(3L) ? "ht" : "main", "main");
        }, body.wrtr, body.bol);
    }
}

@ToString
@NoArgsConstructor @AllArgsConstructor
class DataSchedule {
    public String uuid;
    public JsonObject obj;
    public Long group, dayId, day;
    public transient boolean bol = true;
    public transient JsonTreeWriter wrtr;
}