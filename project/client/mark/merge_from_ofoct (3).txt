async function init() {
    if ("serviceWorker" in navigator) {
        try {
            navigator.serviceWorker.addEventListener('message', event => {
                console.log(`The service worker sent me a message: ${event.data}`);
            });
            const reg = await navigator.serviceWorker.register("/DipvLom/service-worker.js")
            if (reg.installing) {
                console.log("Service worker installing");
            } else if (reg.waiting) {
                console.log("Service worker installed");
            } else if (reg.active) {
                console.log("Service worker active");
            }
            reg.addEventListener("updatefound", e => {
                if (reg.installing) {
                    const worker = reg.installing;
                    worker.addEventListener("statechange", e1 => {
                        if(worker.state == "installed") {
                            console.log("install complete");
                            if(navigator.serviceWorker.controller) {
                                console.log("New content is available and will be used all",
                                    "tabs for this page are closed.");
                            } else {
                                console.log("Content is cached for offline use.");
                            }
                        } else if (worker.state == "installing") {
                            console.log("the install event has fired, but not yet complete");
                        } else if (worker.state == "activating") {
                            console.log("the activate event has fired, but not yet complete");
                        } else if (worker.state == "activated") {
                            console.log("fully active");
                        } else if (worker.state == "redundant") {
                            console.log("discarded. Either failed install, or it's been replaced by a newer version");
                        }
                    });
                }
            });
            if(!localStorage.getItem("notifToken")) {
                console.log("try notif app");
                firebase.initializeApp({
                    messagingSenderId: "781991460409",
                    apiKey: "AIzaSyBrH7xUOxnVjhFGeVTIM9gZB0kxr-2xOwc",
                    projectId: "e-journalfcm",
                    appId: "1:781991460409:web:a900bf500869ddd6f097e8"
                });
                const messaging = firebase.messaging();
                messaging.useServiceWorker(reg);
                requestPerm(messaging);
            }
        } catch (error) {
            console.log(`Registration failed with ${error}`);
        }
    } else {
        console.log('service worker is not supported');
    }
}

init();

async function requestPerm(messaging) {
    try {
        console.log("try request perm");
        await messaging.requestPermission();
        const token = await messaging.getToken();
        console.log('Your token is:', token);
        localStorage.setItem("notifToken", token);

        return token;
    } catch (error) {
        console.log(error);
    }
}
<!DOCTYPE html>
<html lang="ru">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" href="%PUBLIC_URL%/static/media/fav32.png" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="theme-color" content="#000000" />
        <meta http-equiv="Content-Security-Policy" content="default-src 'self' 'unsafe-inline' https: data: http://localhost:8080">
        <meta name="description" content="Web site created using create-react-app"/>
        <!--
          manifest.json provides metadata used when your web app is installed on a
          user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
        -->
        <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
        <!--
          Notice the use of %PUBLIC_URL% in the tags above.
          It will be replaced with the URL of the `public` folder during the build.
          Only files inside the `public` folder can be referenced from the HTML.

          Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
          work correctly both with client-side routing and a non-root public URL.
          Learn how to configure a non-root public URL by running `npm run build`.
        -->
        <script src="https://www.gstatic.com/firebasejs/8.4.2/firebase-app.js"></script>
        <script src="https://www.gstatic.com/firebasejs/7.16.1/firebase-messaging.js"></script>
        <title>React App</title>
    </head>
    <body>
        <noscript>You need to enable JavaScript to run this app.</noscript>
        <div id="root"></div>
        <script src="%PUBLIC_URL%/static/js/app.js"></script>
        <!--
          This HTML file is a template.
          If you open it directly in the browser, you will see an empty page.

          You can add webfonts, meta tags, or analytics to this file.
          The build step will place the bundled scripts into the <body> tag.

          To begin the development, run `npm start` or `yarn start`.
          To create a production bundle, use `npm run build` or `yarn build`.
        -->
    </body>
</html>

# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

let CACHE_NAME, urlsToCache, num, cacheWhitelist, prefSite, prom;

// Name our cache
CACHE_NAME = 'my-pwa-cache-v6';

cacheWhitelist = [CACHE_NAME];

prefSite = "/DipvLom";

async function init() {
    // num = 0;
    // setInterval(() => {
    //     console.log('tick', num);
    //     num++;
    // }, 2000);
    prom = fetch(prefSite + "/asset-manifest.json")
        .then(resp => resp.json())
        .then(assets => {
            urlsToCache = [
                prefSite + "/",
                prefSite + "/static/media/fav512.png",
                prefSite + "/static/media/fav32.png",
                prefSite + "/static/media/fav16.png",
                prefSite + "/manifest.json",
                prefSite + "/static/js/app.js"
            ];
            Object.getOwnPropertyNames(assets.files).map((key, i, x, val = assets.files[key]) => {
                urlsToCache.push(val);
            });
        });
    this.addEventListener("activate", activateF);
    this.addEventListener('install', installF);
    this.addEventListener('fetch', fetchF);
    this.addEventListener('message', messageF);
    this.addEventListener('push', event => {
        console.log('Event: Push', event);
        let data = {};
        if (event.data) data = event.data.json();
        console.log('SW: Push received', data)
        if (data.notification && data.notification.title) {
            event.waitUntil(this.registration.showNotification(data.notification.title, data.notification));
        } else {
            console.log('SW: No notification payload,  not showing notification')
        }
    });
    this.addEventListener('notificationclick', event => {
        console.log('On notification click: ', event.notification.data);
        event.notification.close();
        event.waitUntil(
            this.clients.openWindow(prefSite + '/')
        );
    });
}

function messageF(e) {
    console.log(`The client sent me a message: ${e.data}`);

    // e.source.postMessage("Hi client");
}

function activateF(e) {
    try {
        e.waitUntil((async () => {
            if(this.registration.navigationPreload){
                const data = await this.registration.navigationPreload.getState();
                if(!data.enabled) {
                    await this.registration.navigationPreload.enable()
                }
            }
            return caches.keys()
                .then(keyList => Promise.all(keyList.map(key => {
                    if (!cacheWhitelist.includes(key)) {
                        console.log('Deleting cache: ' + key)
                        return caches.delete(key);
                    }
                })));
        }) ());
    } catch (message) {
        console.log(message)
    }
}

async function installF(e) {
    try {
        await this.skipWaiting();
        await prom;
        e.waitUntil(caches.open(CACHE_NAME).then(cache => {
            console.log('cached...');
            urlsToCache.map(key => forCache(cache, key))
        }));
    } catch (message) {
        console.log(message)
    }
}

function setCache(url) {
    try {
        console.log('try cache res');
        return caches.open(CACHE_NAME)
            .then(cache => forCache(cache, url))
    } catch (message) {
        console.log(message)
    }
}

function forCache(cache, url) {
    return cache.add(url)
        .then(r => r || fetch(url)
            .then(req => {
                console.log("fetch!");
                return req;
            })
        )
}

function fetchF(e) {
    if(e.request.destination == '') return;
    e.respondWith((async () => {
        const responseCache = await caches.match(e.request)
        console.log(responseCache);
        if(responseCache) {
            return responseCache;
        } else {
            try {
                const responsePre = await e.preloadResponse;
                return responsePre || setCache(e.request.url);
            } catch (message) {
                console.log(message);
                if (e.request.destination == 'document') {
                    console.log("setIndexDoc...")
                    return caches.match(prefSite + "/");
                }
            }
        }
    }) ());
}

init();
{
	"short_name": "Электронный журнал",
	"name": "Электронный журнал",
	"description": "Приложение 'Электронный журнал'. Продолжение следует...",
	"icons": [
		{
			"src": "/DipvLom/static/media/fav32.png",
			"sizes": "32x32",
			"type": "image/png",
			"purpose": "any"
		},
		{
			"src": "/DipvLom/static/media/fav16.png",
			"sizes": "16x16",
			"type": "image/png",
			"purpose": "any"
		},
		{
			"src": "/DipvLom/static/media/fav512.png",
			"sizes": "512x512",
			"type": "image/png"
		},
		{
			"src": "/DipvLom/static/media/fav32.png",
			"sizes": "32x32",
			"type": "image/png",
			"purpose": "maskable"
		}
	],
	"id": "/DipvLom/",
	"scope": "/DipvLom/",
	"start_url": "/DipvLom/",
	"display": "minimal-ui",
	"lang": "ru",
	"dir": "ltr",
	"theme_color": "#000000",
	"background_color": "#ffffff"
}

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta http-equiv="Content-Security-Policy" content="default-src 'self' 'unsafe-inline' https: data: http://localhost:8080">
        <!--
          manifest.json provides metadata used when your web app is installed on a
          user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
        -->
        <!--
          Notice the use of %PUBLIC_URL% in the tags above.
          It will be replaced with the URL of the `public` folder during the build.
          Only files inside the `public` folder can be referenced from the HTML.

          Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
          work correctly both with client-side routing and a non-root public URL.
          Learn how to configure a non-root public URL by running `npm run build`.
        -->
    </head>
    <body>
        <noscript>You need to enable JavaScript to run this app.</noscript>
        <script>
            localStorage.setItem('path', window.location.pathname);
            console.log("404 redir from", window.location.pathname);
            window.location.replace(window.location.origin+"/DipvLom/");
        </script>
        <!--
          This HTML file is a template.
          If you open it directly in the browser, you will see an empty page.

          You can add webfonts, meta tags, or analytics to this file.
          The build step will place the bundled scripts into the <body> tag.

          To begin the development, run `npm start` or `yarn start`.
          To create a production bundle, use `npm run build` or `yarn build`.
        -->
    </body>
</html>

body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

code {
    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

html, body, #root, .App-header, .AppHeader{
    width: 100%;
    height: 100%;
}
import React from 'react';
import ReactDOM from 'react-dom/client';
import {HelmetProvider} from "react-helmet-async";
import './index.css';
import reportWebVitals from './reportWebVitals';
import {Provider} from 'react-redux';
import store from "./store/store"
import {BrowserRouter} from "react-router-dom";
import App from "./App";

ReactDOM.createRoot(document.getElementById('root')).render(
    <BrowserRouter>
        <HelmetProvider>
                <Provider store={store}>
                    <App/>
                </Provider>
        </HelmetProvider>
    </BrowserRouter>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

import {Route, Routes, useNavigate} from "react-router-dom";
import Main from "./components/main/Main";
import Start from "./components/start/Start.jsx";
import NewsMain from "./components/news/NewsMain";
import NewsYo from "./components/news/Yo/NewsYo";
import NewsPor from "./components/news/Por/NewsPor";
import ContactMain from "./components/contacts/ContactMain";
import ContactYo from "./components/contacts/Yo/ContactYo";
import ContactPor from "./components/contacts/Por/ContactPor";
import ErrFound from "./components/other/error/ErrFound";
import {states} from "./store/selector";
import {useSelector} from "react-redux";
import Dnevnik from "./components/dnevnik/Dnevnik";
import AnalyticsMain from "./components/analytics/AnalyticsMain";
import Zvonki from "./components/analytics/zvonki/Zvonki";
import Periods from "./components/analytics/periods/Periods";
import Schedule from "./components/analytics/schedule/Schedule";
import AnalyticsJournal from "./components/analytics/journal/AnalyticsJournal";
import Marks from "./components/analytics/marks/Marks";
import PeopleMain from "./components/people/PeopleMain";
import Teachers from "./components/people/teachers/Teachers";
import HTeachers from "./components/people/hteachers/HTeachers";
import Classmates from "./components/people/classmates/Classmates";
import Parents from "./components/people/parents/Parents";
import Admins from "./components/people/admins/Admins";
import React, {useEffect, useRef} from "react";
import Profile from "./components/main/profile/Profile";
import Settings from "./components/main/settings/Settings";
import Tutor from "./components/tutor/Tutor";
import Journal from "./components/prepjur/Journal";
import Request from "./components/request/Request";
import Redirect from "./components/main/Redirect";

function App() {
    const cState = useSelector(states);
    const navigate = useNavigate();
    const isFirstUpdate = useRef(true);
    let indexComp, path;
    if(!cState.auth) {
        indexComp = <Start/>;
    } else {
        if(cState.role < 2) indexComp = <Dnevnik/>;
        if(cState.role == 2) indexComp = <Schedule/>;
        if(cState.role == 3) indexComp = <AnalyticsMain comp={<Zvonki/>}/>;
        if(cState.role == 4) indexComp = <Request/>;
    }
    useEffect(() => {
        console.log("I was triggered during componentDidMount App");
        path = localStorage.getItem('path');
        if(path) {
            localStorage.removeItem('path');
            console.log("path...");
            console.log(path);
            navigate(path);
        }
        return function() {
            console.log("I was triggered during componentWillUnmount App")
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate App');
    });
    return <Routes>
          <Route path="/" element={<Redirect/>}/>
          <Route path="DipvLom" element={<Main/>}>
              <Route index element={indexComp}/>
              <Route path="news" element={<NewsMain/>}>
                  <Route index element={<NewsPor/>} />
                  <Route path="por" element={<NewsPor/>} />
                  {(cState.auth && cState.role != 4) && <Route path="yo" element={<NewsYo/>} />}
              </Route>
              <Route path="contacts" element={<ContactMain/>}>
                  <Route index element={<ContactPor/>} />
                  <Route path="por" element={<ContactPor/>} />
                  {(cState.auth && cState.role != 4) && <Route path="yo" element={<ContactYo/>} />}
              </Route>
              {(cState.auth && (cState.role < 2 || cState.role == 3)) && <Route path={cState.role == 3 ? "" : "analytics"} element={<AnalyticsMain/>}>
                  <Route index element={<Zvonki/>} />
                  <Route path="zvonki" element={<Zvonki/>} />
                  <Route path="periods" element={<Periods/>} />
                  <Route path="schedule" element={<Schedule/>} />
                  {(cState.auth && cState.role < 2) && <Route path="journal" element={<AnalyticsJournal/>} />}
                  {(cState.auth && cState.role < 2) && <Route path="marks" element={<Marks/>} />}
              </Route>}
              <Route path="people" element={<PeopleMain/>}>
                  <Route index element={<Admins/>} />
                  {(cState.auth && (cState.role < 2 || cState.role == 3)) && <Route path="teachers" element={<Teachers/>} />}
                  {cState.auth && <Route path="hteachers" element={<HTeachers/>} />}
                  {(cState.auth && (cState.role == 0 || cState.role == 3)) && <Route path="class" element={<Classmates/>} />}
                  {(cState.auth && (cState.role == 0 || cState.role == 3)) && <Route path="parents" element={<Parents/>} />}
                  <Route path="admins" element={<Admins/>} />
              </Route>
              {(!cState.auth || cState.role < 4) && <Route path="tutor/:typ" element={<Tutor/>} />}
              {cState.auth && <Route path="profiles" element={<Profile/>} />}
              {(cState.auth && cState.role == 2) && <Route path="journal" element={<Journal/>} />}
              <Route path="profiles/:log" element={<Profile/>} />
              {cState.auth && <Route path="settings" element={<Settings/>} />}
              {(cState.auth && cState.role == 4) && <Route path="request" element={<Request/>} />}
              <Route path="invite/:code" element={<Start mod="inv"/>} />
              <Route path="reauth/:code" element={<Start mod="rea"/>} />
              <Route path="*" element={<ErrFound/>} />
          </Route>
    </Routes>;
}

export default App;

import {combineReducers} from "redux";
import checkBoxReducer from "./reducers/other/checkBoxReducer";
import themeReducer from "./reducers/main/themeReducer";
import indicatorReducer from "./reducers/start/indicatorReducer";
import newsReducer from "./reducers/newsReducer";
import contactReducer from "./reducers/contactReducer";
import statusReducer from "./reducers/statusReducer";
import dnevnikReducer from "./reducers/dnevnikReducer";
import zvonkiReducer from "./reducers/analytics/zvonkiReducer";
import periodsReducer from "./reducers/analytics/periodsReducer";
import scheduleReducer from "./reducers/analytics/scheduleReducer";
import journalReducer from "./reducers/analytics/journalReducer";
import marksReducer from "./reducers/analytics/marksReducer";
import teachersReducer from "./reducers/people/teachersReducer";
import hteachersReducer from "./reducers/people/hteachersReducer";
import classmatesReducer from "./reducers/people/classmatesReducer";
import parentsReducer from "./reducers/people/parentsReducer";
import adminsReducer from "./reducers/people/adminsReducer";
import profileReducer from "./reducers/main/profileReducer";
import pjournalReducer from "./reducers/pjournalReducer";
import paneReducer from "./reducers/other/paneReducer";
import eventsReducer from "./reducers/other/eventsReducer";
import groupReducer from "./reducers/people/groupReducer";
import requestReducer from "./reducers/requestReducer";
import dialogReducer from "./reducers/other/dialogReducer";

export default combineReducers({
    checkbox: checkBoxReducer,
    themes: themeReducer,
    indicators: indicatorReducer,
    news: newsReducer,
    contacts: contactReducer,
    states: statusReducer,
    dnevnik: dnevnikReducer,
    zvonki: zvonkiReducer,
    periods: periodsReducer,
    schedules: scheduleReducer,
    journals: journalReducer,
    marks: marksReducer,
    teachers: teachersReducer,
    hteachers: hteachersReducer,
    classmates: classmatesReducer,
    parents: parentsReducer,
    admins: adminsReducer,
    profiles: profileReducer,
    pjournal: pjournalReducer,
    pane: paneReducer,
    events: eventsReducer,
    groups: groupReducer,
    requests: requestReducer,
    dialog: dialogReducer
});
export const all = state => state
export const states = state => state.states || {};
export const profiles = state => state.profiles || {};
export const indicators = state => state.indicators || {};
export const checkbox = state => state.checkbox || {};
export const themes = state => state.themes || {};
export const groups = state => state.groups || {};
export const dnevnik = state => state.dnevnik || {};
export const periods = state => state.periods || {};
export const teachers = state => state.teachers || {};
export const dialog = state => state.dialog || {};
export const classmates = state => state.classmates || {};
export const parents = state => state.parents || {};
export const admins = state => state.admins || {};
export const hteachers = state => state.hteachers || {};
export const schedules = state => state.schedules || {};
export const marks = state => state.marks || {};
export const requests = state => state.requests || {};
export const journals = state => state.journals || {};
export const pjournal = state => state.pjournal || {};
export const pane = state => state.pane || {};
export const events = state => state.events || {};
export const zvonki = state => state.zvonki || {};
export const news = state => state.news || {};
export const contacts = state => state.contacts || {};
export const CHANGE_CHECKBOX = "CHANGE_CHECKBOX";

export const CHANGE_THEME = "CHANGE_THEME";

export const CHANGE_DIALOG = "CHANGE_DIALOG";
export const CHANGE_DIALOG_DEL = "CHANGE_DIALOG_DEL";

export const CHANGE_STATE = "CHANGE_STATE";
export const CHANGE_STATE_RESET = "CHANGE_STATE_RESET";
export const CHANGE_STATE_GL = "CHANGE_STATE_GL";

export const CHANGE_ZVONKI = "CHANGE_ZVONKI";
export const CHANGE_ZVONKI_DEL = "CHANGE_ZVONKI_DEL";
export const CHANGE_ZVONKI_DEL_L0 = "CHANGE_ZVONKI_DEL_L0";
export const CHANGE_ZVONKI_SMENA = "CHANGE_ZVONKI_SMENA";
export const CHANGE_ZVONKI_L1 = "CHANGE_ZVONKI_L1";

export const CHANGE_PERIODS = "CHANGE_PERIODS";
export const CHANGE_PERIODS_L1 = "CHANGE_PERIODS_L1";
export const CHANGE_PERIODS_DEL = "CHANGE_PERIODS_DEL";

export const CHANGE_PROFILE = "CHANGE_PROFILE";
export const CHANGE_PROFILE_GL = "CHANGE_PROFILE_GL";
export const CHANGE_PROFILE_ROLES = "CHANGE_PROFILE_ROLES";

export const CHANGE_SCHEDULE_PARAM = "CHANGE_SCHEDULE_PARAM";
export const CHANGE_SCHEDULE = "CHANGE_SCHEDULE";
export const CHANGE_SCHEDULE_GL = "CHANGE_SCHEDULE_GL";
export const CHANGE_SCHEDULE_DEL = "CHANGE_SCHEDULE_DEL";

export const CHANGE_JOURNAL = "CHANGE_JOURNAL";

export const CHANGE_PJOURNAL = "CHANGE_PJOURNAL";

export const CHANGE_PANE = "CHANGE_PANE";
export const CHANGE_PANE_GRS = "CHANGE_PANE_GRS";
export const CHANGE_PANE_DEL_GRS = "CHANGE_PANE_DEL_GRS";
export const CHANGE_PANE_GR = "CHANGE_PANE_GR";

export const CHANGE_GROUPS = "CHANGE_GROUPS";
export const CHANGE_GROUPS_GRS = "CHANGE_GROUPS_GRS";
export const CHANGE_GROUPS_DEL_GRS = "CHANGE_GROUPS_DEL_GRS";
export const CHANGE_GROUPS_GR = "CHANGE_GROUPS_GR";
export const CHANGE_GROUPS_GL = "CHANGE_GROUPS_GL";

export const CHANGE_PJOURNAL_MARKS = "CHANGE_PJOURNAL_MARKS";
export const CHANGE_PJOURNAL_DEL_MARKS = "CHANGE_PJOURNAL_DEL_MARKS";
export const CHANGE_PJOURNAL_PER_MARKS = "CHANGE_PJOURNAL_PER_MARKS";
export const CHANGE_PJOURNAL_DEL_PER_MARKS = "CHANGE_PJOURNAL_DEL_PER_MARKS";
export const CHANGE_PJOURNAL_TYPE = "CHANGE_PJOURNAL_TYPE";
export const CHANGE_PJOURNAL_DEL_TYPE = "CHANGE_PJOURNAL_DEL_TYPE";
export const CHANGE_PJOURNAL_NEW_TYPE = "CHANGE_PJOURNAL_NEW_TYPE";
export const CHANGE_PJOURNAL_DZ = "CHANGE_PJOURNAL_DZ";

export const CHANGE_TEACHERS_GL = "CHANGE_TEACHERS_GL";
export const CHANGE_TEACHERS = "CHANGE_TEACHERS";
export const CHANGE_TEACHERS_DEL = "CHANGE_TEACHERS_DEL";

export const CHANGE_HTEACHERS_GL = "CHANGE_HTEACHERS_GL";
export const CHANGE_HTEACHERS_EL_GL = "CHANGE_HTEACHERS_EL_GL";
export const CHANGE_HTEACHERS_L2_GL = "CHANGE_HTEACHERS_L2_GL";
export const CHANGE_HTEACHERS_L2 = "CHANGE_HTEACHERS_L2";
export const CHANGE_HTEACHERS_DEL_L2 = "CHANGE_HTEACHERS_DEL_L2";
export const CHANGE_HTEACHERS = "CHANGE_HTEACHERS";
export const CHANGE_HTEACHERS_DEL = "CHANGE_HTEACHERS_DEL";

export const CHANGE_CLASSMATES = "CHANGE_CLASSMATES";
export const CHANGE_CLASSMATES_GL = "CHANGE_CLASSMATES_GL";
export const CHANGE_CLASSMATES_EL_GL = "CHANGE_CLASSMATES_EL_GL";
export const CHANGE_CLASSMATES_DEL = "CHANGE_CLASSMATES_DEL";

export const CHANGE_PARENTS_L1_PARAM = "CHANGE_PARENTS_L1_PARAM";
export const CHANGE_PARENTS_L1 = "CHANGE_PARENTS_L1";
export const CHANGE_PARENTS = "CHANGE_PARENTS";
export const CHANGE_PARENTS_GL = "CHANGE_PARENTS_GL";
export const CHANGE_PARENTS_DEL = "CHANGE_PARENTS_DEL";
export const CHANGE_PARENTS_DEL_L1 = "CHANGE_PARENTS_DEL_L1";
export const CHANGE_PARENTS_DEL_L0 = "CHANGE_PARENTS_DEL_L0";

export const CHANGE_ADMINS_GL = "CHANGE_ADMINS_GL";
export const CHANGE_ADMINS = "CHANGE_ADMINS";
export const CHANGE_ADMINS_EL_GL = "CHANGE_ADMINS_EL_GL";
export const CHANGE_ADMINS_DEL = "CHANGE_ADMINS_DEL";

export const CHANGE_MARKS = "CHANGE_MARKS";

export const CHANGE_DNEVNIK = "CHANGE_DNEVNIK";
export const CHANGE_DNEVNIK_DAY_UP = "CHANGE_DNEVNIK_DAY_UP";
export const CHANGE_DNEVNIK_DAY_DOWN = "CHANGE_DNEVNIK_DAY_DOWN";

export const CHANGE_INDICATOR = "CHANGE_INDICATOR";

export const CHANGE_REQUEST = "CHANGE_REQUEST";
export const CHANGE_REQUEST_GL = "CHANGE_REQUEST_GL";
export const CHANGE_REQUEST_PARAM = "CHANGE_REQUEST_PARAM";
export const CHANGE_REQUEST_DEL = "CHANGE_REQUEST_DEL";

export const CHANGE_NEWS = "CHANGE_NEWS";
export const CHANGE_NEWS_GL = "CHANGE_NEWS_GL";
export const CHANGE_NEWS_PARAM = "CHANGE_NEWS_PARAM";
export const CHANGE_NEWS_DEL = "CHANGE_NEWS_DEL";

export const CHANGE_CONTACT = "CHANGE_CONTACT";
export const CHANGE_CONTACT_GL = "CHANGE_CONTACT_GL";
export const CHANGE_CONTACT_PARAM = "CHANGE_CONTACT_PARAM";

export const CHANGE_EVENTS = "CHANGE_EVENTS";
export const CHANGE_EVENTS_CLEAR = "CHANGE_EVENTS_CLEAR";
export const CHANGE_EVENT_DEL = "CHANGE_EVENT_DEL";
export const CHANGE_EVENT = "CHANGE_EVENT";
export const CHANGE_EVENT_TIMER = "CHANGE_EVENT_TIMER";
export const CHANGE_EVENT_TIMER_DEL = "CHANGE_EVENT_TIMER_DEL";
export const CHANGE_EVENTS_STEP = "CHANGE_EVENTS_STEP";
export const CHANGE_EVENTS_RL = "CHANGE_EVENTS_RL";

export function changeCB(checkboxId, checkBoxState) {
    return {
        type: CHANGE_CHECKBOX,
        payload: {
            checkBoxId: checkboxId,
            checkBoxState: !checkBoxState
        }
    };
}

export function changeState(type, id, state) {
    return {
        type: type,
        payload: {
            stateId: id,
            cState: state
        }
    };
}

export function changeJType(pret, t, st) {
    if(!pret) {
        if(!st)
            return {
                type: CHANGE_PJOURNAL_DEL_TYPE,
                payload: {
                    t: t
                }
            };
        return {
            type: CHANGE_PJOURNAL_NEW_TYPE,
            payload: {
                t: t,
                st: st
            }
        };
    }
    return {
        type: CHANGE_PJOURNAL_TYPE,
        payload: {
            pret: pret,
            t: t,
            st: st
        }
    };
}

export function changeDZ(dz, st) {
    return {
        type: CHANGE_PJOURNAL_DZ,
        payload: {
            dz: dz,
            st: st
        }
    };
}

export function changePjournalMarks(kid, day, mark, st, per, typ, wei) {
    if(per != undefined){
        if(mark == "Л") {
            return {
                type: CHANGE_PJOURNAL_DEL_PER_MARKS,
                payload: {
                    kid: kid,
                    per: per
                }
            };
        }
        return mark == 0 || mark == "Н" ? {type: "default", payload: undefined} : {
            type: CHANGE_PJOURNAL_PER_MARKS,
            payload: {
                kid: kid,
                per: per,
                State: mark
            }
        };
    }
    if(st == undefined){
        st = {
            mark: mark
        }
        if(typ != "") st["type"] = typ;
        if(wei) st["weight"] = mark == "Н" ? 1 : wei;
        if(mark == "Л") mark = 0;
    } else {
        st = {
            ...st,
            mark : mark,
            weight : mark == "Н" || typ == "" ? 1 : st.weight
        }
        if(typ != "") st["type"] = typ;
        if(wei) st["weight"] = mark == "Н" ? 1 : wei;
        if(mark == "Л") {
            return {
                type: CHANGE_PJOURNAL_DEL_MARKS,
                payload: {
                    kid: kid,
                    day: day
                }
            };
        }
    }
    return mark == 0 ? {type: "default", payload: undefined} : {
        type: CHANGE_PJOURNAL_MARKS,
        payload: {
            kid: kid,
            day: day,
            State: st
        }
    };
}

export function changePjournal(id, state) {
    return { type: CHANGE_PJOURNAL,
        payload: {
            Id: id,
            State: state
        }
    };
}

export function changeProfile(typeR, id, state, roleid) {
    return {
        type: typeR,
        payload: {
            Id: id,
            State: state,
            roleId: roleid
        }
    };
}

export function changeGroups(type, id, state, gid, block) {
    if(block) return {type: "default", payload: {}};
    return {
        type: type,
        payload: {
            id: id,
            gId: gid,
            state: state
        }
    };
}

export function changeEvents(type, state, id, title, text, time, cons) {
    return {
        type: type,
        payload: {
            id: id,
            state: state,
            time: type == CHANGE_EVENT ? {
                long: time,
                init: false
            } : undefined,
            title: title,
            dtime: title ? new Date().toLocaleString("ru", {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric'
            }) : undefined,
            text: text,
            cons: cons
        }
    };
}

export function changePeople(type, l0, l1, l2, state, param = "name") {
    return {
        type: type,
        payload: {
            l0: l0,
            l1: l1,
            l2: l2,
            param: param,
            state: state
        }
    };
}

export function changeMarks(id, state) {
    return { type: CHANGE_MARKS,
        payload: {
            markId: id,
            markState: state
        }
    };
}

export function changeJournal(id, state) {
    return { type: CHANGE_JOURNAL,
        payload: {
            jourId: id,
            jourState: state
        }
    };
}

export function changeDialog(type, state) {
    return {
        type: type,
        payload: state
    };
}

export function changeAnalytics(type, l0, l1, l2, state) {
    return {
        type: type,
        payload: {
            l0: l0,
            l1: l1,
            l2: l2,
            state: state
        }
    };
}

export function changeDnevnik(id, state, type) {
    return { type: type,
        payload: {
            stateId: id,
            cState: state
        }
    };
}

export function changeReq(typeR, id, state, param) {
    return {
        type: typeR,
        payload: {
            id: id,
            param: param,
            state: state
        }
    };
}

export function changeNews(typeR, type, id, state, param) {
    return {
        type: typeR,
        payload: {
            type: type,
            id: id,
            param: param,
            state: state
        }
    };
}

export function changeContacts(typeR, type, state, param, param1) {
    return {
        type: typeR,
        payload: {
            type: type,
            state: state,
            param: param,
            param1: param1
        }
    };
}

export function changeTheme(themeState, thP) {
    let stat = !themeState;
    document.body.setAttribute(thP[stat].c, '');
    if(document.body.hasAttribute(thP[stat].p)) document.body.removeAttribute(thP[stat].p)
    Object.getOwnPropertyNames(thP[stat].params).map(param =>
        document.documentElement.style.setProperty(param, thP[stat].params[param])
    );
    return {type: CHANGE_THEME, payload: stat};
}

export function changeIndNext(indState, res) {
    if(res) res();
    let stat = indState + 1;
    if(stat > 3) stat = 0;
    return { type: CHANGE_INDICATOR, payload: stat};
}

export function changeIndPrev(indState, res) {
    if(res) res();
    let stat = indState - 1;
    if(stat < 0) stat = 3;
    return { type: CHANGE_INDICATOR, payload: stat};
}

export function changeInd(indState, res) {
    if(res) res();
    return { type: CHANGE_INDICATOR, payload: indState};
}
import {createStore} from 'redux';
import rootReducer from './rootReducer';

export const createAppStore = createStore(rootReducer);

export default createAppStore;
import {CHANGE_NEWS, CHANGE_NEWS_DEL, CHANGE_NEWS_GL, CHANGE_NEWS_PARAM} from '../actions';

const initialState = {
    "Yo": {
    //     0: {
    //         title: 'Мы перешли на этот сервис',
    //         date: '11.11.2022',
    //         img_url: '',
    //         text: 'Всем своим дружным коллективом мы остановились на данном варианте.'
    //     }
    },
    "Por": {
    //     0: {
    //         title: 'День рождения портала!',
    //         date: '25.04.2022',
    //         img_url: '',
    //         text: 'Начались первые работы'
    //     },
    //     1: {
    //         title: 'А проект вышел большим...',
    //         date: '02.12.2022',
    //         img_url: '/static/media/tuman.jpg',
    //         text: 'Да-да, всё ещё не конец...'
    //     }
    }
};

export default function newsReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_NEWS_GL:
            fd[action.payload.type] = action.payload.state;
            return fd;
        case CHANGE_NEWS:
            fd[action.payload.type][action.payload.id] = action.payload.state;
            return fd;
        case CHANGE_NEWS_PARAM:
            fd[action.payload.type][action.payload.id][action.payload.param] = action.payload.state;
            return fd;
        case CHANGE_NEWS_DEL:
            delete fd[action.payload.type][action.payload.id];
            return fd;
        default:
            return state;
    }
}
import {CHANGE_REQUEST, CHANGE_REQUEST_DEL, CHANGE_REQUEST_GL, CHANGE_REQUEST_PARAM} from '../actions';

const initialState = {
    // 0: {
    //     title: 'Мы перешли на этот сервис',
    //     date: '11.11.2022',
    //     text: 'Всем своим дружным коллективом мы остановились на данном варианте.'
    // }
};

export default function requestReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_REQUEST_GL:
            return action.payload.state;
        case CHANGE_REQUEST:
            fd[action.payload.id] = action.payload.state;
            return fd;
        case CHANGE_REQUEST_PARAM:
            fd[action.payload.id][action.payload.param] = action.payload.state;
            return fd;
        case CHANGE_REQUEST_DEL:
            delete fd[action.payload.id];
            return fd;
        default:
            return state;
    }
}
import {CHANGE_STATE, CHANGE_STATE_GL, CHANGE_STATE_RESET} from '../actions';

const initialState = {
        auth: false,
        // invErr: false,
        // reaYes: false,
        // login: "nm13",
        // ico: 2,
        // role: 2,
        // uuid: "sdfds",
        // roles: true,
        // secFr: false,
        // roleDesc: "администратор портала",
        rolesDescrs: ["обучающийся", "родитель", "педагог", "завуч", "администратор портала"],
        // kid: "id1",
        // kids:{
        //     "id1": "Петров А.А.",
        //     "id2": "Петрова А.Б."
        // }
    };

export default function statusReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_STATE:
            fd[action.payload.stateId] = action.payload.cState;
            if(action.payload.stateId == "role") {
                fd.roleDesc = fd.rolesDescrs[action.payload.cState];
            }
            return fd;
        case CHANGE_STATE_GL:
            if(action.payload.cState){
                for(let el of Object.getOwnPropertyNames(action.payload.cState)){
                    fd[el] = action.payload.cState[el];
                    if(el == "role") {
                        fd.roleDesc = fd.rolesDescrs[action.payload.cState[el]];
                    }
                }
            }
            return fd;
        case CHANGE_STATE_RESET:
            return {
                auth: false,
                uuid: fd.uuid,
                rolesDescrs: ["обучающийся", "родитель", "педагог", "завуч", "администратор портала"],
            };
        default:
            return state;
    }
}
import {
    CHANGE_PJOURNAL,
    CHANGE_PJOURNAL_DEL_MARKS,
    CHANGE_PJOURNAL_DEL_PER_MARKS,
    CHANGE_PJOURNAL_DEL_TYPE,
    CHANGE_PJOURNAL_DZ,
    CHANGE_PJOURNAL_MARKS,
    CHANGE_PJOURNAL_NEW_TYPE,
    CHANGE_PJOURNAL_PER_MARKS,
    CHANGE_PJOURNAL_TYPE
} from '../actions';

const initialState = {
        predm: 1,
        predms: {
            0: "Информатика",
            1: "Математика",
            2: "Русский яз."
        },
        mar: 0,
        pers: ["I", "Годовая", "Итоговая"],
        typs: {
            "Ответ на уроке": 1,
            "Самостоятельная работа": 4,
            "Контрольная работа": 5
        },
        typ: "",
        jur: {
            day: {
                0 : "10.02.22",
                1 : "16.02.22",
                2 : "17.02.22",
                3 : "18.02.22",
                4 : "19.02.22",
                5 : "20.02.22",
                6 : "21.02.22",
                7 : "22.02.22",
                8 : "10.03.22",
                9 : "16.03.22",
                10 : "17.03.22",
                11 : "18.03.22",
                12 : "19.03.22",
                13 : "20.03.22",
                14 : "21.03.22",
                15 : "22.03.22",
                16 : "01.04.22",
                17 : "03.04.22",
                18 : "04.04.22",
                19 : "05.04.22",
                20 : "06.04.22",
                21 : "07.04.22",
                22 : "08.04.22",
                23 : "09.04.22",
                24 : "14.04.22",
                25 : "14.05.22",
                26 : "15.05.22",
                27 : "16.05.22",
                28 : "17.05.22",
                29 : "18.05.22"
            },
            kids: {
                'Петров А.А.': {
                    days: {
                        0: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        1: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        2: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        3: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        4: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        5: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        6: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        7: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        8: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        9: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        10: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        11: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        12: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        13: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        14: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        15: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        16: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        17: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        18: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        19: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        20: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        21: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        22: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        23: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        24: {
                            mark: 2,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        25: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        26: {
                            mark: 5,
                            weight: 5,
                            type: "Контрольная работа"
                        },
                        27: {
                            mark: "Н",
                            weight: 1
                        },
                        28: {
                            mark: 3,
                            weight: 4,
                            type: "Самостоятельная работа"
                        }
                    },
                    avg: {
                        mark: "3.04",
                        I: 2
                    }
                },
                'Петрова А.Б.': {
                    days: {
                        15: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        27: {
                            mark: "Н",
                            weight: 1
                        },
                        28: {
                            mark: 3,
                            weight: 4,
                            type: "Самостоятельная работа"
                        }
                    },
                    avg: {
                        mark: "3.0"
                    }
                },
                'Петрова А.В.': {
                    days: {
                        25: {
                            mark: 5,
                            weight: 1,
                            type: "Ответ на уроке"
                        },
                        27: {
                            mark: "Н",
                            weight: 1
                        },
                        28: {
                            mark: "Н",
                            weight: 1
                        }
                    },
                    avg: {
                        mark: "3.0"
                    }
                },
                'Петрова А.Г.': {
                    days: {
                        25: {
                            mark: "Н",
                            weight: 1
                        },
                        27: {
                            mark: "Н",
                            weight: 1
                        },
                        28: {
                            mark: 3,
                            weight: 4,
                            type: "Самостоятельная работа"
                        }
                    },
                    avg: {
                        mark: "3.0"
                    }
                }
            }
        },
    dz:{
        0: "Дз№1",
        20: "Дз№2",
        27: "Дз№23"
    }
};

export default function pjournalReducer(state = initialState, action) {
    let fd;
    switch(action.type) {
        case CHANGE_PJOURNAL:
            return {
                    ...state,
                    [action.payload.Id]: action.payload.State
                };
        case CHANGE_PJOURNAL_MARKS:
            fd = {...state};
            fd.jur.kids[action.payload.kid].days[action.payload.day] = action.payload.State;
            return fd;
        case CHANGE_PJOURNAL_DEL_MARKS:
            fd = {...state};
            delete fd.jur.kids[action.payload.kid].days[action.payload.day];
            return fd;
        case CHANGE_PJOURNAL_PER_MARKS:
            fd = {...state};
            fd.jur.kids[action.payload.kid].avg[action.payload.per] = action.payload.State;
            return fd;
        case CHANGE_PJOURNAL_DEL_PER_MARKS:
            fd = {...state};
            delete fd.jur.kids[action.payload.kid].avg[action.payload.per];
            return fd;
        case CHANGE_PJOURNAL_TYPE:
            fd = {...state};
            fd.typs = JSON.parse(JSON.stringify(fd.typs).replaceAll(action.payload.pret, action.payload.t));
            fd.typs[action.payload.t] = action.payload.st;
            return fd;
        case CHANGE_PJOURNAL_DEL_TYPE:
            fd = {...state};
            delete fd.typs[action.payload.t];
            return fd;
        case CHANGE_PJOURNAL_NEW_TYPE:
            fd = {...state};
            fd.typs[action.payload.t] = action.payload.st;
            return fd;
        case CHANGE_PJOURNAL_DZ:
            fd = {...state};
            fd.dz[action.payload.dz] = action.payload.st;
            return fd;
        default:
            return state;
    }
}
import {CHANGE_CONTACT, CHANGE_CONTACT_GL, CHANGE_CONTACT_PARAM} from '../actions';

let contYO, mapTextYO, contPOR, mapTextPOR;

// contYO =
// `8 (800) 555 35 36
// 5 (353) 555 00 88`;
//
// mapTextYO =
// `Ближайшие станции метро:
// Александровский сад, 610 м (Филёвская линия, выход 5)
// Библиотека им. Ленина, 680 м (Сокольническая линия, выход 3)
// Арбатская, 750 м (Арбатско-Покровская линия, выход 8)`;

// contPOR =
// `8 (800) 555 35 37
// 5 (353) 555 00 88`;
//
// mapTextPOR =
// `Ближайшие станции метро:
// Александровский сад, 610 м (Филёвская линия, выход 5)
// Библиотека им. Ленина, 680 м (Сокольническая линия, выход 3)
// Арбатская, 750 м (Арбатско-Покровская линия, выход 8)`;

const initialState = {
    "Yo": {
        // contact: contYO,
        // mapPr: {
        //     text: mapTextYO,
        //     imgUrl: "/static/media/map.jpg"
        // }
    },
    "Por": {
        // contact: contPOR,
        // mapPr: {
        //     text: mapTextPOR,
        //     imgUrl: "/static/media/map.jpg"
        // }
    }
};
export default function contactReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_CONTACT_GL:
            fd[action.payload.type] = action.payload.state;
            return fd;
        case CHANGE_CONTACT:
            fd[action.payload.type].contact = action.payload.state;
            return fd;
        case CHANGE_CONTACT_PARAM:
            // fd[action.payload.type].mapPr[action.payload.param] = action.payload.state;
            if(action.payload.param1){
                if(!fd[action.payload.type][action.payload.param]){
                    fd[action.payload.type][action.payload.param] = {};
                }
                fd[action.payload.type][action.payload.param][action.payload.param1] = action.payload.state;
            } else {
                fd[action.payload.type][action.payload.param] = action.payload.state;
            }
            return fd;
        default:
            return state;
    }
}
import {CHANGE_DNEVNIK, CHANGE_DNEVNIK_DAY_DOWN, CHANGE_DNEVNIK_DAY_UP} from '../actions';

const initialState = {
    currWeek: "14.05.22",
    min: "09.05.22",
    max: "23.05.22",
    schedule: {
        0 : ["Англ. яз.", "Русский яз.", "Математика", "Окруж. мир"],
        1 : ["Русский яз.", "Математика", "Англ. яз.", "Русский яз.", "Математика", "Окруж. мир"],
        2 : ["Англ. яз.", "Англ. яз.", "Русский яз.", "Математика", "Окруж. мир"],
        3 : ["Математика", "Окруж. мир"],
        4 : ["Англ. яз.", "Русский яз."],
        5 : [],
        6 : []
    },
    days: {
        "14.05.22": {
            lessons: [
                {
                    homework: "Упр. 5Стр. 103,Упр. 2Стр. 104",
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                {
                    homework: "Стр. 18Упр. 328"
                },
                {
                    homework: "Стр. 36 №5, стр.37 N09"
                },
                {
                    homework: "Стр. 62-63 пересказ"
                }
            ]
        },
        "15.05.22": {
            lessons: [
                {
                    homework: "Стр. 18Упр. 328"
                },
                {
                    homework: "Стр. 36 №5, стр.37 N09"
                },
                {
                    homework: "Упр. 5Стр. 103,Упр. 2Стр. 104Упр. 5Стр. 103,Упр. 2Стр. 104Упр. 5Стр. 103,Упр. 2Стр. 104Упр. 5Стр. 103,Упр. 2Стр. 104Упр. 5Стр. 103,Упр. 2Стр. 104Упр. 5Стр. 103,Упр. 2Стр. 104Упр. 5Стр. 103,Упр. 2Стр. 104Упр. 5Стр. 103,Упр. 2Стр. 104",
                    mark: 5,
                    weight: 2,
                    type: "Тест"
                },
                {
                    homework: "Стр. 18Упр. 328"
                },
                {
                    homework: "Стр. 36 №5, стр.37 N09"
                },
                {
                    homework: "Стр. 62-63 пересказ"
                }
            ]
        },
        "16.05.22": {
            lessons: [
                {
                    homework: "Упр. 5Стр. 103,Упр. 2Стр. 104",
                    mark: 5,
                    weight: 1
                },
                {
                    homework: "Упр. 5Стр. 103,Упр. 2Стр. 104",
                    mark: 5,
                    weight: 1
                },
                {
                    homework: "Стр. 18Упр. 328"
                },
                {
                    homework: "Стр. 36 №5, стр.37 N09"
                },
                {
                    homework: "Стр. 62-63 пересказ"
                }
            ]
        },
        "17.05.22": {
            lessons: [
                {
                    homework: "Стр. 36 №5, стр.37 N09"
                },
                {
                    homework: "Стр. 62-63 пересказ"
                }
            ]
        },
        "18.05.22": {
            lessons: [
                {
                    homework: "Упр. 5Стр. 103,Упр. 2Стр. 104",
                    mark: 5,
                    weight: 1
                },
                {
                    homework: "Стр. 18Упр. 328"
                }
            ]
        },
        "19.05.22": {
            lessons: []
        },
        "20.05.22": {
            lessons: []
        }
    }
};

export default function dnevnikReducer(state = initialState, action) {
    switch(action.type) {
        case CHANGE_DNEVNIK:
            return {
                    ...state,
                    [action.payload.stateId]: action.payload.cState
                };
        case CHANGE_DNEVNIK_DAY_UP:
            return {
                    ...state,
                    days: {
                        [action.payload.stateId]: action.payload.cState,
                        ...state.days
                    }
                };
        case CHANGE_DNEVNIK_DAY_DOWN:
            return {
                ...state,
                days: {
                    ...state.days,
                    [action.payload.stateId]: action.payload.cState
                }
            };
        default:
            return state;
    }
}
import {CHANGE_INDICATOR} from '../../actions';

const initialState = {
    actived: 0
};

export default function indicatorReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_INDICATOR:
            fd.actived = action.payload;
            return fd;
        default:
            return state;
    }
}
import {
    CHANGE_GROUPS,
    CHANGE_GROUPS_DEL_GRS,
    CHANGE_GROUPS_GL,
    CHANGE_GROUPS_GR,
    CHANGE_GROUPS_GRS
} from '../../actions';

const initialState = {
    els: {
        groups: {
            // 0: "11A",
            // 1: "11Б",
            // 2: "11В",
            // 3: "11Г",
            // 4: "10А",
            // 5: "10Б",
            // 6: "10В",
            // 7: "10Г",
            // 8: "9А",
            // 9: "9Б",
            // 10: "9В",
            // 11: "9Г",
            // 12: "8А",
            // 13: "8Б",
            // 14: "8В",
            // 15: "8Г",
            // 16: "7А",
            // 17: "7Б",
            // 18: "7В",
            // 19: "7Г",
            // 20: "6А",
            // 21: "6Б",
            // 22: "6В",
            // 23: "6Г",
            // 24: "5А",
            // 25: "5Б",
            // 26: "5В",
            // 27: "5Г",
            // 28: "4А",
            // 29: "4Б",
            // 30: "4В",
            // 31: "4Г",
            // 32: "3А",
            // 33: "3Б",
            // 34: "3В",
            // 35: "3Г",
            // 36: "2А",
            // 37: "2Б",
            // 38: "2В",
            // 39: "2Г",
            // 40: "1А",
            // 41: "1Б",
            // 42: "1В",
            // 43: "1Г"
        },
        group: 0
    }
};

export default function groupReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_GROUPS:
            fd.els = action.payload.state;
            return fd;
        case CHANGE_GROUPS_GL:
            fd.els.groups = action.payload.state;
            return fd;
        case CHANGE_GROUPS_GR:
            fd.els.group = action.payload.state;
            return fd;
        case CHANGE_GROUPS_GRS:
            fd.els.groups[action.payload.gId] = action.payload.state;
            // fd.group = action.payload.gId;
            return fd;
        case CHANGE_GROUPS_DEL_GRS:
            delete fd.els.groups[action.payload.gId];
            return fd;
        default:
            return state;
    }
}
import {
    CHANGE_HTEACHERS,
    CHANGE_HTEACHERS_DEL,
    CHANGE_HTEACHERS_DEL_L2,
    CHANGE_HTEACHERS_EL_GL,
    CHANGE_HTEACHERS_GL,
    CHANGE_HTEACHERS_L2,
    CHANGE_HTEACHERS_L2_GL
} from '../../actions';

const initialState = {
        // "id1" : {
        //     name: "Школа",
        //     pep: {
        //         "id8" : {
        //             name: "Петров А.А."
        //         }
        //     }
        // },
        // "id2" : {
        //     name: "Гимназия"
        // },
        // "id3" : {
        //     name: "Лицей"
        // }
        // "id1" : {
        //     name: "Петров А.А."
        // },
        // "id2" : {
        //     name: "Петров А.С."
        // },
        // "id3" : {
        //     name: "Петров А.Г."
        // }
    };

export default function hteachersReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_HTEACHERS_GL:
            return action.payload.state;
        case CHANGE_HTEACHERS_L2:
            if(!fd[action.payload.l1].pep){
                fd[action.payload.l1].pep = {};
            }
            if(!fd[action.payload.l1].pep[action.payload.l2]){
                fd[action.payload.l1].pep[action.payload.l2] = {};
            }
            fd[action.payload.l1].pep[action.payload.l2][action.payload.param] = action.payload.state;
            return fd;
        case CHANGE_HTEACHERS_L2_GL:
            if(!fd[action.payload.l1].pep){
                fd[action.payload.l1].pep = {};
            }
            fd[action.payload.l1].pep[action.payload.l2] = action.payload.state;
            return fd;
        case CHANGE_HTEACHERS_DEL_L2:
            delete fd[action.payload.l1].pep[action.payload.l2];
            return fd;
        case CHANGE_HTEACHERS:
            if(!fd[action.payload.l1]){
                fd[action.payload.l1] = {};
            }
            fd[action.payload.l1][action.payload.param] = action.payload.state;
            return fd;
        case CHANGE_HTEACHERS_EL_GL:
            fd[action.payload.l1] = action.payload.state;
            return fd;
        case CHANGE_HTEACHERS_DEL:
            delete fd[action.payload.l1];
            return fd;
        default:
            return state;
    }
}
import {CHANGE_TEACHERS, CHANGE_TEACHERS_DEL, CHANGE_TEACHERS_GL,} from '../../actions';

const initialState = {
    // 0 : {
    //     name: "Англ. яз.",
    //     tea: {
    //         "id1": {
    //             name: "Петров А.А.1"
    //             // link: sit + "/invite/x"
    //         },
    //         "id2": {
    //             name: "Петров А.Б.2"
    //         }
    //     }
    // },
    // 1: {
    //     name: "Русский яз.",
    //     tea: {
    //         "id1": {
    //             name: "Петров А.А.1"
    //         }
    //     }
    // },
    // 2: {
    //     name: "Математика",
    //     tea: {
    //         "id1": {
    //             name: "Петров А.А.1"
    //         }
    //     }
    // },
    // 3: {
    //     name: "Окруж. мир",
    //     tea: {
    //         "id1": {
    //             name: "Петров А.А.1"
    //         }
    //     }
    // },
    // nt : {
    //     tea: {
    //         "id5": {
    //             name: "Петров А.А.5"
    //         },
    //         "id6": {
    //             name: "Петров А.С.6"
    //         },
    //         "id7": {
    //             name: "Петров А.Г.7"
    //         }
    //     }
    // }
};

export default function teachersReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_TEACHERS_GL:
            return action.payload.state;
        case CHANGE_TEACHERS:
            if(!fd[action.payload.l0].tea[action.payload.l1]){
                fd[action.payload.l0].tea[action.payload.l1] = {};
            }
            fd[action.payload.l0].tea[action.payload.l1][action.payload.param] = action.payload.state;
            console.log(fd);
            return fd;
        case CHANGE_TEACHERS_DEL:
            delete fd[action.payload.l0].tea[action.payload.l1];
            return fd;
        default:
            return state;
    }
}
import {
    CHANGE_PARENTS,
    CHANGE_PARENTS_DEL,
    CHANGE_PARENTS_DEL_L0,
    CHANGE_PARENTS_DEL_L1,
    CHANGE_PARENTS_GL,
    CHANGE_PARENTS_L1,
    CHANGE_PARENTS_L1_PARAM
} from '../../actions';

const initialState = {
    nw : {
        name : "Фамилия И.О."
        // par : {
        //     "id1": {
        //         name : "Петров А.А."
        //     },
        //     "id2": {
        //         name : "Петрова А.Б."
        //     }
        // }
    }
    // "id1" : {
    //     name : "Петров А.А.",
    //     par : {
    //         "id1": {
    //             name : "Петров А.А."
    //         },
    //         "id2": {
    //             name : "Петрова А.Б."
    //         }
    //     }
    // },
    // "id2": {
    //     name : "Васечкин А.С.",
    //     par : {
    //         "id1": {
    //             name : "Петров А.А."
    //         }
    //     }
    // },
    // "id3": {
    //     name : "Петров А.Г.",
    //     par : {
    //         "id1": {
    //             name : "Петров А.А."
    //         }
    //     }
    // }
};

export default function parentsReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_PARENTS_GL:
            let nw = {...fd.nw};
            action.payload.state.nw = nw;
            return action.payload.state;
        case CHANGE_PARENTS_L1_PARAM:
            if(!fd[action.payload.l1]){
                fd[action.payload.l1] = {};
            }
            fd[action.payload.l1][action.payload.param] = action.payload.state;
            return fd;
        case CHANGE_PARENTS_L1:
            fd[action.payload.l1] = action.payload.state;
            return fd;
        case CHANGE_PARENTS:
            if(!fd[action.payload.l0]){
                fd[action.payload.l0] = {};
            }
            if(!fd[action.payload.l0][action.payload.l1]){
                fd[action.payload.l0][action.payload.l1] = {};
            }
            if(!fd[action.payload.l0][action.payload.l1][action.payload.l2]){
                fd[action.payload.l0][action.payload.l1][action.payload.l2] = {};
            }
            fd[action.payload.l0][action.payload.l1][action.payload.l2][action.payload.param] = action.payload.state;
            return fd;
        case CHANGE_PARENTS_DEL:
            delete fd[action.payload.l0][action.payload.l1][action.payload.l2];
            return fd;
        case CHANGE_PARENTS_DEL_L1:
            delete fd[action.payload.l0][action.payload.l1];
            return fd;
        case CHANGE_PARENTS_DEL_L0:
            delete fd[action.payload.l0];
            return fd;
        default:
            return state;
    }
}
import {CHANGE_CLASSMATES, CHANGE_CLASSMATES_DEL, CHANGE_CLASSMATES_EL_GL, CHANGE_CLASSMATES_GL} from '../../actions';

const initialState = {
        // "id1" : {
        //     name: "Петров А.А."
        // },
        // "id2" : {
        //     name: "Васечкин А.С."
        // },
        // "id3" : {
        //     name: "Петров А.Г."
        // },
        // "id4" : {
        //     name: "Петров А.Г.1"
        // },
        // "id5" : {
        //     name: "Петров А.Г.2"
        // },
        // "id6" : {
        //     name: "Петров А.Г.3"
        // }
    };

export default function classmatesReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_CLASSMATES_GL:
            return action.payload.state;
        case CHANGE_CLASSMATES:
            if(!fd[action.payload.l1]){
                fd[action.payload.l1] = {};
            }
            fd[action.payload.l1][action.payload.param] = action.payload.state;
            return fd;
        case CHANGE_CLASSMATES_EL_GL:
            fd[action.payload.l1] = action.payload.state;
            return fd;
        case CHANGE_CLASSMATES_DEL:
            delete fd[action.payload.l1];
            return fd;
        default:
            return state;
    }
}
import {CHANGE_ADMINS, CHANGE_ADMINS_DEL, CHANGE_ADMINS_EL_GL, CHANGE_ADMINS_GL} from '../../actions';

const initialState = {
        // "id1" : {
        //     name: "Новиков А.А."
        // },
        // "id2" : {
        //     name: "Новиков А.С."
        // },
        // "id3" : {
        //     name: "Новиков А.Г."
        // }
    };

export default function adminsReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_ADMINS_GL:
            return action.payload.state;
        case CHANGE_ADMINS:
            if(!fd[action.payload.l1]){
                fd[action.payload.l1] = {};
            }
            fd[action.payload.l1][action.payload.param] = action.payload.state;
            return fd;
        case CHANGE_ADMINS_EL_GL:
            fd[action.payload.l1] = action.payload.state;
            return fd;
        case CHANGE_ADMINS_DEL:
            delete fd[action.payload.l1];
            return fd;
        default:
            return state;
    }
}
import {
    CHANGE_EVENT,
    CHANGE_EVENT_DEL,
    CHANGE_EVENT_TIMER,
    CHANGE_EVENT_TIMER_DEL,
    CHANGE_EVENTS,
    CHANGE_EVENTS_CLEAR,
    CHANGE_EVENTS_RL,
    CHANGE_EVENTS_STEP
} from '../../actions';

const initialState = {
    steps: 0,
    right: true,
    evs: {
        // 0: {
        //     title: 'Внимание1!',
        //     dtime: '12:00',
        //     text: 'Допустимы только латиница и цифры'
        // },
        // 1: {
        //     title: 'Внимание2!',
        //     dtime: '12:00',
        //     text: 'Допустимы только латиница и цифры'
        // },
        // 2: {
        //     title: 'Внимание3!',
        //     dtime: '12:00',
        //     text: 'Допустимы только латиница и цифры'
        // }
    },
    time: {
        // 0: {
        //     long: 10,
        //     init: false
        // },
        // 1: {
        //     long: 5,
        //     init: false
        // }
    },
    cons: {}
};

export default function eventsReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_EVENTS:
            fd.evs = action.payload.state;
            return fd;
        case CHANGE_EVENTS_CLEAR:
            let mas = {};
            for(let el of Object.getOwnPropertyNames(fd.cons)){
                mas[el] = fd.evs[el];
            }
            fd.evs = mas;
            fd.time = {};
            return fd;
        case CHANGE_EVENT:
            if(!action.payload.id){
                let evs = Object.getOwnPropertyNames(fd.evs);
                action.payload.id = evs.length == 0 ? 0 : parseInt(evs[evs.length-1]) + 1;
            }
            fd.evs[action.payload.id] = action.payload;
            if(action.payload.time.long) fd.time[action.payload.id] = action.payload.time;
            if(action.payload.cons) {
                fd.cons[action.payload.id] = true;
                delete action.payload.cons;
            }
            return fd;
        case CHANGE_EVENT_DEL:
            if(action.payload.state && !fd.time[action.payload.id]){
                return fd;
            }
            delete fd.evs[action.payload.id];
            if(fd.time[action.payload.id]) delete fd.time[action.payload.id];
            if(fd.cons[action.payload.id]) delete fd.cons[action.payload.id];
            return fd;
        case CHANGE_EVENT_TIMER:
            fd.time[action.payload.id].init = action.payload.state;
            return fd;
        case CHANGE_EVENT_TIMER_DEL:
            delete fd.time[action.payload.state];
            return fd;
        case CHANGE_EVENTS_STEP:
            fd.steps += action.payload.state;
            return fd;
        case CHANGE_EVENTS_RL:
            fd.right = action.payload.state;
            return fd;
        default:
            return state;
    }
}
import {CHANGE_PANE, CHANGE_PANE_DEL_GRS, CHANGE_PANE_GR, CHANGE_PANE_GRS} from '../../actions';

const initialState = {
    els: []
};

export default function paneReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_PANE:
            fd.els[action.payload.id] = action.payload.state;
            return fd;
        case CHANGE_PANE_GR:
            fd.els[action.payload.id].group = action.payload.state;
            return fd;
        case CHANGE_PANE_GRS:
            fd.els[action.payload.id].groups[action.payload.gId] = action.payload.state;
            fd.els[action.payload.id].group = action.payload.gId;
            return fd;
        case CHANGE_PANE_DEL_GRS:
            delete fd.els[action.payload.id].groups[action.payload.gId];
            return fd;
        default:
            return state;
    }
}
import {CHANGE_CHECKBOX} from '../../actions';

const initialState = {
    "0": false
};

export default function checkBoxReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_CHECKBOX:
            fd[action.payload.checkBoxId] = action.payload.checkBoxState;
            return fd;
        default:
            return state;
    }
}
import {CHANGE_DIALOG, CHANGE_DIALOG_DEL} from '../../actions';

const initialState = {
    // obj: {}
    // buts: {
    //     0 : {
    //         text: "Прочитал"
    //     }
    // }
};

export default function dialogReducer(state = initialState, action) {
    switch(action.type) {
        case CHANGE_DIALOG:
            return action.payload;
        case CHANGE_DIALOG_DEL:
            return {};
        default:
            return state;
    }
}
import {CHANGE_PROFILE, CHANGE_PROFILE_GL, CHANGE_PROFILE_ROLES} from "../../actions";

const initialState = {
    // login: "test",
    // ico: 2,
    // fio: "Иванов Иван Иванович",
    // more: "",
    // roles: {
    //     0: {
    //         yo: "Школа №1541",
    //         email: "ya@ya.ru",
    //         parents: {
    //             "id1": "Петров А.А.",
    //             "id2": "Петрова А.Б."
    //         },
    //         group: "10A"
    //     },
    //     1: {
    //         yo: "Школа №1541",
    //         kids: {
    //             "id1": "Петров А.А.",
    //             "id2": "Петрова А.Б."
    //         },
    //         email: "ya@ya.ru"
    //     },
    //     2: {
    //         yo: "Школа №1541",
    //         lessons: ["Англ. Яз.", "Математика"],
    //         email: "ya@ya.ru"
    //     },
    //     3: {
    //         yo: "Школа №1541",
    //         email: "ya@ya.ru"
    //     },
    //     4: {
    //         email: "ya@ya.ru",
    //     }
    // }
};

export default function profileReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_PROFILE_GL:
            return action.payload.State;
        case CHANGE_PROFILE:
            fd[action.payload.Id] = action.payload.State
            return fd;
        case CHANGE_PROFILE_ROLES:
            fd.roles[action.payload.roleId][action.payload.Id] = action.payload.State;
            return fd;
        default:
            return state;
    }
}
import {CHANGE_THEME} from '../../actions';

let x = !window.matchMedia('(prefers-color-scheme: dark)');

const initialState = {
    theme_ch: x,
    theme: x ? "светлая" : "тёмная",
    thP: {
        true: {
            c: "theme_light",
            p: "theme_dark",
            params: {
                "--bgcV1": "#DBDBDBe6",
                "--bgcV2": "#242424e6",
                "--bgcV3": "#000000b3",
                "--shdV1": "#fff",
                "--shdV2": "#000",
                "--cV1": "#006600",
                "--cV2": "#009900",
                "--cV3": "#090a0b",
                "--bcV1": "#4d4d4d",
                "--bcV2": "#090a0b",
            }
        },
        false: {
            c: "theme_dark",
            p: "theme_light",
            params: {
                "--bgcV1": "#242424e6",
                "--bgcV2": "#DBDBDBe6",
                "--bgcV3": "#0000004d",
                "--shdV1": "#000",
                "--shdV2": "#fff",
                "--cV1": "#009900",
                "--cV2": "#00bb00",
                "--cV3": "#f5f6f7",
                "--bcV1": "#b3b3b3",
                "--bcV2": "#f5f6f7",
            }
        }
    }
};

export default function themeReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_THEME:
            fd.theme_ch = action.payload;
            fd.theme = action.payload ? "светлая" : "тёмная";
            return fd;
        default:
            return state;
    }
}
import {CHANGE_PERIODS, CHANGE_PERIODS_DEL, CHANGE_PERIODS_L1} from '../../actions';

const initialState = {
    prs: {
        0 : {
            name: "I четверть",
            per: "01.09.22-03.11.22"
        },
        1 : {
            name: "II четверть",
            per: "12.11.22-29.12.22"
        },
        2 : {
            name: "III четверть",
            per: "11.01.23-23.03.23"
        },
        3 : {
            name: "IV четверть",
            per: "01.04.23-30.05.23"
        }
    }
};

export default function periodsReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_PERIODS:
            if(!fd[action.payload.l0]){
                fd[action.payload.l0] = {};
            }
            if(!fd[action.payload.l0][action.payload.l1]){
                fd[action.payload.l0][action.payload.l1] = {};
            }
            fd[action.payload.l0][action.payload.l1][action.payload.l2] = action.payload.state;
            return fd;
        case CHANGE_PERIODS_L1:
            if(!fd[action.payload.l0]){
                fd[action.payload.l0] = {};
            }
            fd[action.payload.l0][action.payload.l1] = action.payload.state;
            return fd;
        case CHANGE_PERIODS_DEL:
            delete fd[action.payload.l0][action.payload.l1];
            return fd;
        default:
            return state;
    }
}
import {CHANGE_SCHEDULE, CHANGE_SCHEDULE_DEL, CHANGE_SCHEDULE_GL, CHANGE_SCHEDULE_PARAM} from '../../actions';

const initialState = {
    0 : {
        dayId: undefined,
        lessons: {
            0: {
                name: "Англ. яз.",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            },
            1 : {
                name: "Русский яз.",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            },
            2 : {
                name: "Математика",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            },
            3 : {
                name: "Окруж. мир",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            }
        }
    },
    1 : {
        dayId: undefined,
        lessons: {
            0 : {
                name: "Русский яз.",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            },
            1 : {
                name: "Математика",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            },
            2 : {
                name: "Англ. яз.",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            },
            3 : {
                name: "Русский яз.",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            },
            4 : {
                name: "Математика",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            },
            5 : {
                name: "Окруж. мир",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            }
        }
    },
    2 : {
        dayId: undefined,
        lessons: {
            0 : {
                name: "Англ. яз.",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            },
            1 : {
                name: "Англ. яз.",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            },
            2 : {
                name: "Русский яз.",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            },
            3 : {
                name: "Математика",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            },
            4 : {
                name: "Окруж. мир",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            }
        }
    },
    3 : {
        dayId: undefined,
        lessons: {
            0 : {
                name: "Математика",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            },
            1 : {
                name: "Окруж. мир",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            }
        }
    },
    4 : {
        dayId: undefined,
        lessons: {
            0 : {
                name: "Англ. яз.",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            },
            1 : {
                name: "Русский яз.",
                cabinet: "300",
                prepod: {
                    name: "Петренко А.А.",
                    id: "id1"
                },
                group: "10A"
            }
        }
    },
    5 : {dayId: undefined,
        lessons: {}},
    6 : {dayId: undefined,
        lessons: {}}
};

export default function scheduleReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_SCHEDULE_PARAM:
            if(!fd[action.payload.l0]){
                fd[action.payload.l0] = {};
            }
            if(!fd[action.payload.l0].lessons){
                fd[action.payload.l0].lessons = {};
            }
            if(!fd[action.payload.l0].lessons[action.payload.l1]){
                fd[action.payload.l0].lessons[action.payload.l1] = {};
            }
            fd[action.payload.l0].lessons[action.payload.l1][action.payload.l2] = action.payload.state;
            return fd;
        case CHANGE_SCHEDULE_GL:
            if(!action.payload.state) action.payload.state = {};
            return action.payload.state;
        case CHANGE_SCHEDULE:
            if(!fd[action.payload.l0]){
                fd[action.payload.l0] = {};
            }
            if(!fd[action.payload.l0].lessons){
                fd[action.payload.l0].lessons = {};
            }
            fd[action.payload.l0].lessons[action.payload.l1] = action.payload.state;
            if(action.payload.l2) {
                fd[action.payload.l0].dayId = action.payload.l2;
            }
            return fd;
        case CHANGE_SCHEDULE_DEL:
            delete fd[action.payload.l0].lessons[action.payload.l1];
            return fd;
        default:
            return state;
    }
}
import {CHANGE_JOURNAL} from '../../actions';

const initialState = {
        "Англ. яз.": {
            days : {
                "10.02.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "16.02.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "17.02.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "18.02.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "19.02.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "20.02.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "21.02.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "22.02.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "10.03.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "16.03.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "17.03.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "18.03.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "19.03.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "20.03.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "21.03.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "22.03.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "01.04.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "03.04.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "04.04.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "05.04.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "06.04.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "07.04.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "08.04.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "09.04.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "14.04.22": {
                    mark: 2,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "14.05.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "15.05.22": {
                    mark: 5,
                    weight: 5,
                    type: "Контрольная работа"
                },
                "16.05.22": {
                    mark: "Н",
                    weight: 1
                },
                "17.05.22": {
                    mark: 3,
                    weight: 4,
                    type: "Самостоятельная работа"
                }
            },
            avg: {
                mark: "3.0"
            }
        },
        "Русский яз.": {
            days : {
                "16.05.22": {
                    mark: "Н",
                    weight: 1
                },
                "17.05.22": {
                    mark: 3,
                    weight: 4,
                    type: "Самостоятельная работа"
                },
            },
            avg: {
                mark: "3.0"
            }
        },
        "Математика": {
            days : {
                "14.05.22": {
                    mark: 5,
                    weight: 1,
                    type: "Ответ на уроке"
                },
                "16.05.22": {
                    mark: "Н",
                    weight: 1
                },
                "17.05.22": {
                    mark: "Н",
                    weight: 1
                },
            },
            avg: {
                mark: "3.0"
            }
        },
        "Окруж. мир": {
            days : {
                "14.05.22": {
                    mark: "Н",
                    weight: 1
                },
                "16.05.22": {
                    mark: "Н",
                    weight: 1
                },
                "17.05.22": {
                    mark: 3,
                    weight: 4,
                    type: "Самостоятельная работа"
                },
            },
            avg: {
                mark: "3.0"
            }
        }
};

export default function journalReducer(state = initialState, action) {
    switch(action.type) {
        case CHANGE_JOURNAL:
            return {
                    ...state,
                    [action.payload.jourId]: action.payload.jourState
                };
        default:
            return state;
    }
}
import {
    CHANGE_ZVONKI,
    CHANGE_ZVONKI_DEL,
    CHANGE_ZVONKI_DEL_L0,
    CHANGE_ZVONKI_L1,
    CHANGE_ZVONKI_SMENA
} from '../../actions';

const initialState = {
        0 : {
            name: "1 смена",
            lessons: {
                0: "8.00-8.45",
                1: "8.50-9.35",
                2: "9.45-10.30",
                3: "10.40-11.25",
                4: "11.30-12.15",
                5: "12.20-13.05",
                6: "13.10-13.55"
            }
        },
        1 : {
            name: "2 смена",
            lessons: {
                0: "13.10-13.55",
                1: "14.00-14.45",
                2: "14.55-15.40",
                3: "15.50-16.35",
                4: "16.40-17.25",
                5: "17.30-18.15",
                6: "18.20-19.05"
            }
        }
    };

export default function zvonkiReducer(state = initialState, action) {
    let fd = {...state};
    switch(action.type) {
        case CHANGE_ZVONKI:
            if(!fd[action.payload.l0]){
                fd[action.payload.l0] = {};
            }
            if(!fd[action.payload.l0][action.payload.l1]){
                fd[action.payload.l0][action.payload.l1] = {};
            }
            fd[action.payload.l0][action.payload.l1][action.payload.l2] = action.payload.state;
            return fd;
        case CHANGE_ZVONKI_SMENA:
            fd[action.payload.l0] = action.payload.state;
            return fd;
        case CHANGE_ZVONKI_L1:
            if(!fd[action.payload.l0]){
                fd[action.payload.l0] = {};
            }
            fd[action.payload.l0][action.payload.l1] = action.payload.state;
            return fd;
        case CHANGE_ZVONKI_DEL:
            delete fd[action.payload.l0][action.payload.l1][action.payload.l2];
            return fd;
        case CHANGE_ZVONKI_DEL_L0:
            delete fd[action.payload.l0];
            return fd;
        default:
            return state;
    }
}
import {CHANGE_MARKS} from '../../actions';

const initialState = {
        namePers: [
            "I", "II", "III", "IV"
        ],
        pers: {
            "Англ. яз.": {
                per: {
                    "I": 5,
                    "II": 4,
                    "III": 2,
                    "IV": 5
                },
                year: 5,
                itog: 5
            },
            "Русский яз.": {
                per: {
                    "I": 5,
                    "II": 4,
                    "III": 3,
                    "IV": 5
                },
                year: 5,
                itog: 5
            },
            "Математика": {
                per: {
                    "I": 5,
                    "II": 4,
                    "III": 2,
                    "IV": 5
                },
                year: 3,
                itog: 5
            },
            "Окруж. мир": {
                per: {
                    "I": 5,
                    "II": 4,
                    "III": 2,
                    "IV": 5
                },
                year: 5,
                itog: 4
            }
        }
};

export default function marksReducer(state = initialState, action) {
    switch(action.type) {
        case CHANGE_MARKS:
            return {
                    ...state,
                    [action.payload.markId]: action.payload.markState
                };
        default:
            return state;
    }
}
.button {
    user-select: none;
    background: #c14503;
    border: unset;
    border-radius: 0.6vmax;
    color: #FFFFFF;
    cursor: pointer;
    text-align: center;
    font-size: 2vw;
    font-weight: bold;
    text-shadow: 2px 2px 2px black;
    box-shadow: inset 0 -5px 2px #FFFFFF33;
    padding: 1.5vmax 1.5vmax;
    align-items: center;
    display: flex;
    width: fit-content;
    /*margin-top: 9px;*/
}

.button:hover {
    text-shadow: 0 0 0;
    box-shadow: 0 0 5px 5px #B8860B, inset 0 -50px 2px #FFFFFF33;
}

.button:active {
    text-shadow: 0 0 0;
    box-shadow: 0 0 10px 10px #B8860B, inset 0 -50px 2px #FFFFFF33;
}

.button[data-enable="0"] {
    pointer-events: none;
    opacity: 0.4;
}

.button[data-mod="1"]{
    padding-block: 0.5vmax;
}

.button[data-mod="2"]{
    padding-block: 0.5vmax;
    font-size: 2vmin;
    font-weight: normal;
}
import React, {useEffect, useRef} from "react";
import {Helmet} from "react-helmet-async";
import tutorCSS from './tutor.module.css';
import {useDispatch, useSelector} from "react-redux";
import {states, themes} from "../../store/selector";
import {useParams} from "react-router-dom"
import kizo1 from "../../media/tutor/kids/izo1.png";
import kizo2 from "../../media/tutor/kids/izo2.png";
import kizo3 from "../../media/tutor/kids/izo3.png";
import kizo4 from "../../media/tutor/kids/izo4.png";
import kizo5 from "../../media/tutor/kids/izo5.png";
import kizo6 from "../../media/tutor/kids/izo6.png";
import kizo7 from "../../media/tutor/kids/izo7.png";
import kizo8 from "../../media/tutor/kids/izo8.png";
import kizo9 from "../../media/tutor/kids/izo9.png";
import kizo10 from "../../media/tutor/kids/izo10.png";
import kizo11 from "../../media/tutor/kids/izo11.png";
import kizo12 from "../../media/tutor/kids/izo12.png";
import kizo13 from "../../media/tutor/kids/izo13.png";
import kizo14 from "../../media/tutor/kids/izo14.png";
import kizo15 from "../../media/tutor/kids/izo15.png";
import kizo16 from "../../media/tutor/kids/izo16.png";
import kizo17 from "../../media/tutor/kids/izo17.png";
import kizo18 from "../../media/tutor/kids/izo18.png";
import kizo19 from "../../media/tutor/kids/izo19.png";
import pizo1 from "../../media/tutor/parents/izo1.png";
import tizo1 from "../../media/tutor/teachers/tizo1.png";
import tizo2 from "../../media/tutor/teachers/tizo2.png";
import tizo3 from "../../media/tutor/teachers/tizo3.png";
import tizo4 from "../../media/tutor/teachers/tizo4.png";
import tizo5 from "../../media/tutor/teachers/tizo5.png";
import tizo6 from "../../media/tutor/teachers/tizo6.png";
import tizo7 from "../../media/tutor/teachers/tizo7.png";
import tizo8 from "../../media/tutor/teachers/tizo8.png";
import tizo9 from "../../media/tutor/teachers/tizo9.png";
import hizo1 from "../../media/tutor/hteachers/izo1.png";
import hizo2 from "../../media/tutor/hteachers/izo2.png";
import hizo3 from "../../media/tutor/hteachers/izo3.png";
import hizo4 from "../../media/tutor/hteachers/izo4.png";
import hizo5 from "../../media/tutor/hteachers/izo5.png";
import hizo6 from "../../media/tutor/hteachers/izo6.png";
import hizo7 from "../../media/tutor/hteachers/izo7.png";
import hizo8 from "../../media/tutor/hteachers/izo8.png";
import hizo9 from "../../media/tutor/hteachers/izo9.png";
import hizo10 from "../../media/tutor/hteachers/izo10.png";
import hizo11 from "../../media/tutor/hteachers/izo11.png";
import hizo12 from "../../media/tutor/hteachers/izo12.png";
import hizo13 from "../../media/tutor/hteachers/izo13.png";
import hizo14 from "../../media/tutor/hteachers/izo14.png";
import hizo15 from "../../media/tutor/hteachers/izo15.png";
import hizo16 from "../../media/tutor/hteachers/izo16.png";
import hizo17 from "../../media/tutor/hteachers/izo17.png";
import hizo18 from "../../media/tutor/hteachers/izo18.png";
import hizo19 from "../../media/tutor/hteachers/izo19.png";
import hizo20 from "../../media/tutor/hteachers/izo20.png";
import hizo21 from "../../media/tutor/hteachers/izo21.png";
import hizo22 from "../../media/tutor/hteachers/izo22.png";
import hizo23 from "../../media/tutor/hteachers/izo23.png";
import hizo24 from "../../media/tutor/hteachers/izo24.png";
import hizo25 from "../../media/tutor/hteachers/izo25.png";
import hizo26 from "../../media/tutor/hteachers/izo26.png";
import hizo27 from "../../media/tutor/hteachers/izo27.png";
import hizo28 from "../../media/tutor/hteachers/izo28.png";
import hizo29 from "../../media/tutor/hteachers/izo29.png";
import hizo30 from "../../media/tutor/hteachers/izo30.png";
import hizo31 from "../../media/tutor/hteachers/izo31.png";
import hizo32 from "../../media/tutor/hteachers/izo32.png";
import hizo33 from "../../media/tutor/hteachers/izo33.png";
import hizo34 from "../../media/tutor/hteachers/izo34.png";
import hizo35 from "../../media/tutor/hteachers/izo35.png";
import hizo36 from "../../media/tutor/hteachers/izo36.png";
import {eventSource, send, setActived} from "../main/Main";
import knopka from "../../media/dnevnik/knopka.png";
import Request from "./request/Request";

let dispatch, ev, timid, scrolling, cState, zag, endSod, CWSel, type;
scrolling = false;
zag = {
    "kid": {
        name: "Обучающимся",
        link: 7,
        role: 0
    },
    "par": {
        name: "Родителям",
        link: 6,
        role: 1
    },
    "tea": {
        name: "Педагогам",
        link: 5,
        role: 2
    },
    "sch": {
        name: "Школам",
        link: 4,
        role: 3
    }
};

function getAdminYO() {
    return (
        <div className={tutorCSS.nav_iZag+" "+tutorCSS.nav_i+" admYO"}>
            <div className={tutorCSS.zag} id={tutorCSS.nav_i}>
                Администрирование УО
            </div>
            <div className={tutorCSS.block}>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Пользование
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Страница "Администрирование УО" разделена на 3 подстранички: "Расписание звонков" и "Периоды
                    обучения" и "Дисциплины".
                    <br/>Для администрации учебного заведения все разделы поддаются редактированию.
                    {getImg(hizo27, 'Страница "Расписание звонков" с ролью администратора УО')}
                    {getImg(hizo28, 'Пример страницы без роли администратора УО')}
                </div>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Расписание звонков
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Добавление/изменение интервалов и смен происходит примерно по одному принципу. Поэтому рассмотрим
                    только один пример. Также возможно удалять как интервалы, так и смены.
                    {getImg(hizo27, 'Расписание звонков')}
                    Для изменения необходимо нажать на иконку с карандашём, в случае с добавлением, нажать на
                    соответствующую кнопку. После нажатия откроется меню редактирования, где можно ввести значение и
                    подтвердить изменение или же выйти из формы изменения/добавления поля.
                    <br/>Ограничение: недопустимы пустые поля.
                    {getImg(hizo29, 'Форма редактирования описания')}
                </div>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Периоды обучения
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Удалять возможно только период целиком.
                    {getImg(hizo30, 'Страница "Периоды обучения"')}
                    Для изменения необходимо нажать на иконку с карандашём. После нажатия откроется меню редактирования,
                    где можно ввести значение и подтвердить изменение или же выйти из формы изменения поля.
                    <br/>Ограничение: недопустимы пустые поля.
                    {getImg(hizo31, 'Форма редактирования названия учебного периода')}
                    В случае с добавлением, нажать на соответствующую кнопку. После нажатия откроется меню
                    редактирования, где можно ввести значение и подтвердить изменение или же выйти из формы
                    добавления поля.
                    <br/>Ограничение: необходимо заполнить все поля.
                    {getImg(hizo32, 'Форма добавления периода')}
                </div>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Дисциплины
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Удалять возможно только урок целиком.
                    {getImg(hizo33, 'Страница "Дисциплины"')}
                    Для изменения необходимо нажать на иконку с карандашём. После нажатия откроется меню редактирования,
                    где можно ввести значение и подтвердить изменение или же выйти из формы изменения поля.
                    <br/>Ограничение: недопустимы пустые поля.
                    {getImg(hizo34, 'Форма редактирования названия дисциплины')}
                    В случае с добавлением, нажать на соответствующую кнопку. После нажатия откроется меню
                    редактирования, где можно ввести значение и подтвердить изменение или же выйти из формы
                    добавления поля.
                    <br/>Ограничение: необходимо заполнить все поля.
                    {getImg(hizo35, 'Форма добавления урока')}
                    Выбор педагога возможен из существующих.
                    {getImg(hizo36, 'Выбор педагога к уроку')}
                </div>
            </div>
        </div>
    )
}

function getNews() {
    return (
        <div className={tutorCSS.nav_iZag+" "+tutorCSS.nav_i+" news"}>
            <div className={tutorCSS.zag} id={tutorCSS.nav_i}>
                Объявления
            </div>
            <div className={tutorCSS.block}>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Пользование
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Страница "Объявления" разделена на 2 подстранички: "Объявления портала" и "Объявления учебной
                    организации".
                    <br/>У администрации учебного заведения имеется возможность редактировать информацию в
                    "Объявления учебной организации".
                    {getImg(hizo1, 'Страница "Объявления учебной организации" с ролью администратора УО')}
                    {getImg(hizo4, 'Пример страницы без роли администратора УО')}
                </div>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Добавление новости
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Для добавления новости необходимо нажать на соответствующую кнопочку.
                    <br/>Откроется шаблон для создания новости. В нём есть возможность изменения заголовка, текста,
                    даты и при необходимости изображения. Можно закрыть шаблон создания новости или подтвердить
                    публикацию новости из заполненного шаблона.
                    {getImg(hizo2, 'Появление шаблона для создания новости')}
                    Для изменения необходимо нажать на иконку с карандашём рядом с любой интересующей вас структурой.
                    После нажатия откроется меню редактирования, где можно ввести значение и подтвердить изменение или
                    же выйти из формы изменения поля.
                    <br/>Ограничение: недопустимы пустые поля.
                    {getImg(hizo3, 'Форма изменения поля')}
                </div>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Изменение новости
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Имеется возможность изменения заголовка, текста, даты и при необходимости изменения или удаления
                    изображения. Можно удалить новость.
                    {getImg(hizo1, 'Пример редактируемой новости')}
                    Для изменения необходимо нажать на иконку с карандашём рядом с любой интересующей вас структурой.
                    После нажатия откроется меню редактирования, где можно ввести значение и подтвердить изменение или
                    же выйти из формы изменения поля.
                    <br/>Ограничение: недопустимы пустые поля.
                    {getImg(hizo3, 'Форма изменения поля')}
                </div>
            </div>
        </div>
    )
}

function getContacts() {
    return (
        <div className={tutorCSS.nav_iZag+" "+tutorCSS.nav_i+" cont"}>
            <div className={tutorCSS.zag} id={tutorCSS.nav_i}>
                Контакты
            </div>
            <div className={tutorCSS.block}>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Пользование
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Страница "Контакты" разделена на 2 подстранички: "Контакты портала" и "Контакты учебной
                    организации".
                    <br/>У администрации учебного заведения имеется возможность редактировать информацию в
                    "Контакты учебной организации".
                    {getImg(hizo5, 'Страница "Контакты учебной организации" с ролью администратора УО')}
                    {getImg(hizo6, 'Пример страницы без роли администратора УО')}
                </div>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Изменение контактов
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Имеется возможность изменения текста в обоих разделах и при необходимости измененить или удалить
                    изображение.
                    {getImg(hizo5, 'Пример изменяемых контактов')}
                    Для изменения необходимо нажать на иконку с карандашём рядом с любой интересующей вас структурой.
                    После нажатия откроется меню редактирования, где можно ввести значение и подтвердить изменение или
                    же выйти из формы изменения поля.
                    <br/>Ограничение: недопустимы пустые поля.
                    {getImg(hizo7, 'Форма редактирования описания')}
                </div>
            </div>
        </div>
    )
}

function getSettings() {
    return (
        <div className={tutorCSS.nav_iZag+" "+tutorCSS.nav_i+" set"}>
            <div className={tutorCSS.zag} id={tutorCSS.nav_i}>
                Настройки
            </div>
            <div className={tutorCSS.block}>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Пользование
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Настройки доступны только авторизованным пользователям. На данной
                    страничке можно изменять настройки уведомлений, пароль, аватар,
                    секретную фразу.
                    {getImg(kizo19, 'Страница "Настройки"')}
                </div>
            </div>
        </div>
    )
}

function getProfil() {
    return (
        <div className={tutorCSS.nav_iZag+" "+tutorCSS.nav_i+" prof"}>
            <div className={tutorCSS.zag} id={tutorCSS.nav_i}>
                Профиль
            </div>
            <div className={tutorCSS.block}>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Пользование
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    На этой страничке представленны все данные пользователя. Если вы
                    открыли свой профиль то у вас будет возможность дополнить/изменить
                    информацию.
                    {getImg(kizo18, 'Страница "Профиль"')}
                </div>
            </div>
        </div>
    )
}

function getZhur() {
    return (
        <div className={tutorCSS.nav_iZag+" "+tutorCSS.nav_i+" jur"}>
            <div className={tutorCSS.zag} id={tutorCSS.nav_i}>
                Журнал
            </div>
            <div className={tutorCSS.block}>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Пользование
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Над оценками показываются даты.<br/>
                    Если оценка имеет вес более 1, то показывается рядом с оценкой.<br/>
                    Также если оценок много, то для удобства появляется возможность скроллить.<br/>
                    Для работы с журналом необходимо выбрать нужную оценку и тип. После чего,
                    нажать на интересующую клетку.
                    {getImg(tizo1, 'Страница "Журнал"')}
                </div>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Смена групп
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    При необходимости, можно переключаться между группами.<br/>
                    Не уместившиеся группы можно найти в меню-троеточии, наведя на него мышь.
                    {getImg(tizo2, 'Не уместившиеся группы')}
                </div>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Смена предмета
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Можно переключаться между дисциплинами.<br/>
                    Наведя мышь, на текущую дисциплину, откроется меню переключения.
                    {getImg(tizo3, 'Иллюстрация меню переключения')}
                </div>
                <div className={tutorCSS.nav_i + " " + tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Выбор оценки
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    По умолчанию, включён режим "без оценки", чтобы обойтись без случайностей.<br/>
                    Переключение режимов происходит путём нажатия на интересующие кнопки.<br/>
                    Ограничение: "Н" нельзя ставить в итоговые оценки.
                    {getImg(tizo4, 'Выбор оценки')}
                </div>
                <div className={tutorCSS.nav_i + " " + tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Выбор типа оценки
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    По умолчанию, включён режим "ластик", он позволяет стереть описание оценки
                    и установить обычный вес оценки(1).<br/>
                    Переключение режимов происходит путём нажатия на интересующие кнопки.<br/>
                    Возможно удалить существущий тип оценки, при помощи нажатия на красный крест.<br/>
                    Ограничение: на "Н" нельзя устанавливать тип оценки, нельзя установить тип на итоговую оценку.
                    {getImg(tizo5, 'Выбор типа оценки')}
                    Также возможно изменить существующий тип оценки или добавить новый.<br/>
                    Нажатием на зелёную галочку, произойдёт подтверждение изменений. Если она
                    не активна, значит не соблюдается какое-то из ограничений.<br/>
                    Красный крест, отменит изменения и выключит режим редактирования.<br/>
                    Ограничение: в поле "тип" можно вписать только символы латиницы, кириллицы,
                    пробел и цифры, в поле "вес" можно вписать только цифры, поля должны быть
                    не пустыми.
                    {getImg(tizo6, 'Изменение типа оценки')}
                    {getImg(tizo7, 'Иллюстрация добавления типа оценки')}
                </div>
                <div className={tutorCSS.nav_i + " " + tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Домашние задания
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Возможно изменять или добавлять новые домашние задания.<br/>
                    Для этого необходимо нажать на синий карандаш в соответствующем поле.
                    {getImg(tizo8, 'Домашние задания')}
                    Функционал редактирования домашних заданий аналогичен редактированиию типов
                    оценок. В дополнение к нему, имеется поддержка многострочности.<br/>
                    Ограничение: поле должно быть не пустым.
                    {getImg(tizo9, 'Редактирование домашних заданий')}
                </div>
            </div>
        </div>
    )
}

function getAnalytic() {
    return (
        <div className={tutorCSS.nav_iZag+" "+tutorCSS.nav_i+" ana"}>
            <div className={tutorCSS.zag} id={tutorCSS.nav_i}>
                Аналитика
            </div>
            <div className={tutorCSS.block}>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Журнал
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Над оценками показываются даты. Изначально показываются даты первой
                    дисциплины по списку. Чтобы показать числа выставления оценок других
                    дисциплин, необходимо навести мышь на линию интересующего вас предмета.<br/>
                    Если оценка имеет вес более 1, то показывается рядом с оценкой.<br/>
                    Если педагог уточнил тип оценки, то ниже журнала, появится соответствующая
                    запись, с датой и типом оценки.<br/>
                    Также если оценок много, то для удобства появляется возможность скроллить.
                    {getImg(kizo17, 'Страница "Журнал"')}
                </div>
            </div>
        </div>
    )
}

function getDnevnik() {
    return (
        <div className={tutorCSS.nav_iZag+" "+tutorCSS.nav_i+" dnev"}>
            <div className={tutorCSS.zag} id={tutorCSS.nav_i}>
                Дневник
            </div>
            <div className={tutorCSS.block}>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Пользование
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Для того чтобы перейти к прошедшей неделе, необходимо проскроллить вверх, а
                    для перехода к следующей, сделать наоборот.<br/>
                    При наличии типа оценки, к примеру "Тест", можно навести мышь на оценку и
                    тип проявится.<br/>
                    При весе оценки больше одного, вес показывается.<br/>
                    Границы недель обозначены.<br/>
                    При достаточном отдалении от текущей недели появляется кнопка для
                    мгновенного
                    перехода к текущей неделе.
                    {getImg(kizo16, 'Страница "Дневник"')}
                </div>
            </div>
        </div>
    )
}

function getPeople() {
    return (
        <div className={tutorCSS.nav_iZag+" "+tutorCSS.nav_i+" pep"}>
            <div className={tutorCSS.zag} id={tutorCSS.nav_i}>
                Люди
            </div>
            <div className={tutorCSS.block}>
                {zag[type].role == 3 && <>
                    <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                        Пользование
                    </div>
                    <div className={tutorCSS.blockOtv} data-act="0">
                        Страница "Люди" разделена на 5 подстраниц.
                        <br/>У администрации учебного заведения имеется возможность редактировать информацию в
                        "Педагоги", "Завучи", "Обучающиеся", "Родители".
                        {getImg(hizo8, 'Страница "Педагоги" с ролью администратора УО')}
                        {getImg(hizo9, 'Пример страницы c ролью ученика')}
                    </div>
                </>}
                {zag[type].role == 3 && <>
                    <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                        Взаимодействие с ссылкой-приглашением
                    </div>
                    <div className={tutorCSS.blockOtv} data-act="0">
                        Если у ссылки истёк срок и она была удалена или ещё не создана как в примере.
                        {getImg(hizo8, 'Не созданные ссылки')}
                        То необходимо нажать на значок обновления рядом с полем для ссылки.
                        {getImg(hizo13, 'Ссылка появилась')}
                        И ссылка появится в поле, откуда её можно скопировать при помощи выделения или сделать это при
                        помощи кнопки копирования, которая расположена рядом с кнопкой обновления.
                        {getImg(hizo14, 'Копирование ссылки при помощи кнопки')}
                        Срок действия ссылки - 30 дней.
                    </div>
                </>}
                {zag[type].role == 3 && <>
                    <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                        Взаимодействие с группами
                    </div>
                    <div className={tutorCSS.blockOtv} data-act="0">
                        <div className={tutorCSS.block}>
                            <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                                Пользование
                            </div>
                            <div className={tutorCSS.blockOtv} data-act="0">
                                Взаимодействие с группами можно встречать на разных страницах. О возможностях. Можно выбирать,
                                удалять или же переименовывать группы.
                                {getImg(hizo16, 'Пример страницы с группами')}
                                Если групп слишком много, то часть из них перемещается в меню с троеточием.
                                {getImg(hizo23, 'Меню с остальными группами')}
                                Выбирая группу из меню она переместится в "доступное" место.
                                {getImg(hizo24, 'Группа на видном месте')}
                            </div>
                            <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                                Добавление группы
                            </div>
                            <div className={tutorCSS.blockOtv} data-act="0">
                                Для добавления группы необходимо нажать на соответствующую кнопочку.
                                <br/>Откроется шаблон для регистрации группы в системе. В нём есть возможность
                                изменения названия. Можно закрыть шаблон регистрирования или подтвердить создание группы.
                                <br/>Ограничение: недопустимы пустые поля, разрешены только латиница и цифры, а также
                                символы ".", "-".
                                {getImg(hizo25, 'Появление шаблона для добавления группы')}
                            </div>
                            <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                                Изменение группы
                            </div>
                            <div className={tutorCSS.blockOtv} data-act="0">
                                Есть возможность удалить или изменить группу.
                                Для изменения необходимо нажать на иконку с карандашём. После нажатия откроется меню
                                редактирования, где можно ввести значение и подтвердить изменение или же выйти из формы
                                изменения поля.
                                <br/>Ограничение: недопустимы пустые поля, разрешены только латиница и цифры, а также
                                символы ".", "-".
                                {getImg(hizo26, 'Форма изменения названия')}
                            </div>
                        </div>
                    </div>
                </>}
                {zag[type].role == 3 && <>
                    <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                        Педагоги
                    </div>
                    <div className={tutorCSS.blockOtv} data-act="0">
                        Преподаватели делятся на "Нераспределённые педагоги" и "Педагоги" по принципу участия в
                        расписании учебного заведения.
                        <div className={tutorCSS.block}>
                            <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                                Добавление педагогов
                            </div>
                            <div className={tutorCSS.blockOtv} data-act="0">
                                Для добавления педагогов необходимо нажать на соответствующую кнопочку.
                                <br/>Откроется шаблон для регистрации педагога в системе. В нём есть возможность
                                изменения ФИО. Можно закрыть шаблон регистрирования или подтвердить создание аккаунта.
                                {getImg(hizo10, 'Появление шаблона для добавления педагога')}
                                Для изменения необходимо нажать на иконку с карандашём. После нажатия откроется меню
                                редактирования, где можно ввести значение и подтвердить изменение или же выйти из формы
                                изменения поля.
                                <br/>Ограничение: недопустимы пустые поля.
                                {getImg(hizo11, 'Форма изменения поля')}
                            </div>
                            <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                                Внесение изменений в аккаунте педагога
                            </div>
                            <div className={tutorCSS.blockOtv} data-act="0">
                                Имеется возможность изменения ФИО. Также можно удалить аккаунт.
                                {getImg(hizo8, 'Пример страницы с возможностью редактирования ФИО')}
                                Для изменения необходимо нажать на иконку с карандашём рядом с любой интересующей вас
                                структурой. После нажатия откроется меню редактирования, где можно ввести значение и
                                подтвердить изменение или же выйти из формы изменения поля.
                                <br/>Ограничение: недопустимы пустые поля.
                                {getImg(hizo12, 'Форма изменения ФИО')}
                            </div>
                        </div>
                    </div>
                </>}
                {zag[type].role == 3 && <>
                    <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                        "Завучи", "Обучающиеся"
                    </div>
                    <div className={tutorCSS.blockOtv} data-act="0">
                        Управление аналогично странице "Педагоги", с единственным отличием, возможностью
                        управлять/выбирать нужную группу.
                        {getImg(hizo8, 'Страница "Педагоги"')}
                        {getImg(hizo15, 'Страница "Завучи"')}
                        {getImg(hizo16, 'Страница "Обучающиеся"')}
                    </div>
                </>}
                {zag[type].role == 3 && <>
                    <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                        Родители
                    </div>
                    <div className={tutorCSS.blockOtv} data-act="0">
                        <div className={tutorCSS.block}>
                            <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                                Пользование
                            </div>
                            <div className={tutorCSS.blockOtv} data-act="0">
                                Страница имеет название "Родители" условно, для узнаваемости. Можно регистрировать не только
                                родителей, но и любых представителей ученика.
                                {getImg(hizo17, 'Страница "Родители" с ролью администратора УО')}
                                {getImg(hizo18, 'Страница "Родители" с ролью ученика')}
                            </div><div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                                Добавление представителей ученику без представителей.
                            </div>
                            <div className={tutorCSS.blockOtv} data-act="0">
                                Для возможности добавления представителей необходимо нажать на соответствующую кнопочку.
                                <br/>Откроется шаблон для регистрации представителей для ученика в системе. Для
                                регистрации необходимо выбрать ученика, в списке будут только ученики без
                                представителей. Можно закрыть шаблон регистрирования или подтвердить
                                создание аккаунтов.
                                Ограничение: подтверждение станет доступно только после добавление хотя бы одного
                                представителя.
                                {getImg(hizo19, 'Появление шаблона для выбора ученика')}
                                Далее необходимо добавить представителя. Это делается при помощи кнопки "Добавить
                                представителя". Можно закрыть шаблон регистрирования или подтвердить
                                создание аккаунта.
                                {getImg(hizo20, 'Появление шаблона для добавления представителя')}
                                Для изменения необходимо нажать на иконку с карандашём. После нажатия откроется меню
                                редактирования, где можно ввести значение и подтвердить изменение или же выйти из формы
                                изменения поля.
                                <br/>Ограничение: недопустимы пустые поля.
                                {getImg(hizo21, 'Форма изменения поля')}
                            </div>
                            <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                                Внесение изменений в представителях учеников
                            </div>
                            <div className={tutorCSS.blockOtv} data-act="0">
                                Имеется возможность изменения ФИО уже имеющихся представителей или добавить новых.
                                Принцип добавления такой же как и при регистрации ученику без представителей.
                                Также можно удалить аккаунты представителей.
                                {getImg(hizo17, 'Пример страницы с возможностью редактирования')}
                                Для изменения необходимо нажать на иконку с карандашём рядом с любой интересующей вас
                                структурой. После нажатия откроется меню редактирования, где можно ввести значение и
                                подтвердить изменение или же выйти из формы изменения поля.
                                <br/>Ограничение: недопустимы пустые поля.
                                {getImg(hizo22, 'Форма изменения ФИО')}
                            </div>
                        </div>
                    </div>
                </>}
                {zag[type].role < 2 && <>
                    <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                        Педагоги
                    </div>
                    <div className={tutorCSS.blockOtv} data-act="0">
                        На данной странице учителя из списка "Мои педагоги" участвуют в вашем
                        обучении, остальные обозначены как "Другие педагоги".<br/>Нажав на иконку
                        профиля, можно перейти в профиль преподавателя.
                        {getImg(kizo11, 'Страница "Педагоги"')}
                    </div>
                </>}
                {zag[type].role < 2 && <>
                    <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                        Педагоги
                    </div>
                    <div className={tutorCSS.blockOtv} data-act="0">
                        На данной странице учителя из списка "Мои педагоги" участвуют в вашем
                        обучении, остальные обозначены как "Другие педагоги".<br/>Нажав на иконку
                        профиля, можно перейти в профиль преподавателя.
                        {getImg(kizo11, 'Страница "Педагоги"')}
                    </div>
                </>}
                {zag[type].role < 2 && <>
                    <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                        Завучи
                    </div>
                    <div className={tutorCSS.blockOtv} data-act="0">
                        Нажав на иконку профиля, можно перейти в профиль завуча.
                        {getImg(kizo12, 'Страница "Завучи"')}
                    </div>
                </>}
                {zag[type].role == 0 && <>
                    <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                        Одноклассники
                    </div>
                    <div className={tutorCSS.blockOtv} data-act="0">
                        Нажав на иконку профиля, можно перейти в профиль одноклассника.
                        {getImg(kizo13, 'Страница "Одноклассники"')}
                    </div>
                </>}
                {zag[type].role == 0 && <>
                    <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                        Родители
                    </div>
                    <div className={tutorCSS.blockOtv} data-act="0">
                        На этой страничке представлены одноклассники и их родители.<br/>
                        Нажав на иконку профиля, можно перейти в профиль родителя.
                        {getImg(kizo14, 'Страница "Родители"')}
                    </div>
                </>}
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Администраторы портала
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Нажав на иконку профиля, можно перейти в профиль администратора портала.
                    {getImg(kizo15, 'Страница "Администраторы портала"')}
                </div>
            </div>
        </div>
    )
}

function getGenRec() {
    return (
        <div className={tutorCSS.nav_iZag+" "+tutorCSS.nav_i+" rek"}>
            <div className={tutorCSS.zag} id={tutorCSS.nav_i}>
                Общие рекомендации
            </div>
            <div className={tutorCSS.block}>
                Рекомендации будут в виде рубрики "Вопрос-ответ", а также определённых тем.<br/>
                Возможно информация будет дополняться по мере появления вопросов у пользователей.
                <br/>(Блоки с вопросами скрываются и раскрываются нажатием на них)
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Как зарегистрироваться?
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Возможность регистрации закрыта для посторонних.
                    {getImg(kizo2, "Регистрация скрыта")}
                    Вам должна придти ссылка-приглашение от учебного центра.
                    {getImg(kizo1, "Пример ссылки")}
                    Перейдите по ссылке. Если ссылка, которую вам отправили верна,
                    то вам откроется возможность зарегистрировать новый аккаунт.
                    {getImg(kizo3, "Регистрация доступна")}
                    Также имеется возможность добавить роль к существующему аккаунту. Для этого
                    необходимо быть авторизованным и перейти по ссылке-приглашению.
                    {getImg(kizo4, "Роль успешно добавлена")}
                    В случае ошибки в приглашении или истечении его срока действия будет
                    показано оповещение...
                    {getImg(kizo5, "Ошибка в оповещении")}
                    Для успешной регистрации необходимо заполнить все поля и
                    принять условия соглашения. Разрешены только латиница и
                    цифры.
                    {getImg(kizo6, "Регистрация")}
                </div>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Восстановление пароля
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Чтобы была возможность восстановления пароля, необходимо установить
                    секретную фразу. Для этого нужно перейти в настройки, нажать на
                    "Добавить секретную фразу". Заполнить соответствующее поле и
                    подтвердить.
                    {getImg(kizo8, "Установка секретной фразы")}
                    В случае, если вы прошли данную процедуру, то необходимо перейти к странице
                    авторизации и зайти при помощи текста-ссылки "Забыли пароль?" в интерфейс
                    восстановления пароля.
                    {getImg(kizo2, "Переход к интерфейсу")}
                    Для успешной смены пароля необходимо заполнить все поля. Для всех полей
                    кроме "Секретной фразы" разрешены только латинница и цифры.
                    {getImg(kizo7, "Интерфейс смены пароля")}
                </div>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Настройка темы
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    По умолчанию тема устанавливается с учётом настроек вашей системы. Но вы
                    всегда можете воспользоваться соответствующим переключателем в левом нижнем
                    углу страницы.
                    {getImg(kizo9, "Настройка темы")}
                </div>
                <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                    Смена роли
                </div>
                <div className={tutorCSS.blockOtv} data-act="0">
                    Если у вас на аккаунте имеется какая-то другая роль, то есть возможность
                    переключаться между ними.<br/>
                    При наведении мыши на ваш логин, раскроется меню с соответствующей кнопкой.
                    {getImg(kizo10, "Смена роли")}
                </div>
                {zag[type].role == 1 && <>
                    <div className={tutorCSS.zag1} id={tutorCSS.nav_i} onClick={visB}>
                        Смена наблюдаемого учащегося
                    </div>
                    <div className={tutorCSS.blockOtv} data-act="0">
                        Если вы имеете несколько детей, то у вас есть возможность наблюдать за
                        всеми, переключаясь между ними.
                        {getImg(pizo1, "Смена наблюдаемого учащегося")}
                    </div>
                </>}
            </div>
        </div>
    )
}

function getImg(src, descr) {
    return (
        <div className={tutorCSS.blockImg}>
            <img src={src} alt=""/>
            {descr}
        </div>
    )
}

function tim() {
    if (scrolling) {
        scrolling = false;
        knop();
    }
}

function getZag(text, link, b) {
    return (
        <div className={tutorCSS.zag1} id={tutorCSS.nav_i} ref={b ? (el)=>endSod=el : undefined} onClick={() => goTo(link)}>
            {text}
        </div>
    )
}

function onCon(e) {
    send({
        type: "TUTOR",
        uuid: cState.uuid
    }, 'POST', "auth", "infCon");
}

function goTo(id) {
    document.querySelector("." + id).scrollIntoView(true);
    let sinc = window.scrollY - Math.round(window.innerHeight / 100) * 7;
    window.scrollTo(0, sinc);
    knop();
}

function knop() {
    let x = endSod.getBoundingClientRect().top + Math.round(window.innerHeight / 100) * 7;
    CWSel.setAttribute("data-act", x > 0 ? "0" : "1");
}

function visB(e) {
    let el = e.target.nextElementSibling;
    el.setAttribute("data-act", el.getAttribute("data-act") == "0" ? "1" : "0");
}

export function Tutor() {
    const themeState = useSelector(themes);
    let { typ } = useParams();
    cState = useSelector(states);
    dispatch = useDispatch();
    if(!type || type != typ) type = typ;
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount Tutor.jsx");
        window.onwheel = (e) => {
            if(!scrolling) {
                scrolling = true;
                ev = e;
                timid = setTimeout(tim,1000);
            }
        };
        knop();
        setActived(zag[type].link);
        eventSource.addEventListener('connect', onCon, false);
        return function() {
            dispatch = undefined;
            window.onwheel = undefined;
            clearTimeout(timid);
            eventSource.removeEventListener('connect', onCon);
            console.log("I was triggered during componentWillUnmount Tutor.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate Tutor.jsx');
    });
    return (
        <div className={tutorCSS.AppHeader}>
            <Helmet>
                <title>{zag[type].name}</title>
            </Helmet>
            <div className={tutorCSS.blockPro}>
                <div className={tutorCSS.pro}>
                    {(!cState.auth && zag[type].role == 3) && <Request/>}
                    <div className={tutorCSS.nav_iZag+" "+tutorCSS.nav_i}>
                        <div className={tutorCSS.zag+" soder"} id={tutorCSS.nav_i}>
                            Содержание
                        </div>
                        <div className={tutorCSS.block}>
                            Описание: заголовки ниже кликабельны. Нажимая на них можно перейти к интересующему вас
                            разделу. При дальнейшем скролле, когда содержание полностью скроется появится кнопочка
                            возвращающая к содержанию.
                            {(!cState.auth && zag[type].role == 3) && getZag("Заявка на подключение", "req")}
                            {getZag("Общие рекомендации", "rek")}
                            {zag[type].role == 3 && getZag("Объявления", "news")}
                            {zag[type].role == 3 && getZag("Контакты", "cont")}
                            {getZag("Люди", "pep")}
                            {zag[type].role < 2 && getZag("Дневник", "dnev")}
                            {zag[type].role < 2 && getZag("Аналитика", "ana")}
                            {zag[type].role == 2 && getZag("Журнал", "jur")}
                            {zag[type].role == 3 && getZag("Администрирование УО", "admYO")}
                            {getZag("Профиль", "prof")}
                            {getZag("Настройки", "set", true)}
                        </div>
                    </div>
                    {getGenRec()}
                    {zag[type].role == 3 && getNews()}
                    {zag[type].role == 3 && getContacts()}
                    {getPeople()}
                    {zag[type].role < 2 && getDnevnik()}
                    {zag[type].role < 2 && getAnalytic()}
                    {zag[type].role == 2 && getZhur()}
                    {zag[type].role == 3 && getAdminYO()}
                    {getProfil()}
                    {getSettings()}
                </div>
            </div>
            <div className={tutorCSS.GotCW} ref={(el)=>CWSel = el}>
                <div>
                    <img src={knopka} alt="" onClick={() => goTo("soder")}/>
                    <div className={tutorCSS.GotCWText}>
                        Перейти к содержанию
                    </div>
                </div>
            </div>
        </div>
    )
}
export default Tutor;
.AppHeader {
	width: 100%;
	display: flex;
	position: relative;
	top: 7vh;
	height: 93vh;
}

.nav_iZag{
	border: 1px solid var(--bcV1);
	border-radius: 5px;
	margin-left: 0.5vw;
	margin-block: 0.5vw;
	padding-left: 0.5vw;
	padding-block: 0.5vw;
}

.blockPro{
	margin: auto;
	width: 75%;
}

.pro{
	background-color: var(--bgcV1);
	padding: 20px;
	margin-block: 5vh;
	border-radius: 5px;
	transition: background-color 1s ease;
}

.nav_i{
	cursor: default;
	color: var(--cV1);
	font-size: 1vw;
	text-shadow: 1px 1px 3px var(--shdV1);
	font-weight: 500;
}

#nav_i:hover{
	color: #00ff00 !important;
	text-shadow: 0 0 2vw #66ff66;
}

.zag, .zag1{
	-webkit-transition: color 1s ease;
	-o-transition: color 1s ease;
	transition: color 1s ease;
	transition-property: color, text-shadow, border-color;
	backface-visibility: hidden;
	perspective: 1000px;
}

.zag1{
	text-decoration: underline;
	font-weight: bold;
	cursor: pointer;
}

.zag{
	font-size: 1.25vw;
	margin-bottom: 0.5vw;
}

.block{
    margin-inline: 2vw;
}

.blockOtv{
	margin-inline: 2vw;
}

.blockOtv[data-act="0"]{
	display: none;
}

.blockImg{
	text-align: center;
	margin-block: 1vw;
}

.blockImg > img{
	max-width: 75%;
	display: block;
	margin: auto;
}

.GotCW{
	position: fixed;
	width: 12vw;
	top: 0;
	bottom: 0;
	display: flex;
	align-items: center;
	text-align: center;
}

.GotCW img{
	width: 8vw;
	cursor: pointer;
}

.GotCWText{
	color: var(--cV2);
	font-size: 2vmax;
	font-weight: bold;
	text-shadow: 2px 2px 2px #000;
	transition: color 1s ease;
}

.GotCW[data-act="0"]{
	display: none;
}
import React, {useEffect, useRef} from "react";
import requestCSS from './request.module.css';
import tutorCSS from '../tutor.module.css';
import {useDispatch, useSelector} from "react-redux";
import {states, themes} from "../../../store/selector";
import button from "../../button.module.css";
import {CHANGE_EVENT, changeEvents} from "../../../store/actions";
import {send} from "../../main/Main";

let dispatch, cState, inps;
inps = {};

function addReq(e) {
    send({
        text: inps.inpnnt_,
        title: inps.inpnet_,
        dat: new Date().toLocaleString("ru", {day:"2-digit", month: "2-digit", year:"numeric"})
    }, 'POST', "requests", "addReq")
        .then(data => {
            if(data.error == false){
                let title, text;
                title = "Внимание!";
                text = "Данные отправлены. В течении дня мы с вами свяжемся. До связи:3";
                dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, 10));
            }
        });
}

function chStatB(e) {
    let el = e.target;
    inps[el.id] = !el.validity.patternMismatch || !el.validity.typeMismatch ? el.value : false;
    if (inps[el.id]) {
        el.setAttribute("data-mod", '0');
    } else {
        el.setAttribute("data-mod", '1');
    }
    let but = el.parentElement.parentElement.querySelector("."+button.button);
    if(but) {
        but.setAttribute("data-enable", +(inps.inpnnt_ && inps.inpnet_));
    }
}

function ele (x, par) {
    if(!inps[par]) inps[par] = x;
}

export function Request() {
    const themeState = useSelector(themes);
    cState = useSelector(states);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount Request.jsx");
        for(let el of document.querySelectorAll(" *[id^='inpn']")){
            chStatB({target: el}, inps);
        }
        return function() {
            console.log("I was triggered during componentWillUnmount Request.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate Request.jsx');
    });
    return (
        <div className={tutorCSS.nav_iZag+" "+tutorCSS.nav_i+" req"}>
            <div className={tutorCSS.zag} id={tutorCSS.nav_i}>
                Заявка на подключение
            </div>
            <div className={tutorCSS.block}>
                Вы не имеете аккаунта и ваша школа ещё не подключена к нашей системе?
                <br/>Заполните форму ниже оставив ваши контактные данные и адрес электронной почты, мы с вами
                свяжемся.
                <div className={requestCSS.blockInp}>
                    <div className={requestCSS.preinf}>
                        ФИО:
                    </div>
                    <input className={requestCSS.inp} id={"inpnnt_"} placeholder={"Фамилия Имя Отчество"} onChange={chStatB} type="text"/>
                    {ele(false, "inpnnt_")}
                </div>
                <div className={requestCSS.blockInp}>
                    <div className={requestCSS.preinf}>
                        E-Mail:
                    </div>
                    <input className={requestCSS.inp} id={"inpnet_"} placeholder={"example@gmail.com"} onChange={chStatB} type="email"/>
                    {ele(false, "inpnet_")}
                </div>
                <div className={button.button} data-mod="2" onClick={addReq}>
                    Отправить!
                </div>
            </div>
        </div>
    )
}
export default Request;
.preinf{
    display: inline-block;
    vertical-align: middle;
    font-size: 1.25vw;
    margin-inline: 0.2vw;
    color: var(--cV1);
    text-shadow: 1px 1px 3px var(--shdV1);
    white-space: nowrap;
}

.blockInp{
    height: 4vh;
    margin-block: 1vh;
}

.inp {
    border-radius: 0.5vmax;
    background-color: #4d4d4d;
    user-select: none;
    box-shadow: 0 1px #FFFFFFAA, inset 0 2px 2px #000000AA;
    border: 1px solid var(--bcV2);
    position: relative;
    transition: background-color 1s ease;
    transition-property: background-color, border-color;
    vertical-align: middle;
    display: inline-block;
    font-size: 1.25vw;
    padding: 0 0 0 1vw;
    margin-left: 1vw;
}

.inp[data-mod='1']{
    animation: but ease 1s;
    outline: solid red;
}

@keyframes but {
    0%{transform: rotateZ(-2deg);}
    50%{transform: rotateZ(2deg);}
    100%{transform: rotateZ(0deg);}
}
import React, {useEffect, useRef} from "react";
import warn from '../../media/warning.png';
import ls1 from '../../media/ls-icon1.png';
import ls2 from '../../media/ls-icon2.png';
import ls3 from '../../media/ls-icon3.png';
import ran from '../../media/random.png';
import pedagog from '../../media/start/pedagog.jpg';
import roditelyam from '../../media/start/roditelyam.jpg';
import zavuch from '../../media/start/zavuch.jpg';
import detyam from '../../media/start/detyam.jpeg';
import left from '../../media/start/left.png';
import sta from '../../media/start/start.gif';
import start from './start.module.css';
import button from "../button.module.css";
import {Helmet} from "react-helmet-async";
import CheckBox from "../other/checkBox/CheckBox";
import {useDispatch, useSelector} from "react-redux";
import {checkbox, indicators, states} from "../../store/selector";
import {
    CHANGE_DIALOG,
    CHANGE_EVENTS_CLEAR,
    CHANGE_STATE,
    CHANGE_STATE_GL,
    changeDialog,
    changeEvents,
    changeInd,
    changeIndNext,
    changeIndPrev,
    changeState
} from "../../store/actions";
import {addEvent, eventSource, remEvent, send, setActived} from "../main/Main";
import {Link, useNavigate, useParams} from "react-router-dom"
import ErrFound from "../other/error/ErrFound";

let dispatch, warns, timer, indicInfo, cState, navigate, checkBoxInfo, elem, els, textYesInvNR, textNoInv, blocks, licField;
elem = {regbut: undefined, vxbut: undefined, g_id: undefined, logv: undefined, pasv: undefined, logz: undefined};
textNoInv = "Приглашение неверно или недействительно.";
textYesInvNR = "К действующему аккаунту была добавлена новая роль.";
els = {logz: 0, secz: 0, pasnz: 0, paspz: 0, logv: 0, pasv: 0, logr: 0, pasr: 0, ppasr: 0};
warns = {pat: undefined, empt: undefined, pow: undefined};
blocks = [
    {
        name: "Завучам",
        text: "Немного информации об портале для завучей",
        img: zavuch,
        link: "tutor/sch"
    },
    {
        name: "Педагогам",
        text: "Немного информации об портале для педагогов",
        img: pedagog,
        link: "tutor/tea"
    },
    {
        name: "Родителям",
        text: "Немного информации об портале для родителей",
        img: roditelyam,
        link: "tutor/par"
    },
    {
        name: "Детям",
        text: "Немного информации об портале для детей",
        img: detyam,
        link: "tutor/kid"
    }
];
licField = {
    obj: <div className={start.lic_text}>
        {getLic()}
    </div>,
    buts: {
        0 : {
            text: "Прочитал"
        }
    }
}

function gen_pas(e){
    let par, password, symbols;
    par = e.target.parentElement.parentElement;
    password = "";
    symbols = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    for (var i = 0; i < 15; i++){
        password += symbols.charAt(Math.floor(Math.random() * symbols.length));
    }
    for(let el of par.querySelectorAll("." + start.pass+"[pattern]")){
        el.value = password;
        inpchr({target:el});
        par.classList.contains(start.reg) ? chStatRb({target:el}) : chStatZb({target:el});
    }
    navigator.clipboard.writeText(password);
    addEvent(`Сгенерирован пароль: ${password}. Он скопирован в буфер обмена`, 10);
}

function rego(e, props, code){
    let par, ch;
    par = e.target.parentElement.parentElement;
    ch = par.querySelector("input[checked]");
    console.log(props);
    if(els.pasr && els.logr){
        send({
            login: els.logr,
            par: els.pasr,
            ico: ch.value,
            mod: props.mod,
            code: code
        }, 'POST', "auth/reg")
            .then(data => {
                if(data.error == false){
                    onvxod({target: e.target.parentElement});
                    navigate("/");
                    if(warns.logR != undefined) {
                        remEvent(warns.logR);
                        warns.logR = undefined;
                    }
                } else if(data.error == 2){
                    addEvent(textNoInv, 10);
                } else if(warns.logR == undefined && props.mod == undefined){
                    warns.logR = addEvent("Логин занят, попробуйте изменить");
                }
            });
    }
}

function vxo(){
    send({
        uuid: cState.uuid,
        login: elem.logv.value,
        password: elem.pasv.value,
        notifToken: localStorage.getItem("notifToken"),
        permis: Notification.permission == "granted"
    }, 'POST', "auth/auth")
        .then(data => {
            if(data.error == false && data.body.auth){
                console.log(data);
                dispatch(changeState(CHANGE_STATE_GL, undefined, data.body));
            } else {
                addEvent("Неверный логин или пароль", 10);
            }
        });
}

function inpchr(e){
    var el = e.target;
    if(!e.inputType) return;
    if (el.validity.patternMismatch || el.value.length == 0) {
        el.setAttribute("data-mod", '1');
        if(el.value.length == 0){
            if(warns.empt == undefined) {
                warns.empt = addEvent("Необходимо заполнить поле");
                if(warns.pat != undefined) {
                    remEvent(warns.pat);
                    warns.pat = undefined;
                }
            }
        } else if(warns.pat == undefined) {
            warns.pat = addEvent("Допустимы только латиница или цифры");
            if(warns.empt != undefined) {
                remEvent(warns.empt);
                warns.empt = undefined;
            }
        }
    } else {
        el.setAttribute("data-mod", '0');
        if(warns.pat != undefined) {
            remEvent(warns.pat);
            warns.pat = undefined;
        } else if(warns.empt != undefined) {
            remEvent(warns.empt);
            warns.empt = undefined;
        }
    }
}

function checkCaps(event) {
    var caps = event.getModifierState && event.getModifierState('CapsLock');
    for(let el of document.getElementsByClassName(start.warn)){
        el.style.opacity = caps ? "1" : "0";
    }
}

function onvxod(e){
    let par = e.target.parentElement.parentElement;
    par.setAttribute('data-mod', 0);
    par = par.parentElement;
    par.setAttribute('data-mod', 0);
    dispatch(changeEvents(CHANGE_EVENTS_CLEAR));
    warns = {};
}

function onreg(e){
    let par = e.target.parentElement.parentElement;
    par.setAttribute('data-mod', 1);
    par = par.parentElement;
    par.setAttribute('data-mod', 1);
    dispatch(changeEvents(CHANGE_EVENTS_CLEAR));
    warns = {};
}

function reset_timer() {
    clearInterval(timer);
    timer = setInterval(function() { dispatch(changeIndNext(indicInfo.actived)); }, 5000);
}

function chStatRb(e) {
    let el = e.target;
    els[el.id] = el.validity.patternMismatch ? false : el.value;
    els.regb = (checkBoxInfo.checkbox_lic && els.logr && els.pasr && els.ppasr && (els.pasr == els.ppasr)) || false;
    elem.regbut.setAttribute("data-enable", +els.regb);
    if(els.pasr == els.ppasr) {
        if(warns.pow != undefined) {
            remEvent(warns.pow);
            warns.pow = undefined;
        }
    } else if (warns.pow == undefined) {
        warns.pow = addEvent("Повторите новый пароль верно");
    }
}

function chStatVb(e, x) {
    let el = e.target;
    els[el.id] = x ? true : (el ? !el.validity.patternMismatch && el.value.length != 0 : false);
    elem.vxbut.setAttribute("data-enable", +((els.logv & els.pasv) || false));
}

function chStatAv(e) {
    e.target.firstChild.checked = true;
}

function onRec(e) {
    send({
        login: els.logz,
        secFr: els.secz,
        par : els.pasnz
    }, 'POST', "auth/chPass")
        .then(data => {
            if(data.error == false){
                onSmvz(e);
                if(warns.chPass != undefined) {
                    remEvent(warns.chPass);
                    warns.chPass = undefined;
                }
            } else if(warns.chPass == undefined){
                warns.chPass = addEvent("Неверен логин или секретная фраза");
            }
        });
}

function onSmvz(e) {
    let par, mod;
    par = e.target.parentElement.parentElement.parentElement;
    mod = par.getAttribute('data-mod') == '1';
    par.setAttribute("data-mod", mod ? "0" : "1");
    if(mod && warns.pow != undefined) {
        remEvent(warns.pow);
        warns.pow = undefined;
    }
}

function chStatZb(e) {
    let el = e.target;
    els[el.id] = el.validity.patternMismatch ? false : el.value;
    document.querySelector("#butL").setAttribute("data-enable", +((els.logz && els.secz && els.pasnz && els.paspz && (els.pasnz == els.paspz)) || false));
    if(els.pasnz == els.paspz) {
        if(warns.pow != undefined) {
            remEvent(warns.pow);
            warns.pow = undefined;
        }
    } else if (warns.pow == undefined) {
        warns.pow = addEvent("Повторите новый пароль верно");
    }
}

function unsetText(e) {
    for(let el of e.target.getElementsByClassName(start.g_block_text)){
        el.innerHTML = el.getAttribute("data-text");
    }
}

function onsetText(e) {
    for(let el of e.target.getElementsByClassName(start.g_block_text)){
        el.innerHTML = el.getAttribute("data-textm");
    }
}

function onCon(e) {
    send({
        type: "AUTH",
        uuid: cState.uuid
    }, 'POST', "auth/infCon");
}

export function Start(props) {
    checkBoxInfo = useSelector(checkbox);
    const { code } = useParams();
    navigate = useNavigate();
    cState = useSelector(states);
    indicInfo = useSelector(indicators);
    const isFirstUpdate = useRef(true);
    els.regb = (checkBoxInfo.checkbox_lic && els.logr && els.pasr && els.ppasr && (els.pasr == els.ppasr)) || false;
    dispatch = useDispatch();
    useEffect(() => {
        console.log("I was triggered during componentDidMount Start.jsx")
        chStatVb({target: elem.logv});
        chStatZb({target: elem.logz});
        if(props.mod == "inv" && code){
            send({
                code: code,
                uuid: cState.uuid
            }, 'POST', "auth/checkInvCode")
                .then(data => {
                    if(data.error == false){
                        if(cState.auth) {
                            dispatch(changeState(CHANGE_STATE, "reaYes", true));
                        } else {
                            addEvent("Поздравляем, приглашение активно! Вам разрешено зарегистроваться.", 10);
                        }
                    } else {
                        dispatch(changeState(CHANGE_STATE, "invErr", true));
                    }
                });
        }
        if(props.mod == "rea" && code){
            send({
                code: code
            }, 'POST', "auth/checkReaCode")
                .then(data => {
                    if(data.error == false){
                        addEvent("Аккаунт существует. Открыта возможность перерегистрации.", 10);
                    } else {
                        dispatch(changeState(CHANGE_STATE, "invErr", true));
                    }
                });
        }
        console.log(code);
        elem.g_id.addEventListener('mouseenter', onsetText);
        elem.g_id.addEventListener('mouseleave', unsetText);
        dispatch(changeInd(0, reset_timer));
        setActived(0);
        window.addEventListener('click', checkCaps);
        window.addEventListener('keydown', checkCaps);
        for(let el of document.querySelectorAll("input[placeholder]")){
            el.addEventListener('input', inpchr);
        }
        eventSource.addEventListener('connect', onCon, false);
        return function() {
            clearInterval(timer);
            console.log("I was triggered during componentWillUnmount Start.jsx");
            dispatch(changeEvents(CHANGE_EVENTS_CLEAR));
            warns = {};
            eventSource.removeEventListener('connect', onCon);
            dispatch = undefined;
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        reset_timer();
        console.log('componentDidUpdate Start.jsx');
    });
    return (
        <div className={start.AppHeader}>
            <Helmet>
                <title>Главная</title>
            </Helmet>
            <div className={start.block}>
                {cState.invErr &&
                    <ErrFound text={textNoInv}/>
                }
                {cState.reaYes &&
                    <ErrFound text={textYesInvNR}/>
                }
                {(cState.invErr || cState.reaYes) ? undefined : <>
                    <div className={start.g}>
                        <div className={start.gH} ref={el=>elem.g_id=el}>
                            {blocks.map((param, i) =>
                                <Link className={start.g_block} to={param.link} key={i} data-act={indicInfo.actived == i ? "1" : "0"}>
                                    <img src={param.img} className={start.pic_g} alt=""/>
                                    <div className={start.g_block_text} data-text={param.name} data-textm={param.text}>
                                        {param.name}
                                    </div>
                                </Link>
                            )}
                            <div className={start.g_block_shad}/>
                            <img src={left} className={start.pic_l} alt="" onClick={() => {dispatch(changeIndPrev(indicInfo.actived, reset_timer))}}/>
                            <img src={left} className={start.pic_r} alt="" onClick={() => {dispatch(changeIndNext(indicInfo.actived, reset_timer))}}/>
                            <div className={start.indic}>
                                <div className={start.indic_bl} id="ind_0" data-act={!indicInfo.actived ? "1" : "0"} onClick={() => {dispatch(changeInd(0, reset_timer))}}/>
                                <div className={start.indic_bl} id="ind_1" data-act={indicInfo.actived == 1 ? "1" : "0"} onClick={() => {dispatch(changeInd(1, reset_timer))}}/>
                                <div className={start.indic_bl} id="ind_2" data-act={indicInfo.actived == 2 ? "1" : "0"} onClick={() => {dispatch(changeInd(2, reset_timer))}}/>
                                <div className={start.indic_bl} id="ind_3" data-act={indicInfo.actived == 3 ? "1" : "0"} onClick={() => {dispatch(changeInd(3, reset_timer))}}/>
                            </div>
                        </div>
                    </div>
                    <div className={start.startimg}>
                        <div className={start.startimgText}>
                            Для авторизации проскролльте или нажмите на стрелки
                        </div>
                        <img src={sta} alt="" onClick={() => {window.scrollTo(0, window.innerHeight)}}/>
                    </div>
                </>}
            </div>
            {(cState.invErr || cState.reaYes) ? undefined :
                <div className={start.block}>
                    <div className={start.posit} data-mod="0">
                        <div className={start.help} data-enable={code ? '1' : '0'} data-mod="0">
                            <div className={start.r}>
                                Нет аккаунта? <span className={start.helpa} onClick={onreg}>Регистрация!</span>
                            </div>
                            <div className={start.v}>
                                Есть аккаунт? <span className={start.helpa} onClick={onvxod}>Вход!</span>
                            </div>
                        </div>
                        <form className={start.vxod} data-mod="0">
                            <div className={start.vxo}>
                                <input className={start.login} type="login" onChange={chStatVb}
                                       ref={el => elem.logv = el} placeholder="Логин" id="logv" autoComplete="username"
                                       required pattern="^[a-zA-Z0-9]+$"/>
                                <div className={start.grid_cont_l}>
                                    <input className={start.pass} type="password" onChange={chStatVb}
                                           ref={el => elem.pasv = el} placeholder="Пароль" id="pasv"
                                           autoComplete="current-password" required pattern="^[a-zA-Z0-9]+$"/>
                                    <div className={start.nav_i + " " + start.zabpar} id={start.nav_i} onClick={onSmvz}>
                                        Забыли пароль?
                                    </div>
                                    <div className={start.warn + ' ' + start.warnc} id="warnc">
                                        <img src={warn} className={start.warnimg} alt=""/>
                                        Включён Caps Lock!
                                    </div>
                                    <div className={button.button + ' ' + start.marg} ref={el => elem.vxbut = el}
                                         onClick={vxo}>
                                        ВОЙТИ!
                                    </div>
                                </div>
                            </div>
                            <div className={start.zab}>
                                <input className={start.login + ' ' + start.inpz} ref={el => elem.logz = el} type="text"
                                       onChange={chStatZb} placeholder="Логин" id="logz" autoComplete="username"
                                       required pattern="^[a-zA-Z0-9]+$"/>
                                <input className={start.pass + ' ' + start.inpz} type="password" onChange={chStatZb}
                                       placeholder="Секретная фраза" id="secz"/>
                                <div className={start.blockPas}>
                                    <input className={start.pass + ' ' + start.inpz} type="password" onChange={chStatZb}
                                           placeholder="Новый пароль" id="pasnz" autoComplete="new-password" required
                                           pattern="^[a-zA-Z0-9]+$"/>
                                    <div className={button.button + ' ' + start.marg} data-mod='2' onClick={gen_pas}>
                                        <img src={ran} className={start.randimg} alt=""/>
                                        Случайный пароль
                                    </div>
                                </div>
                                <div className={start.grid_cont_l}>
                                    <input className={start.pass + ' ' + start.inpz} type="password" onChange={chStatZb}
                                           placeholder="Подтвердите пароль" id="paspz" autoComplete="new-password"
                                           required pattern="^[a-zA-Z0-9]+$"/>
                                    <span className={start.warn + ' ' + start.marg} id="warncz">
                                        <img src={warn} className={start.warnimg} alt=""/>
                                        Включён Caps Lock!
                                    </span>
                                    <div className={button.button + ' ' + start.butZab} id="butL" data-mod="1"
                                         onClick={onRec}>
                                        Подтвердить
                                    </div>
                                    <div className={button.button + ' ' + start.butZab + ' ' + start.marg} id="butR"
                                         data-mod="1" onClick={onSmvz}>
                                        Вспомнил пароль
                                    </div>
                                </div>
                            </div>
                        </form>
                        <form className={start.reg} id="reg">
                            <div className={start.logo}>
                                <p style={{marginBlock: "0.5vw"}}>Выберите аватар для профиля:</p>
                                <div className={start.blockAva} onClick={chStatAv}>
                                    <input id="ch1" name="ico" type="radio" value="1" defaultChecked/>
                                    <img className={start.logoi} src={ls1} alt=""/>
                                </div>
                                <div className={start.blockAva} onClick={chStatAv}>
                                    <input id="ch2" name="ico" type="radio" value="2"/>
                                    <img className={start.logoi} src={ls2} alt=""/>
                                </div>
                                <div className={start.blockAva} onClick={chStatAv}>
                                    <input id="ch3" name="ico" type="radio" value="3"/>
                                    <img className={start.logoi} src={ls3} alt=""/>
                                </div>
                            </div>
                            <input className={start.login} type="text" placeholder="Логин" onChange={chStatRb} id="logr"
                                   autoComplete="username" required pattern="^[a-zA-Z0-9]+$"/>
                            <input className={start.pass} type="password" placeholder="Пароль" onChange={chStatRb}
                                   id="pasr" autoComplete="new-password" required pattern="^[a-zA-Z0-9]+$"/>
                            <div className={start.grid_cont_r}>
                                <input className={start.pass} type="password" placeholder="Повторите пароль"
                                       onChange={chStatRb} id="ppasr" autoComplete="new-password" required
                                       pattern="^[a-zA-Z0-9]+$"/>
                                <div className={button.button + ' ' + start.marg} data-mod='2' onClick={gen_pas}>
                                    <img src={ran} className={start.randimg} alt=""/>
                                    Случайный пароль
                                </div>
                                <div className={start.lic}>
                                    <CheckBox text={"Принимаю условия "} checkbox_id={"checkbox_lic"}/>
                                    <span className={start.url}
                                          onClick={() => dispatch(changeDialog(CHANGE_DIALOG, licField))}>
                                        соглашения
                                    </span>
                                    <div className={start.warn} id="warncr">
                                        <img src={warn} className={start.warnimg} alt=""/>
                                        Включён Caps Lock!
                                    </div>
                                </div>
                                <div data-enable={+els.regb} className={button.button + ' ' + start.marg}
                                     ref={el => elem.regbut = el} onClick={e=>rego(e, props, code)}>
                                    ЗАРЕГИСТРИРОВАТЬСЯ!
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            }
        </div>
    )
}
export default Start;

function getLic(){
    return (
        <pre style={{whiteSpace: "pre-wrap", wordBreak: "break-all", width: "95%"}}>
			<br/><strong>ЛИЦЕНЗИОННЫЙ ДОГОВОР</strong>
			<br/><strong>о предоставлении права на использование программного обеспечения на условиях простой (неисключительной) лицензии</strong>
			<br/>Настоящий лицензионный договор заключен между ООО "Умные решения" (далее — «Правообладатель»), в лице Генерального директора Лапина Сергея Владимировича, действующего на основании Устава, с одной стороны, и  _______________(далее - « Клиент») в лице ____________________ действующего на основании __________________________, с другой стороны, далее совместно именуемыми «Стороны». Стороны договорились о нижеследующем:
			<br/>
			<br/><strong>1.     ПРЕДМЕТ ДОГОВОРА</strong>
			<br/>Стороны договорились о нижеследующем:
			<br/>1.1. Правообладатель предоставляет Клиенту право на использование программного обеспечения «Система управления сайтами UMNI.RESH» на условиях простой (неисключительной) лицензии (далее - «Система») способами, указанными ниже. Состав и наименования редакций Систем, права на использование которых предоставляются (передаются) Клиенту, указывается в счёте, выставляемом Правообладателем на основании предварительной заявки Клиента, а также в Актах передачи прав.
			<br/>1.2. За предоставляемые по настоящему Договору права Клиент обязуется уплачивать Правообладателю вознаграждение, размер которого определяется в соответствии с действующим ценами Правообладателя, размещёнными на странице сайта Правообладателя в сети Интернет <a href="http://www.umni-resh.ru/editions/">http://www.umni-resh.ru/editions/</a>, и указывается в счёте, выставляемом Правообладателем на основании предварительной заявки Клиента.
			<br/>1.3. Клиенту предоставляются права на использование Системы следующими способами:
			<ul>
				<li>* право на воспроизведение на Хостинговой площадке с целью инсталляции, копирования и запуска в соответствии с сопроводительной документацией;</li>
				<li>* право на переработку - в той степени, в которой эта возможность описана в  документации к Системе;</li>
				<li>* право на доведение до всеобщего сведения - в той степени, в которой это необходимо для функционирования Сайта, созданного на основании  Системы.</li>
			</ul>
			<br/>
			<br/><strong>2. ОСНОВНЫЕ ПОНЯТИЯ, ИСПОЛЬЗУЕМЫЕ В ДОГОВОРЕ</strong><span style={{fontSize: "12px"}}> </span>
			<br/>2.1. «Система управления сайтами UMNI.RESH» - программное обеспечение для управления сайтами в сети Интернет. Обеспечивает создание сайта, управление информацией, дизайном, регистрацию пользователей. Администраторы сайта при помощи веб-интерфейса могут изменять содержимое сайта, его настройки и оформление, получать отчёты о работе сайта и сообщения, переданные пользователями. Функциональность UMNI.RESH может быть расширена путём установки дополнительных модулей.
			<br/>2.2. Клиент — физическое или юридическое лицо, приобретающее право использования Системы в пределах, установленных настоящим договором и редакцией Системы, условия использования которых размещены на странице в сети Интернет <a href="http://www.umni-resh.ru/editions/">http://www.umni-resh.ru/editions/</a>, для создания собственного сайта.
			<br/>2.3. Лицензия (лицензионный договор) — соглашение между Правообладателем и Клиентом об использовании Системы Клиентом в пределах, установленных договором. По настоящему договору право использования Системы предоставляется Клиенту на условиях простой (неисключительной) лицензии с сохранением за Правообладателем права выдачи лицензий другим лицам.
			<br/>2.4. Лицензионный ключ - используется Правообладателем для инициализации, защиты и предотвращения Системы от незаконного использования, содержит информацию о редакции Системы, о расширениях Системы, о модулях Системы, о шаблонах дизайнов, используемых доменных именах и электронной почте Клиента, правомерно владеющего лицензией на использование Системы.
			<br/>2.5. Сайт в сети Интернет - совокупность экземпляра системы и иной информации, содержащейся в базе данных сайта, составляющая информационную систему, доступ к которой обеспечивается посредством сети Интернет по доменным именам и (или) по сетевым адресам, позволяющим идентифицировать сайты в сети Интернет.
			<br/>2.6. IP-адрес (сетевой адрес) — уникальный идентификатор оборудования в сети передачи данных, подключённого к сети Интернет, используемый в том числе для числовой идентификации пользователей и ресурсов в сети.
			<br/>2.7. Доменное имя — символьный идентификатор, предназначенный для адресации сайтов в сети Интернет в целях обеспечения доступа к информации, размещённой в сети Интернет.
			<br/>2.8. Владелец сайта в сети Интернет - лицо, самостоятельно и по своему усмотрению определяющее порядок использования сайта в сети Интернет, в том числе порядок размещения информации на таком сайте.
			<br/>2.9. Хостинговая площадка — аппаратно программный комплекс (сервер или группа серверов) для размещения и поддержания сайта в сети Интернет, принадлежащий Клиенту или предоставляемый третьей стороной (провайдером хостинга).
			<br/>2.10. Расширенная коммерческая лицензия (далее - РКЛ) — право использования обновлений (версий, новых релизов) Системы, направленных на улучшение Системы. Данный тип лицензии имеет срочный характер и предоставляет Клиенту возможность получать обновления Системы,  выпущенные Правообладателем в период действия РКЛ.
			<br/>2.11. Основной сайт Правообладателя — <a href="http://www.umniresh.ru/">http://www.umni-resh.ru</a>.
			<br/>
			<br/><strong>3. ПРАВА И ОБЯЗАННОСТИ СТОРОН</strong><span style={{fontSize: "12px"}}> </span>
			<br/>3.1. Права и обязанности Правообладателя.
			<br/>3.1.1. Правообладатель предоставляет Клиенту право использования экземпляра Системы и обновлений  к ней в течение одного первого года использования Системы на условиях 100% предоплаты указанного в счете вознаграждения. Право на получение обновлений начиная со второго года обусловлено приобретением  РКЛ.
			<br/>3.1.2. Правообладатель использует лицензионный ключ для инициализации, защиты и предотвращения Системы от незаконного использования.
			<br/>3.1.3. По одной лицензии Клиенту предоставляется право создать один собственный Сайт на базе одного экземпляра Системы. Создание большего числа Сайтов возможно только при условии приобретения дополнительных экземпляров Системы. Исключение из этого условия составляет только использование специальной функции Системы (наличие функции зависит от редакции), которая позволяет Клиенту на одной хостинговой площадке с использованием единого IP-адреса создавать и устанавливать неограниченное число сайтов с разными доменными именами исключительно для собственного использования. В этом случае для всех сайтов используется единая база данных.
			<br/>3.2. Права и обязанности Клиента.
			<br/>3.2.1. Клиент обладает правом создавать на основе приобретаемой лицензии и с использованием Системы сайты в сети Интернет в пределах, установленных настоящим договором и выбранной Клиентом редакцией Системы.
			<br/>3.2.2. Клиент обладает правом использовать логотипы Системы при проведении рекламных акций, размещении информации о Системе на своём сайте, с указанием на исключительные права Правообладателя на Систему.
			<br/>3.2.3. Профессиональные консультации по работе Системы предоставляются Службой Заботы Умные решения без взимания дополнительной оплаты в течении одного года с момента приобретения права использования Системы,  далее - при условии приобретения Клиентом РКЛ на соответствующий срок.
			<br/>3.2.4. Клиент вправе вносить изменения в правомерно приобретённый экземпляр Системы исключительно в целях функционирования Системы на конкретных технических средствах Клиента или под управлением конкретных программ Клиента (адаптация) в пределах, указанных на странице <a href="http://docs.umni-resh.ru/system_modification_rules/">http://docs.umni-resh.ru/system_modification_rules/</a>, а также исправлять явные ошибки Системы.
			<br/>
			<br/><strong>4. СОХРАНИЕ ПРАВ И СОБСТВЕННОСТИ</strong>
			<br/>4.1. Клиент может использовать Систему только в пределах тех прав и теми способами, которые предусмотрены настоящим договором. Право использования Системы, прямо не указанное в настоящем договоре, не считается предоставленным Клиенту.
			<br/>4.2. Исключительные права на Систему принадлежат Правообладателю.
			<br/>
			<br/><strong>5. ОГРАНИЧЕНИЕ НА ВСКРЫТИЕ ТЕХНОЛОГИИ И ДЕКОМПИЛЯЦИЮ</strong>
			<br/>5.1.Запрещается вскрывать технологию, расшифровывать, декодировать, производить обратный инжиниринг или декомпилировать систему и любые её компоненты (включая базу данных) за исключением случаев и только в той степени, когда такие действия явно разрешены законодательством, несмотря на наличие в лицензионном соглашении данного ограничения.
			<br/>
			<br/><strong>6. ПЕРЕДАЧА ПРОГРАММНОГО КОДА</strong><span style={{fontSize: "12px"}}> </span>
			<br/>6.1. Передача  Клиенту экземпляра Системы осуществляется путём скачивания с сайта Правообладателя посредством сети Интернет.
			<br/>6.2. Лицензионный ключ для активации Системы передаётся Клиенту путем электронной почты (email) в течении пяти рабочих дней с момента зачисления денежных средств на расчётный счет Правообладателя.
			<br/>6.3. Право на использование Системы считается предоставленным Клиенту с момента получения Клиентом лицензионных ключей от Правообладателя. Предоставление фиксируется в двустороннем Акте передачи прав.
			<br/>6.4. Правообладатель оформляет в двух экземплярах Акт приема-передачи и направляет их Клиенту, который обязан подписать полученные экземпляры Акта приёма-передачи и вернуть один экземпляр Акта Правообладателю в 5-тидневный срок с момента получения, либо в указанный срок представить Правообладателю мотивированные возражения против подписания Акта. В случае неполучения Правообладателем в установленный настоящим пунктом срок мотивированных возражений от Клиента, право использования экземпляров Системы, указанных в таком Акте, считаются предоставленными (переданными) Клиенту надлежащим образом и принятыми им в полном объёме без каких-либо возражений.
			<br/>6.5. Проверка наименования, конфигурации, иных данных, касающихся предоставляемых прав на использование экземпляров Системы, осуществляется Клиентом в период, предоставленных для подписания Акта приёма-передачи. В случае выявления каких-либо несоответствий Клиент направляет Правообладателю соответствующие возражения. В этом случае, моментом передачи прав считается дата урегулирования Правообладателем обоснованных возражений Клиента.
			<br/>6.6. Права на использование  [конкретной переданной редакции и версии] Системы предоставляются на весь срок действия исключительного права.  Предоставление  иных редакций и/или версий Системы может являться предметом иных [основанных на заказах Клиента] сделок сторон.
			<br/>6.7. Клиенту разрешается переносить Систему на другую хостинговую площадку, уведомив Правообладателя в срок не менее, чем за 1 рабочий день.
			<br/>6.8. После переноса Системы на другую хостинговую площадку её следует полностью удалить с исходной хостинговой площадки. Одновременное использование одного экземпляра Системы на различных хостинговых площадках не допускается.
			<br/>6.9. В случае передачи Клиентом Системы (в том числе в составе сайта в сети Интернет, принадлежащего Клиенту) третьим лицам необходимо уведомить Правообладателя в письменном виде с указанием реквизитов нового владельца (наименование и ИНН юридического лица либо ФИО физического лица, e-mail) и приложением заверенной Клиентом копии договора, на основании которого производится такая передача. После этого уведомления, использование Системы Клиентом запрещено.  Новый владелец экземпляра Системы (сайта в сети Интернет, ранее принадлежащего Клиенту) вправе использовать экземпляр Системы в пределах прав, предоставленных настоящим договором.
			<br/>
			<br/><strong>7. РАСТОРЖЕНИЕ ДОГОВОРА</strong>
			<br/>7.1.Без ущерба для каких-либо иных своих прав Правообладатель вправе прекратить действие настоящего договора при несоблюдении Клиентом его положений и условий  путем направления уведомления об одностороннем внесудебном отказе от исполнения договора. При прекращении действия лицензионного договора Клиент обязан уничтожить все имеющиеся у него копии Системы и все её составные части.
			<br/>
			<br/><strong>8. ПОЛНОТА ДОГОВОРА. СТЕПЕНЬ ДЕЙСТВИЯ</strong>
			<br/>8.1.Настоящий договор (включает любые документы, дополняющие или изменяющие настоящий лицензионный договор, сопровождающий систему) составляет полное соглашение между Клиентом и Правообладателем относительно использования системы и заменяет собой все предшествующие или одновременные устные или письменные договоренности, предложения и заверения относительно системы и любых других положений настоящего лицензионного договора. Если какое-либо положение настоящего договора будет признано аннулированным, недействительным, не имеющим юридической силы или незаконным, то остальные положения настоящего лицензионного соглашения сохраняют свою полную силу и действие.
			<br/>8.2.При противоречии условий настоящего договора и условий какого-либо партнерского договора о системе, заключенного между Правообладателем и Клиентом, преимущественное значение имеют условия такого партнерского договора, во всем остальном применяются условия и настоящего соглашения, и такого договора.
			<br/>
			<br/><strong>9. ГАРАНТИЯ</strong>
			<br/>9.1.Система предназначается и предоставляется в качестве системы управления сайтом, в состоянии «как есть» со всеми недостатками, которые она может иметь на момент предоставления. Вы соглашаетесь с тем, что никакая система не свободна от ошибок. При условии наличия у вас действительной лицензии, Правообладатель гарантирует, что:
			<br/>9.1.1. В течение 90 дней с даты получения лицензии на использование системы либо в течение наименьшего срока, допускаемого законодательством, функционирование системы будет в основном соответствовать сопровождающим продукт документам. В случае выявления попыток изменения кода или попыток иного несанкционированного вмешательства в систему, гарантийные и любые иные обязательства Правообладателя аннулируются.
			<br/>9.1.2. Система будет в основном соответствовать описанию, содержащемуся в соответствующих документах, предоставляемых Клиенту Правообладателем, и инженеры по технической поддержке Правообладателя приложат все разумные усилия, проявят разумную заботу и применят профессиональные навыки для разрешения проблемных вопросов. Если система не соответствует настоящей гарантии, Правообладатель, либо осуществит исправление или замену системы, либо вернет сумму уплаченного вознаграждения (если оно перечислялось непосредственно  Правообладателю).
			<br/>9.2.Настоящая гарантия недействительна, если сбой в работе системы возник в результате неосторожности, неправильного обращения или применения. В случае замены, в отношении любого заменяющего продукта гарантия будет действовать в течение периода, оставшегося от изначального гарантийного срока, или в течение 30 дней, в зависимости от того, какой из указанных периодов будет больше. Клиент соглашается с тем, что вышеуказанная гарантия является единственной имеющейся у Клиента гарантией в отношении системы и любых услуг по технической поддержке.
			<br/>9.3.Любое обслуживание проданной системы, в том числе гарантийное, а так же консультирование, устранение неисправностей, техническая поддержка, любая иная помощь Правообладателя, предусмотренная условиями настоящего договора, оказывается, по адресам электронной почты и реквизитам, указанным в настоящем соглашении в соответствии с правилами Правообладателя
			<br/>9.4.Правообладатель не предоставляет на время соответствующих работ (согласно предыдущему пункту) какую-либо временную замену программного обеспечения, либо компьютера.
			<br/>9.5.Правообладатель не производит гарантийных работ, если такие работы обусловлены неудовлетворительной работой программы с иным программным обеспечением, установленным и используемым на компьютере незаконно, без соответствующих и необходимых в соответствии с законом лицензий и разрешений, если компьютер неисправен, либо не соответствует минимальным требованиям, предъявляемым программой к компьютеру.
			<br/>9.6.Правообладатель не несет ответственности за работу программы и отказывает в её гарантийном обслуживании, если она была каким-либо образом изменена (изменены качества, свойства, функции, назначение, структура), способами, не предусмотренными в документации к Системе, а так же, если она была повреждена иным программным обеспечением, в силу свойств такого программного обеспечения, в случае несоответствия аппаратного обеспечения техническим условиям предъявляемым продуктом, а также, если программа была повреждена компьютерным вирусом, иной вредоносной программой, либо повреждена Клиентом или третьими лицами умышленно, равно как и по неосторожности.
			<br/>9.7.Клиент может изменять, добавлять или удалять любые файлы приобретенной программы (включая базу данных) в соответствие с Российским Законодательством об авторском праве. В этом случае Правообладатель не гарантирует бесперебойную работу программы и обновлений.
			<br/>
			<br/><strong>10. ОГРАНИЧЕНИЕ ОТВЕТСТВЕННОСТИ</strong>
			<br/>10.1. В максимальной степени, допускаемой законодательством и за исключением случаев, прямо предусмотренных условиями настоящего договора, Правообладатель не несет ответственность за какие-либо убытки и/или ущерб (в том числе, убытки в связи недополученной коммерческой выгодой, прерыванием коммерческой и производственной деятельности, утратой данных), возникающие в связи с использованием или невозможностью использования Системы. В любом случае ответственность Правообладателя ограничивается суммой, фактически уплаченной Клиентом Правообладателю за пользование Системой. Настоящие ограничения не применяются в отношении тех видов ответственности, которые не могут быть исключены или ограничены в соответствии с законом.
			<br/>10.2. Правообладатель не несёт ответственности ни при каких обстоятельствах за любую упущенную выгоду, ущерб, моральный ущерб, убытки и вред, причинённый кому бы тони было в результате использования Системы, утраты информации и прочего, если не будет доказан умысел Правообладателя в причинении вышеуказанных последствий.
			<br/>10.3. Правообладатель не несёт ответственности ни при каких обстоятельствах за содержание информации, размещаемой Клиентом в Системе. Клиент самостоятельно в полной мере несет ответственность, в том числе перед третьим лицами, за размещаемую и/или передаваемую им информацию с использованием Системы.
			<br/>10.4. При невозможности разрешить спор или претензии, мирным путём, Стороны договорились о подсудности разрешения спора с участием Правообладателя по месту нахождения Правообладателя в порядке, предусмотренном действующим законодательством Российской Федерации.
			<br/>10.5. В случае возникновения у Клиентов вопросов, касающихся настоящего лицензионного договора или иных вопросов в зоне ответственности Правообладателя, следует использовать форму обращения на сайте <a href="http://www.umni-resh.ru/">http://www.umni-resh.ru</a>.
			<br/><strong>11.   РЕКВИЗИТЫ И ПОДПИСИ СТОРОН</strong>
			<br/><span>Правообладатель: </span><strong>ООО "Умные решения"</strong>
			<br/>ИНН/ КПП 7840000361 / 700001001
			<br/>БИК 000030778
			<br/>Р/с: 40702810000540000136
			<br/>в СЕВЕРО-ЗАПАДНЫЙ ФИЛИАЛ ПАО РОСБАНК г. Санкт-Петербург
			<br/>Корр. счет: 30100000100000000778
			<br/>Генеральный директор
			<br/>______________________ С.В. Лапин
		</pre>
    )
}
.AppHeader {
	width: 100%;
	height: 93vh;
	top: 7vh;
	position: relative;
}

.block {
	height: 100%;
	position: relative;
	display: flex;
}

.posit{
	transform-style: preserve-3d;
	width: fit-content;
	text-align: center;
	margin: auto;
}

.help{
	user-select: none;
	color: var(--cV2);
	font-size: 2vmax;
	font-weight: bold;
	text-align: center;
	display: inline-block;
	text-shadow: 2px 2px 2px #000;
	transition: color 1s ease;
}

.help[data-enable='0']{
	pointer-events: none;
	opacity: 0.4;
}

.helpa{
	text-decoration: underline;
	cursor: pointer;
}

.startimg{
	position: absolute;
	bottom: 0;
	left: 0;
	right: 0;
	margin: 0 auto;
	height: 20%;
	cursor: pointer;
	text-align: center;
}

.startimgText{
	color: var(--cV2);
	font-size: 1.5vmax;
	font-weight: bold;
	text-shadow: 2px 2px 2px #000;
	transition: color 1s ease;
}

.g{
	position: relative;
	cursor: pointer;
	top: 5%;
	max-width: 90%;
	max-height: 75%;
	margin-inline: auto;
}

.gH{
	position: relative;
	aspect-ratio: 16/9;
	max-height: 100%;
}

.g_block{
	position: relative;
	display: block;
	width: 100%;
	height: 100%;
}

.g_block[data-act="0"]{
	display: none;
}

.g_block_text{
	position: absolute;
	bottom: 10%;
	left: 10%;
	color: #00ee00;
	font-size: 2vw;
	font-weight: bold;
	text-shadow: 3px 3px 4px #000;
	z-index: 1;
}

.g_block_shad{
	box-shadow: 5vmax 5vmax 10vmax #000000aa inset, -5vmax -5vmax 10vmax #000000aa inset;
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	pointer-events: none;
	border-radius: 10px;
	opacity: 0;
	transition: opacity ease 1s;
}

.pic_g{
	width: 100%;
	height: 100%;
	border-radius: 10px;
}

.pic_l, .pic_r{
	position: absolute;
	top: 0;
	left: 5%;
	bottom: 0;
	margin: auto;
	opacity: 0;
	cursor: pointer;
}

.pic_r{
	left: unset;
	right: 5%;
	transform: rotate(180deg);
}

.gH:hover > .pic_l, .gH:hover > .pic_r, .gH:hover > .g_block_shad{
	opacity: 1;
}

.indic{
	position: absolute;
	bottom: 5%;
	right: 10%;
	display: flex;
	gap: 10px;
}

.indic_bl{
	height: 1vh;
	width: 1vh;
	border-radius: 50%;
	border: 5px solid #777777;
	box-shadow: 2px 2px 5px #000;
	cursor: pointer;
}

.indic_bl[data-act="1"]{
	border-color: #ff9900 !important;
}

.vxod, .reg{
	background-color: var(--bgcV1);
	-webkit-border-radius: 4px;
	border-radius: 4px;
	padding-block: 9px;
	padding-right: 12px;
	margin-top: 3vh;
	margin-bottom: 2vw;
	transition: transform 1s ease;
	transition-property: transform, opacity;
	text-align: initial;
}

.posit[data-mod='0'] > .reg, .posit[data-mod='1'] > .vxod{
	opacity: 0;
	position: absolute;
	pointer-events: none;
	transition: none;
	transform: rotateX(90deg);
	top: 0;
}

.v, .r{
	transition: opacity 1s ease;
}

.help[data-mod='0'] > .v, .help[data-mod='1'] > .r{
	opacity: 0;
	position: absolute;
	pointer-events: none;
	transition: none;
	top: 0;
}

.grid_cont_l, .grid_cont_r{
	display: grid;
	place-items: center;
	grid-template: repeat(2,auto) / repeat(2,auto);
	justify-items: start;
}

.lic{
	color: var(--cV1);
	cursor: pointer;
	font-size: 1vw;
	font-weight: bold;
	margin: 0 1.5vmax;
	transition: color 1s ease;
}

.lic_text{
	margin: 10px;
	overflow: overlay;
	height: 85%;
	text-align: left;
}

.url{
	cursor: pointer;
	text-decoration: underline;
	font-size: 1.1vw;
	vertical-align: middle;
	margin-left: 5px;
}

.login, .pass {
	border-radius: 0.5vmax;
	display: block;
	background-color: #4d4d4d;
	user-select: none;
	box-shadow: 0 1px #FFFFFFAA, inset 0 2px 2px #000000AA;
	border: 1px solid var(--bcV2);
	font-size: 2.2vmax;
	height: 10vh;
	margin-left: 1.5vmax;
	padding-left: 1.5vmax;
	width: 30vw;
	position:relative;
	transition: background-color 1s ease;
	transition-property: background-color, border-color;
}

.login[data-mod='1'], .pass[data-mod='1']{
	animation: but ease 1s;
	outline: solid red;
}

@keyframes but {
	0%{transform: rotateZ(-2deg);}
	50%{transform: rotateZ(2deg);}
	100%{transform: rotateZ(0deg);}
}

.blockPas{
	display: flex;
	align-items: center;
}

.nav_i{
	cursor: default;
	color: var(--cV1);
	font-size: 1.25vw;
	font-weight: 500;
	margin-block: 0.2vw;
	-webkit-transition: color 1s ease;
	-o-transition: color 1s ease;
	transition: color 1s ease;
	transition-property: color, text-shadow, border-color;
}

#nav_i:hover{
	color: #00ff00 !important;
	text-shadow: 0 0 2vw #66ff66;
}

.randimg{
	width: 4vmin;
	height: 4vmin;
	pointer-events: none;
}

.pass{
	margin-top: 9px;
}

.logo{
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	color: var(--cV1);
	font-size: 3vw;
	font-weight: bolder;
	margin-left: 12px;
	margin-bottom: 9px;
	transition: color 1s ease;
}

.logoi{
	width: 8vw;
	height: 8vw;
}

.warn{
	user-select: none;
	display: flex;
	font-size: 1vw;
	color: #c14503;
	font-weight: bolder;
	align-items: center;
	opacity: 0;
}

.warnc{
	margin-left: 1.5vmax;
}

.warnimg{
	width: 2vw;
}

.zabpar{
	justify-self: center;
	cursor: pointer;
	text-decoration: underline;
}

.blockAva{
	display: inline-block;
	cursor: pointer;
}

.blockAva *{
	pointer-events: none;
}

.vxod[data-mod='0'] > .zab, .vxod[data-mod='1'] > .vxo{
	display: none;
}

.butZab{
	margin-left: 1.5vmax;
	margin-right: 1vw;
	margin-top: 9px;
}

.marg{
	margin-left: 9px;
	margin-top: 9px;
}

.inpz{
	height: 8vh;
}
import React, {useEffect, useReducer, useRef} from "react";
import {Helmet} from "react-helmet-async";
import requestCSS from './request.module.css';
import {useDispatch, useSelector} from "react-redux";
import yes from "../../media/yes.png";
import no from "../../media/no.png";
import ed from "../../media/edit.png";
import ErrFound from "../other/error/ErrFound";
import {requests, states} from "../../store/selector";
import {
    CHANGE_EVENTS_CLEAR,
    CHANGE_REQUEST,
    CHANGE_REQUEST_DEL,
    CHANGE_REQUEST_GL,
    CHANGE_REQUEST_PARAM,
    changeEvents,
    changeReq
} from "../../store/actions";
import {eventSource, send, setActived} from "../main/Main";

let dispatch, requestInfo, inps, cState, errText;
inps = {inpntt : "Текст", inpnzt : "Заголовок", inpndt: new Date().toLocaleString("ru", {day:"2-digit", month: "2-digit", year:"numeric"})};
errText = "Заявок нет...";

let [_, forceUpdate] = [];

function getEdField(edFi, titleEd, x, inf, inp, info, placeholder, pattern) {
    return (<>
        <div className={requestCSS.fi}>
            {edFi}
            <img className={requestCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
        </div>
        <div className={requestCSS.ed}>
            <div className={requestCSS.preinf}>
                {titleEd}
            </div>
            {edFi.type == "pre" ?
                <textarea className={requestCSS.inp+" "+requestCSS.inparea} id={inp} placeholder={placeholder} defaultValue={inf} data-id={x} onChange={chStatB}/>
                :
                <input className={requestCSS.inp} id={inp} placeholder={placeholder} pattern={pattern} defaultValue={inf} data-id={x} onChange={chStatB}/>
            }
            {ele(false, inp)}
            <img className={requestCSS.imginp+" yes "} src={yes} onClick={onFin} title="Подтвердить" alt=""/>
            <img className={requestCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
        </div>
    </>)
}

function getAdd(info, x) {
    let edFi, dat, datFi, zag, zagFi, tex, texFi;
    zag = info[x].title;
    zagFi = <h2 className={requestCSS.zag}>
        {zag}
    </h2>;
    dat = info[x].date;
    datFi = <span className={requestCSS.date}>
        {dat}
    </span>;
    tex = info[x].text;
    texFi = <pre className={requestCSS.field}>
        {tex}
    </pre>;
    edFi = (
        <div className={requestCSS.ns}>
            <div className={requestCSS.za} data-st="0">
                {getEdField(zagFi, "Заголовок:", x, zag, "inpnzt_" + (x?x:""), info)}
            </div>
            <div className={requestCSS.da} data-st="0">
                {getEdField(datFi, "Дата:", x, dat, "inpndt_" + (x?x:""), info, "ДД.ММ.ГГГГ", "^[0-9.]+$")}
            </div>
            <div className={requestCSS.te} data-st="0">
                {getEdField(texFi, "Текст:", x, tex, "inpntt_" + (x?x:""), info)}
            </div>
            <div className={requestCSS.upr} data-id={x}>
                <img className={requestCSS.imginp+" "} style={{marginRight: "1vw"}} src={no} onClick={onDel} title="Удалить заявку" alt=""/>
            </div>
        </div>
    );
    return edFi
}

function onEdit(e) {
    let par;
    par = e.target.parentElement;
    if(par.classList.contains(requestCSS.line)){
        par.setAttribute('data-st', '1');
    }
    if(par.parentElement.classList.contains(requestCSS.te) || par.parentElement.classList.contains(requestCSS.da) || par.parentElement.classList.contains(requestCSS.za)){
        par = par.parentElement;
        par.setAttribute('data-st', '1');
    }
    if(par.parentElement.parentElement.classList.contains(requestCSS.im)){
        par = par.parentElement.parentElement;
        par.setAttribute('data-st', '1');
    }
}

function onFin(e) {
    let par, inp, bul;
    par = e.target.parentElement;
    bul = par.parentElement.classList.contains(requestCSS.te);
    inp = par.querySelector(bul ? "textarea" : "input");
    if (inps[inp.id]) {
        inp.setAttribute("data-mod", '0');
        if(bul) {
            par = par.parentElement;
            send({
                login: cState.login,
                id: inp.getAttribute("data-id"),
                text: inp.value
            }, 'POST', "requests", "chText")
                .then(data => {
                    if(data.error == false){
                        dispatch(changeReq(CHANGE_REQUEST_PARAM, inp.getAttribute("data-id"), inp.value,"text"));
                    }
                });
        }
        if(par.parentElement.classList.contains(requestCSS.da)){
            par = par.parentElement;
            send({
                login: cState.login,
                id: inp.getAttribute("data-id"),
                date: inp.value
            }, 'POST', "requests", "chDate")
                .then(data => {
                    if(data.error == false){
                        dispatch(changeReq(CHANGE_REQUEST_PARAM, inp.getAttribute("data-id"), inp.value,"date"));
                    }
                });
        }
        if(par.parentElement.classList.contains(requestCSS.za)){
            par = par.parentElement;
            send({
                login: cState.login,
                id: inp.getAttribute("data-id"),
                title: inp.value
            }, 'POST', "requests", "chTitle")
                .then(data => {
                    if(data.error == false){
                        dispatch(changeReq(CHANGE_REQUEST_PARAM, inp.getAttribute("data-id"), inp.value,"title"));
                    }
                });
        }
        par.setAttribute('data-st', '0');
    } else {
        inp.setAttribute("data-mod", '1');
    }
}

function onDel(e) {
    let par = e.target.parentElement;
    if(par.classList.contains(requestCSS.upr)){
        if (par.hasAttribute("data-id")) {
            send({
                login: cState.login,
                id: par.getAttribute("data-id")
            }, 'POST', "requests", "delReq")
                .then(data => {
                    if(data.error == false){
                        dispatch(changeReq(CHANGE_REQUEST_DEL, par.getAttribute("data-id")));
                    }
                });
        }
    }
}

function onClose(e) {
    let par = e.target.parentElement;
    if(par.parentElement.classList.contains(requestCSS.te) || par.parentElement.classList.contains(requestCSS.da) || par.parentElement.classList.contains(requestCSS.za)){
        par = par.parentElement;
        par.setAttribute('data-st', '0');
    }
    if(par.classList.contains(requestCSS.upr)){
        par = par.parentElement.parentElement;
        par.setAttribute('data-st', '0');
    }
}

function setInfo() {
    send({
        type: "REQUESTS",
        uuid: cState.uuid
    }, 'POST', "auth", "infCon");
    send({
        login: cState.login
    }, 'POST', "requests", "getRequests")
        .then(data => {
            if(data.error == false){
                dispatch(changeReq(CHANGE_REQUEST_GL, undefined, data.body));
                for(let el of document.querySelectorAll("." + requestCSS.ed + " > *[id^='inpn']")){
                    chStatB({target: el});
                }
            }
        });
}

function addReq(e) {
    const msg = JSON.parse(e.data);
    dispatch(changeReq(CHANGE_REQUEST, msg.id, msg.body));
}

function chText(e) {
    const msg = JSON.parse(e.data);
    dispatch(changeReq(CHANGE_REQUEST_PARAM, msg.id, msg.text,"text"));
}

function chDate(e) {
    const msg = JSON.parse(e.data);
    dispatch(changeReq(CHANGE_REQUEST_PARAM, msg.id, msg.date,"date"));
}

function chTitle(e) {
    const msg = JSON.parse(e.data);
    dispatch(changeReq(CHANGE_REQUEST_PARAM, msg.id, msg.title,"title"));
}

function delReq(e) {
    const msg = JSON.parse(e.data);
    dispatch(changeReq(CHANGE_REQUEST_DEL, msg.id));
}

function onCon(e) {
    setInfo();
}

function chStatB(e) {
    let el = e.target;
    inps[el.id] = !el.validity.patternMismatch && el.value.length != 0;
    el.setAttribute("data-mod", inps[el.id] ? '0' : '1');
    el.parentElement.querySelector(".yes").setAttribute("data-enable", +inps[el.id]);
}

function ele (x, par) {
    if(!inps[par]) inps[par] = x;
}

export function Request() {
    requestInfo = useSelector(requests);
    cState = useSelector(states);
    [_, forceUpdate] = useReducer((x) => x + 1, 0);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount Request.jsx");
        setActived(11);
        setInfo();
        eventSource.addEventListener('addReq', addReq, false);
        eventSource.addEventListener('chText', chText, false);
        eventSource.addEventListener('chDate', chDate, false);
        eventSource.addEventListener('chTitle', chTitle, false);
        eventSource.addEventListener('delReq', delReq, false);
        eventSource.addEventListener('connect', onCon, false);
        return function() {
            dispatch(changeEvents(CHANGE_EVENTS_CLEAR));
            dispatch = undefined;
            eventSource.removeEventListener('addReq', addReq);
            eventSource.removeEventListener('chText', chText);
            eventSource.removeEventListener('chDate', chDate);
            eventSource.removeEventListener('chTitle', chTitle);
            eventSource.removeEventListener('delReq', delReq);
            eventSource.removeEventListener('connect', onCon);
            console.log("I was triggered during componentWillUnmount Request.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate Request.jsx');
    });
    return (
        <div className={requestCSS.header}>
            <Helmet>
                <title>Заявки</title>
            </Helmet>
            {Object.getOwnPropertyNames(requestInfo).length == 0 ?
                    <ErrFound text={errText}/>
                :
                    <div className={requestCSS.block}>
                        <section className={requestCSS.center_colum}>
                            {Object.getOwnPropertyNames(requestInfo).reverse().map(param =>
                                <div className={requestCSS.line} data-st="1" key={param}>
                                    {getAdd(requestInfo, param)}
                                </div>
                            )}
                        </section>
                    </div>
            }
        </div>
    )
}
export default Request;
.AppHeader {
	width: 100%;
	height: 93vh;
	display: flex;
	position: relative;
	top: 7vh;
}

.pane{
	width: inherit;
	height: 7vh;
	position: fixed;
	z-index: 1;
}

.header {
	width: 100%;
	height: 86vh;
	display: flex;
	position: relative;
	top: 7vh;
}

.block {
	width: 50vw;
	margin: auto;
}

.center_colum {
	margin-block: 5vh;
}

.nav_i{
	text-decoration: none;
	border: 1px solid var(--bcV1);
	cursor: pointer;
	color: var(--cV1);
	font-size: 1.25vw;
	font-weight: bold;
	margin: -1px -0.5px;
	display: flex;
	align-items: center;
	justify-content: center;
	align-self: stretch;
	-webkit-transition: color 1s ease;
	-o-transition: color 1s ease;
	transition: color 1s ease;
	transition-property: color, text-shadow, border-color, background-color;
	background-color: var(--bgcV1);
	border-radius: 5px;
}

#nav_i:hover{
	color: #00ff00 !important;
	text-shadow: 0 0 2vw #66ff66;
}

#nav_i:active, #nav_i[data-act="1"]{
	-webkit-transition: color 0.1s ease;
	-o-transition: color 0.1s ease;
	transition: color 0.1s ease;
	color: #004d00 !important;
}

.line {
	width:100%;
	overflow:hidden;
	background-color: var(--bgcV1);
	padding: 10px;
	border-radius: 5px;
	margin-bottom: 10px;
	transition: background-color 1s ease;
	border: none;
}

.zag {
	color:var(--cV1);
	margin: 0;
	text-shadow: 2px 2px 2px #000;
	transition: color 1s ease;
}

.date {
	font-size:10px;
	font-style:italic;
	color:var(--cV3);
	text-shadow: 1px 1px 3px #000;
	transition: color 1s ease;
	font-weight: normal;
}

.te {
	color: var(--cV1);
	margin-bottom:5px;
	text-shadow: 1px 1px 3px #000;
	transition: color 1s ease;
	font-size: initial;
	font-weight: normal;
	margin-block: 1em;
}

.link{
	text-decoration: underline;
	cursor: pointer;
	transition-delay: unset;
	border: none;
	background-color: unset;
	display: none;
}

.field{
	display: none;
	vertical-align: middle;
	margin-left: 5px;
}

.ns{
	display: none;
	transition-delay: unset;
	border: none;
	background-color: unset;
	position: relative;
}

.fi, .ed{
	display: none;
}

.line[data-st='1'] > .ns, .te[data-st='1'] > .ed, .da[data-st='1'] > .ed, .za[data-st='1'] > .ed{
	display: block;
}

.line[data-st='0'] > .link, .te[data-st='0'] > .fi, .da[data-st='0'] > .fi, .za[data-st='0'] > .fi{
	display: flex;
}

.imginp, .imgfield{
	width: 1vw;
	vertical-align: middle;
	cursor: pointer;
	margin-left: 1vw;
	display: inline-block;
	margin-block: auto;
}

.inp {
	border-radius: 0.5vmax;
	background-color: #4d4d4d;
	user-select: none;
	box-shadow: 0 1px #FFFFFFAA, inset 0 2px 2px #000000AA;
	border: 1px solid var(--bcV2);
	height: 90%;
	position:relative;
	transition: background-color 1s ease;
	transition-property: background-color, border-color;
	vertical-align: middle;
	display: inline-block;
	width: 50%;
	font-size: 1.25vw;
	padding: 0 0 0 1vw;
	margin-left: 1vw;
}

.inp[data-mod='1']{
	animation: but ease 1s;
	outline: solid red;
}

@keyframes but {
	0%{transform: rotateZ(-2deg);}
	50%{transform: rotateZ(2deg);}
	100%{transform: rotateZ(0deg);}
}

.inparea{
	font-size: 1.25vmax;
	padding-left: 1vmax;
	min-height: 10vh;
	width: 50%;
}

pre.field{
	white-space: pre-wrap;
	word-break: break-all;
	text-align: left;
	max-width: 90%;
}

img[data-enable="0"] {
	pointer-events: none;
	opacity: 0.4;
}

.upr{
	position: absolute;
	top: 0;
	right: 0;
	margin-inline: -1vw;
}

.field, .preinf{
	display: inline-block;
	vertical-align: middle;
	margin-left: 0.2vw;
	color: var(--cV1);
	text-shadow: 1px 1px 3px #000;
}

.field{
	margin-left: 5px;
}
import React, {useEffect, useRef} from "react";
import journalCSS from './journal.module.css';
import {Helmet} from "react-helmet-async";
import {useDispatch, useSelector} from "react-redux";
import {pjournal, states, themes} from "../../store/selector";
import {setActived} from "../main/Main";
import mapd from "../../media/Map_symbolD.png";
import mapl from "../../media/Map_symbolL.png";
import {changeDZ, changeJType, changePjournal, changePjournalMarks} from "../../store/actions";
import warn from "../../media/warn_big.png";
import erad from "../../media/eraserd.png";
import eral from "../../media/eraserl.png";
import no from "../../media/no.png";
import ed from "../../media/edit.png";
import yes from "../../media/yes.png";
import Pane from "../other/pane/Pane";

let jourInfo, dispatch, theme, lma, lmal, pari, parb, inps, lty, ltyl;
pari = {elems1: 0, maxEl: 0, lMonth: 0};
parb = {upddel: false, updnew: false, lscr: false};
inps = {};

function getPredms() {
    pari.elems++;
    return (
        <div className={journalCSS.predBlock}>
            <div className={journalCSS.nav_i+' '+journalCSS.nav_iJur+' '+journalCSS.predEl} id={journalCSS.nav_i}>
                <div className={journalCSS.predInf}>Предмет:</div>
                <div className={journalCSS.predText}>{jourInfo.predms[jourInfo.predm]}</div>
                <img className={journalCSS.mapImg} src={theme.theme_ch ? mapd : mapl} alt=""/>
            </div>
            <div className={journalCSS.predMenu}>
                {jourInfo.predms && Object.getOwnPropertyNames(jourInfo.predms).map(param1 =>
                    <div className={journalCSS.nav_i+' '+journalCSS.nav_iJur+' '+journalCSS.pred} id={journalCSS.nav_i} onClick={() => (dispatch(changePjournal("predm", param1)))}>
                        <div className={journalCSS.predInf}>Предмет:</div>
                        <div className={journalCSS.predText}>{jourInfo.predms[param1]}</div>
                    </div>
                )}
            </div>
        </div>
    )
}

function getDate(dat) {
    let d = dat.split('.');
    return new Date("20" + [d[2], d[1], d[0]].join("-"));
}

function getDay(da) {
    let date = getDate(da), month = date.toLocaleString("ru", {month:"2-digit"}), dat = date.toLocaleString("ru", month == pari.lMonth ? {day:"2-digit"} : {day:"2-digit", month:"short"});
    pari.lMonth = month;
    return dat;
}

function trEnd(e) {
    if(e.propertyName != "opacity") return;
    if (this.parentElement.matches(':hover')) {
        this.removeAttribute("data-tr");
    } else {
        this.setAttribute("data-tr", "");
    }
}

function ele(x, par, b) {
    if(b){
        if(!inps[par]) inps[par] = x;
    } else {
        pari[par] = x;
    }
}

function elex(days) {
    let d = Object.getOwnPropertyNames(days)[Object.getOwnPropertyNames(days).length-1];
    return d ? d : -1;
}

function onEdit(e) {
    let par = e.target.parentElement;
    if(e.target.classList.contains(journalCSS.dbut)) par = document.querySelector("." + journalCSS.AppHeader);
    par.setAttribute('data-st', '1');
}

function onFin(e) {
    let par, inp, bo;
    par = e.target.parentElement;
    inp = par.querySelectorAll("." + journalCSS.inp);
    bo = par.classList.contains(journalCSS.blNew);
    if(bo) par = par.parentElement;
    if (inps[inp[0].id] && inps[inp[1].id]) {
        if(bo) {
            parb.updnew = true;
            dispatch(changeJType(undefined, inp[0].value, inp[1].value));
        } else {
            dispatch(changeJType(inp[0].id.split("_")[1], inp[0].value, inp[1].value));
        }
        par.setAttribute('data-st', '0');
    }
}

function onFinM(e) {
    let par, inp;
    par = e.target.parentElement;
    inp = par.querySelector("." + journalCSS.inp);
    if (inp.value.length != 0) {
        dispatch(changeDZ(inp.id.split("_")[1], inp.value));
        par.setAttribute('data-st', '0');
    }
}

function onDel(e) {
    let par, inp, idi;
    par = e.target.parentElement;
    inp = par.querySelectorAll("." + journalCSS.inp);
    idi = inp[0].id.split("_")[1];
    dispatch(changeJType(undefined, idi));
    parb.upddel = true;
}

function onClose(e) {
    let par = e.target.parentElement;
    if(par.classList.contains(journalCSS.blNew)) par = par.parentElement;
    if(e.target.classList.contains(journalCSS.dbut)) par = document.querySelector("." + journalCSS.AppHeader);
    par.setAttribute('data-st', '0');
}

function chStatB(e) {
    let el, idp, ids;
    el = e.target;
    ids = el.id.split("_");
    idp = (ids[0] == "inpt" ? "inpv_" : "inpt_") + ids[1];
    inps[el.id] = !el.validity.patternMismatch && el.value.length != 0;
    if (inps[el.id]) {
        el.style.outline = "none black";
    } else {
        el.style.animation = "but 1s ease infinite";
        setTimeout(function () {
            el.style.animation = "none"
        }, 1000);
        el.style.outline = "solid red";
    }
    el.parentElement.querySelector(".yes").setAttribute("data-enable", +(inps[el.id] && inps[idp]));
}

function chStatM(e) {
    let el, ids;
    el = e.target;
    ids = el.value.length != 0;
    if (ids) {
        el.style.outline = "none black";
    } else {
        el.style.animation = "but 1s ease infinite";
        setTimeout(function () {
            el.style.animation = "none"
        }, 1000);
        el.style.outline = "solid red";
    }
    el.parentElement.querySelector(".yes").setAttribute("data-enable", +ids);
}

function chM(kid, day, per) {
    dispatch(changePjournalMarks(kid, day, jourInfo.mar, jourInfo.jur.kids[kid].days[day], per, jourInfo.typ, jourInfo.typs[jourInfo.typ]));
}

function cli() {
    lma.setAttribute("data-ac", 0);
    this.setAttribute("data-ac", 1);
    lma = this;
}

function cli1() {
    lty.setAttribute("data-ac", 0);
    this.setAttribute("data-ac", 1);
    lty = this;
}

export function Journal() {
    const cState = useSelector(states);
    theme = useSelector(themes);
    jourInfo = useSelector(pjournal);
    pari.maxEl = Object.getOwnPropertyNames(jourInfo.jur.day).length;
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount Journal.jsx");
        lty = ltyl;
        let scr = document.querySelector("." + journalCSS.days);
        scr.scrollTo(scr.scrollWidth, 0);
        document.querySelector("." + journalCSS.marks).addEventListener("transitionend", trEnd);
        document.querySelector("." + journalCSS.types + "[data-real]").addEventListener("transitionend", trEnd);
        for(let e of document.querySelectorAll("." + journalCSS.marks + " > ." + journalCSS.nav_i)){
            e.addEventListener("click", cli);
        }
        setActived(9);
        for(let e of document.querySelectorAll("." + journalCSS.types + "[data-real] > ." + journalCSS.nav_i)){
            e.addEventListener("click", cli1);
        }
        for(let e of document.querySelectorAll("." + journalCSS.nav_i + " > [id^='inpt_']")){
            chStatB({target: e});
        }
        for(let e of document.querySelectorAll("." + journalCSS.nav_i + " > [id^='inpv_']")){
            chStatB({target: e});
        }
        for(let e of document.querySelectorAll("." + journalCSS.nav_i + " > [id^='inpd_']")){
            chStatM({target: e});
        }
        chStatB({target: document.querySelector("." + journalCSS.nav_i + " > [id^='inpnt_']")});
        chStatB({target: document.querySelector("." + journalCSS.nav_i + " > [id^='inpnv_']")});
        return function() {
            dispatch = undefined;
            console.log("I was triggered during componentWillUnmount Journal.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        if(parb.updf){
            parb.updf = false;
            console.log('componentDidUpdate onlyRender Journal.jsx');
            return;
        }
        if(parb.upddel) {
            parb.upddel = false;
            let idi;
            for(let el of document.querySelectorAll("." + journalCSS.inp)){
                idi = el.id.split("_");
                if(idi[1] != "") el.value = idi[0] == "inpt" ? idi[1] : jourInfo.typs[idi[1]];
            }
        }
        if(parb.updnew) {
            parb.updnew = false;
            let ty = Object.getOwnPropertyNames(jourInfo.typs);
            ty = ty[ty.length-1];
            document.querySelector("#inpt_" + ty).parentElement.addEventListener("click", cli1);
        }
        console.log('componentDidUpdate Journal.jsx');
    });
    let p3 = "";
    return (
        <>
            <Helmet>
                <title>Журнал</title>
            </Helmet>
            <div className={journalCSS.AppHeader} data-st='0'>
                {Object.getOwnPropertyNames(jourInfo.jur.kids).length == 0 ?
                    <div className={journalCSS.block}>
                        <img alt="banner" src={warn}/>
                        <div className={journalCSS.block_text}>
                            К сожалению, информация не найдена... Можете попробовать попросить завуча заполнить
                            информацию.
                        </div>
                    </div> :
                    <>
                        <nav className={journalCSS.panel} id="her">
                            {ele(0, "elems")}
                            <div style={{width:"100%", height: "100%"}}>
                                <Pane cla={true}/>
                            </div>
                            {getPredms()}
                        </nav>
                        <div className={journalCSS.blockPredm+" "+journalCSS.ju}>
                            <div className={journalCSS.predm}>
                                <div className={journalCSS.days}>
                                    <div className={journalCSS.daysGrid} style={{gridTemplate: "15vh /20vw repeat(" + (pari.maxEl + jourInfo.pers.length + 1) + ", 2vw)"}}>
                                        <div className={journalCSS.nav_i+' '+journalCSS.nav_iJur+" "+journalCSS.namd} id={journalCSS.nav_i}>
                                            <br/>
                                        </div>
                                        <div className={journalCSS.nav_i+' '+journalCSS.nav_iJur+" "+journalCSS.nav_iBr} id={journalCSS.nav_i}>
                                            <br/>
                                        </div>
                                        {ele(0, "lMonth")}
                                        {Object.getOwnPropertyNames(jourInfo.jur.day).map(param =>
                                            <div className={journalCSS.nav_i+' '+journalCSS.nav_iJur+" "+journalCSS.nav_iTextD} id={journalCSS.nav_i}>
                                                {getDay(jourInfo.jur.day[param])}
                                            </div>
                                        )}
                                        <div className={journalCSS.nav_i+' '+journalCSS.nav_iJur}>
                                            <div className={journalCSS.nav_iText}>
                                                Средняя
                                            </div>
                                        </div>
                                        {jourInfo.pers.map(param =>
                                            <div className={journalCSS.nav_i+' '+journalCSS.nav_iJur}>
                                                <div className={journalCSS.nav_iTextPer} data-s={param.length > 2 ? 1 : 0}>
                                                    {param}
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                    {Object.getOwnPropertyNames(jourInfo.jur.kids).map(param =>
                                        <div className={journalCSS.predmGrid} style={{gridTemplate: "5vh /20vw repeat(" + (pari.maxEl + jourInfo.pers.length + 1) + ", 2vw)"}} id={param}>
                                            <div className={journalCSS.nav_i+' '+journalCSS.nav_iJur+" nam " + journalCSS.nam} id={journalCSS.nav_i}>
                                                {param}
                                            </div>
                                            <div className={journalCSS.nav_i+' '+journalCSS.nav_iJur+" "+journalCSS.nav_iBr} id={journalCSS.nav_i}>
                                                <br/>
                                            </div>
                                            {ele(0, "elems1")}
                                            {Object.getOwnPropertyNames(jourInfo.jur.kids[param].days).map(param1 => <>
                                                    {parseInt(param1) - pari.elems1 > 0 && Array(parseInt(param1) - pari.elems1).fill('').map((param2, p, o, ele = pari.elems1) =>
                                                        <>
                                                            <div className={journalCSS.nav_i+' '+journalCSS.nav_iJur} id={journalCSS.nav_i} onClick={()=>(chM(param, p + ele))}>
                                                                <br/>
                                                            </div>
                                                        </>
                                                    )}
                                                    {ele(parseInt(param1)+1, "elems1")}
                                                    <div className={journalCSS.nav_i+' '+journalCSS.nav_iJur} id={journalCSS.nav_i} onClick={()=>(chM(param, param1))}>
                                                        {jourInfo.jur.kids[param].days[param1].mark}
                                                        {jourInfo.jur.kids[param].days[param1].weight > 1 && (<div className={journalCSS.nav_i+' '+journalCSS.nav_iJur+" "+journalCSS.nav_iWeight} id={journalCSS.nav_i}>
                                                            {jourInfo.jur.kids[param].days[param1].weight}
                                                        </div>)}
                                                    </div>
                                                </>
                                            )}
                                            {elex(jourInfo.jur.kids[param].days) < pari.maxEl-1 && Array(pari.maxEl-1-elex(jourInfo.jur.kids[param].days)).fill('').map((param3, p) =>
                                                <div className={journalCSS.nav_i+' '+journalCSS.nav_iJur} id={journalCSS.nav_i} onClick={()=>(chM(param, p+1+parseInt(elex(jourInfo.jur.kids[param].days))))}>
                                                    <br/>
                                                </div>
                                            )}
                                            <div className={journalCSS.nav_i+' '+journalCSS.nav_iJur + " " + journalCSS.nav_iTextM} style={{fontSize:"0.85vw"}}>
                                                {jourInfo.jur.kids[param].avg.mark}
                                            </div>
                                            {jourInfo.pers.map(param1 =>
                                                <div className={journalCSS.nav_i+' '+journalCSS.nav_iJur + " " + journalCSS.nav_iTextM} onClick={()=>(chM(param, undefined, param1))}>
                                                    {jourInfo.jur.kids[param].avg[param1] ? jourInfo.jur.kids[param].avg[param1] : <br/>}
                                                </div>
                                            )}
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>
                        <div className={journalCSS.blockInstrum+" "+journalCSS.ju}>
                            <div className={journalCSS.blockMarks}>
                                <div className={journalCSS.marks} data-tr>
                                    <div className={journalCSS.nav_i} id={journalCSS.nav_i} data-ac="0" onClick={() => dispatch(changePjournal("mar", 1))}>
                                        1
                                    </div>
                                    <div className={journalCSS.nav_i} id={journalCSS.nav_i} data-ac="0" onClick={() => dispatch(changePjournal("mar", 2))}>
                                        2
                                    </div>
                                    <div className={journalCSS.nav_i} id={journalCSS.nav_i} data-ac="0" onClick={() => dispatch(changePjournal("mar", 3))}>
                                        3
                                    </div>
                                    <div className={journalCSS.nav_i} id={journalCSS.nav_i} data-ac="0" onClick={() => dispatch(changePjournal("mar", 4))}>
                                        4
                                    </div>
                                    <div className={journalCSS.nav_i} id={journalCSS.nav_i} data-ac="0" onClick={() => dispatch(changePjournal("mar", 5))}>
                                        5
                                    </div>
                                    <div className={journalCSS.nav_i} id={journalCSS.nav_i} data-ac="0" onClick={() => dispatch(changePjournal("mar", "Н"))}>
                                        Н
                                    </div>
                                    <div className={journalCSS.nav_i} id={journalCSS.nav_i} data-ac="0" onClick={() => dispatch(changePjournal("mar", "Л"))} ref={(ref)=>( !lmal && (lmal = ref))}>
                                        <img className={journalCSS.imger} src={(lmal?.getAttribute("data-ac") == "1" ? !theme.theme_ch : theme.theme_ch) ? erad : eral} alt=""/>
                                    </div>
                                    <div className={journalCSS.nav_i} id={journalCSS.nav_i} data-ac="1" onClick={() => dispatch(changePjournal("mar", 0))} ref={(ref)=>( !lma && (lma = ref))}>
                                        <br/>
                                    </div>
                                </div>
                                <div className={journalCSS.nav_i} id={journalCSS.nav_i}>
                                    Выбрать оценку
                                </div>
                            </div>
                            <div className={journalCSS.blockTypes}>
                                <div className={journalCSS.types+" "+journalCSS.types1}>
                                    <div className={journalCSS.nav_i} id={journalCSS.nav_i} data-st="0" data-ac="0">
                                        <div className={journalCSS.field+" "+journalCSS.fi}>
                                            {Object.getOwnPropertyNames(jourInfo.typs).map(param => {
                                                if(param.length > p3.length) p3 = param;
                                            }) && p3 + ", вес: " + jourInfo.typs[p3]
                                            }
                                        </div>
                                        <img className={journalCSS.imgfield+" "+journalCSS.fi} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                                        <img className={journalCSS.imginp+" "+journalCSS.fi} src={no} onClick={onDel} title="Удалить тип" alt=""/>
                                    </div>
                                </div>
                                <div className={journalCSS.types} data-tr data-real>
                                    <div className={journalCSS.nav_i} id={journalCSS.nav_i} data-ac="1" onClick={() => dispatch(changePjournal("typ", ""))} ref={(ref)=>( !ltyl && (ltyl = ref))}>
                                        <img className={journalCSS.imger} src={((ltyl ? ltyl.getAttribute("data-ac") == "1" : true) ? !theme.theme_ch : theme.theme_ch) ? erad : eral} alt=""/>
                                    </div>
                                    {Object.getOwnPropertyNames(jourInfo.typs).map(param =>
                                        <div className={journalCSS.nav_i} id={journalCSS.nav_i} data-st="0" data-ac="0" onClick={() => dispatch(changePjournal("typ", param))}>
                                            <div className={journalCSS.field+" "+journalCSS.fi}>
                                                {param}, вес: {jourInfo.typs[param]}
                                            </div>
                                            <div className={journalCSS.preinf+" "+journalCSS.in}>
                                                Тип:
                                            </div>
                                            <input className={journalCSS.inp+" "+journalCSS.in} id={"inpt_" + param} onChange={chStatB} defaultValue={param} type="text" pattern="^[A-Za-zА-Яа-яЁё\s0-9]+$"/>
                                            <div className={journalCSS.preinf+" "+journalCSS.in}>
                                                , вес:
                                            </div>
                                            <input className={journalCSS.inp+" "+journalCSS.in+" "+journalCSS.mass} id={"inpv_" + param} onChange={chStatB} defaultValue={jourInfo.typs[param]} type="text" pattern="^[0-9]+$"/>
                                            {ele(false, "inpt_" + param, true)}
                                            {ele(false, "inpv_" + param, true)}
                                            <img className={journalCSS.imginp+" yes "+journalCSS.in} src={yes} onClick={onFin} title="Подтвердить изменения" alt=""/>
                                            <img className={journalCSS.imginp+" "+journalCSS.in} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                                            <img className={journalCSS.imgfield+" "+journalCSS.fi} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                                            <img className={journalCSS.imginp+" "+journalCSS.fi} src={no} onClick={onDel} title="Удалить тип" alt=""/>
                                        </div>
                                    )}
                                    <div className={journalCSS.nav_iZag} data-st="0">
                                        <div className={journalCSS.nav_i+" "+journalCSS.chPass} id={journalCSS.nav_i} data-ac='1' onClick={onEdit}>
                                            Добавить новый тип
                                        </div>
                                        <div className={journalCSS.nav_i+" "+journalCSS.blNew} id={journalCSS.nav_i} data-ac="0">
                                            <div className={journalCSS.preinf+" "+journalCSS.in}>
                                                Тип:
                                            </div>
                                            <input className={journalCSS.inp+" "+journalCSS.in} id={"inpnt_"} onChange={chStatB} type="text" pattern="^[A-Za-zА-Яа-яЁё\s0-9]+$"/>
                                            <div className={journalCSS.preinf+" "+journalCSS.in}>
                                                , вес:
                                            </div>
                                            <input className={journalCSS.inp+" "+journalCSS.in+" "+journalCSS.mass} id={"inpnv_"} onChange={chStatB} type="text" pattern="^[0-9]+$"/>
                                            {ele(false, "inpnt_", true)}
                                            {ele(false, "inpnv_", true)}
                                            <img className={journalCSS.imginp+" yes "+journalCSS.in} src={yes} onClick={onFin} title="Подтвердить" alt=""/>
                                            <img className={journalCSS.imginp+" "+journalCSS.in} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                                        </div>
                                    </div>
                                </div>
                                <div className={journalCSS.nav_i} id={journalCSS.nav_i}>
                                    Выбрать тип оценки
                                </div>
                            </div>
                            <div className={journalCSS.nav_i+" "+journalCSS.dbut} id={journalCSS.nav_i} onClick={onEdit}>
                                Задать домашнее задание
                            </div>
                        </div>
                        <div className={journalCSS.blockDom+" "+journalCSS.dom}>
                            <div className={journalCSS.day}>
                                <div className={journalCSS.nav_i+" "+journalCSS.nav_iJur} id={journalCSS.nav_i}>
                                    Дата
                                </div>
                                <div className={journalCSS.nav_i+" "+journalCSS.nav_iJur} id={journalCSS.nav_i}>
                                    Домашнее задание
                                </div>
                                {Object.getOwnPropertyNames(jourInfo.jur.day).reverse().map(param =>
                                    <>
                                        <div className={journalCSS.nav_i+" "+journalCSS.nav_iJur} id={journalCSS.nav_i}>
                                            {jourInfo.jur.day[param]}
                                        </div>
                                        <div className={journalCSS.nav_i+" "+journalCSS.nav_iJur} id={journalCSS.nav_i} data-st="0">
                                            <pre className={journalCSS.field+" "+journalCSS.fi}>
                                                {jourInfo.dz[param] ? jourInfo.dz[param] : <br/>}
                                            </pre>
                                            <textarea className={journalCSS.inp+" "+journalCSS.in+" "+journalCSS.inparea} id={"inpd_" + param} defaultValue={jourInfo.dz[param]} onChange={chStatM}/>
                                            <img className={journalCSS.imginp+" yes "+journalCSS.in} src={yes} onClick={onFinM} title="Подтвердить изменения" alt=""/>
                                            <img className={journalCSS.imginp+" "+journalCSS.in} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                                            <img className={journalCSS.imgfield+" "+journalCSS.fi} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                                        </div>
                                    </>
                                )}
                            </div>
                        </div>
                        <div className={journalCSS.blockInstrum+" "+journalCSS.dom}>
                            <div className={journalCSS.nav_i+" "+journalCSS.dbut} id={journalCSS.nav_i} onClick={onClose}>
                                Вернуться к журналу
                            </div>
                        </div>
                    </>
                }
            </div>
        </>
    )
}
export default Journal;
.AppHeader {
	width: 100%;
	display: flex;
	position: relative;
	top: 7vh;
	min-height: 93vh;
}

.panel{
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	position:fixed;
	width: inherit;
	height: 7vh;
	display: grid;
	place-items: center;
    grid-template: auto/85% 15%;
	justify-items: stretch;
	z-index: 1;
	-webkit-transition: background-color 1s ease;
	-o-transition: background-color 1s ease;
	transition: background-color 1s ease;
	background-color: var(--bgcV1);
	margin-block: -0.5px;
}

.nav_i{
	text-decoration: none;
	border: 1px solid var(--bcV1);
	cursor: pointer;
	color: var(--cV1);
	font-size: 1.25vw;
	font-weight: bold;
	display: flex;
	align-items: center;
	justify-content: center;
	align-self: stretch;
	-webkit-transition: color 1s 1s ease;
	-o-transition: color 1s 1s ease;
	transition: color 1s 1s ease;
	transition-property: color, text-shadow, border-color, background-color;
	background-color: var(--bgcV1);
	border-radius: 5px;
}

.nav_iJur{
	font-weight: 500;
	background-color: unset;
	border-radius: unset;
	transition-property: color, text-shadow, border-color;
	margin: -0.5px;
	padding: 5px;
	position: relative;
}

#nav_i:hover{
	color: #00ff00 !important;
	text-shadow: 0 0 2vw #66ff66;
}

#nav_i:active, #nav_i[data-act="1"]{
	-webkit-transition: color 0.1s ease;
	-o-transition: color 0.1s ease;
	transition: color 0.1s ease;
	color: #004d00 !important;
}

.predBlock{
	position: relative;
	margin-inline: -0.5px;
	display: flex;
	align-items: center;
	justify-content: center;
	align-self: stretch;
	margin-left: -1px;
	width: 100%;
}

.panel > div{
	grid-row: 1;
}

.predMM{
	height: 300%;
	overflow-y: auto;
	overflow-x: hidden;
}

.predMM > div{
	height: 33.3%;
}

.predImg{
	width: 2vw;
	vertical-align: middle;
	cursor: pointer;
	margin-left: 1vw;
}

.predText{
	align-self: baseline;
	font-size: 0.75vw;
}

.mapImg{
	width: 2vw;
	vertical-align: middle;
	cursor: pointer;
	margin: 0 0.1vw;
	grid-column: 2;
}

.block{
	margin: auto;
	text-align: center;
}

.block > img{
	width: 30vmin;
	height: 30vmin;
}

.block_text{
	width: 70vmin;
	color:var(--cV2);
	font-weight: bold;
	font-size: 1.5vw;
	text-shadow: 2px 2px 2px #000;
	transition: color 1s ease;
	text-align: left;
}

.blockPredm{
	text-align: center;
	margin: auto;
	width: 75%;
	display: none;
}

.predm{
	background-color: var(--bgcV1);
	padding: 10px;
	border-radius: 5px;
	transition: background-color 1s ease;
	margin-block: 5vh;
	overflow-x: auto;
	overflow-y: hidden;
}

.days{
	overflow-x: auto;
	overflow-y: hidden;
	padding: 0.5px;
}

.predmGrid{
	display: grid;
	grid-template: 5vh /20vw repeat(auto-fit, 2vw);
	transition: background-color 1s ease;
	width: fit-content;
}

.predmGrid:hover{
	background-color: #FF970055 !important;
}

.daysGrid{
	display: grid;
	grid-template: 15vh /20vw repeat(auto-fit, 2vw);
	width: fit-content;
}

.nav_iText{
	transform: rotateZ(270deg);
	color: #990000;
}

.nav_iBr{
	border: none;
}

.namd{
	position: absolute;
	width: 20vw;
	height: 15vh;
	padding: 0;
	background-color: var(--bgcV1);
	z-index: 1;
}

.nam{
	position: absolute;
	width: 20vw;
	height: 5vh;
	padding: 0;
	background-color: var(--bgcV1);
	z-index: 1;
}

.nav_iTextM{
	color: #990000;
}

.nav_iTextD{
	font-size: 0.75vw;
}

.nav_iWeight{
	border: none;
	font-size: 0.75vw;
	margin: initial;
	padding: initial;
	align-items: center;
	top: 0.75vw;
	position: relative;
	margin-block: 0.75vw;
}

.blockInstrum{
	position: absolute;
	right: 0;
	top: 7vh;
	margin: 1vmax;
	display: none;
}

.blockInstrum > .nav_i{
	margin-bottom: 1vmax;
	height: 3vmax;
    width: fit-content;
    justify-self: end;
}

.marks, .types{
    display: flex;
	border: 1px solid var(--bcV1);
	cursor: pointer;
	align-items: center;
	justify-content: center;
	align-self: stretch;
	-webkit-transition: color 1s 5s ease;
	-o-transition: color 1s 5s ease;
	transition: color 1s 5s ease;
	transition-property: border-color, background-color, opacity;
	background-color: var(--bgcV1);
	border-radius: 5px;
    padding: 1vw;
    gap: 1vw;
    opacity: 0;
}

.marks > .nav_i{
    padding-inline: 1vw;
}

.types > .nav_i{
    padding: 0.2vw 1vw;
	height: 100%;
}

.blockTypes > .nav_i{
    padding: 0.2vw 1vw;
}

.types{
	display: grid;
	overflow-y: scroll;
	align-self: center;
	height: 300%;
	position: absolute;
	left: 0;
}

.types1{
	height: unset;
	position: unset;
	pointer-events: none;
	visibility: hidden;
}

.marks > .nav_i[data-ac="1"], .types > .nav_i[data-ac="1"]{
	background-color: var(--bgcV2);
}

.blockTypes{
	position: relative;
}

.blockMarks, .blockTypes{
    display: flex;
    margin-bottom: 1vmax;
    justify-content: end;
}

.blockMarks > .nav_i, .blockTypes > .nav_i{
    height: 3vmax;
    margin-left: 1vw;
    align-self: center;
}

.blockMarks:hover .marks, .blockTypes:hover .types{
    transition-delay: unset;
    opacity: 1;
}

.blockMarks:not(:hover) .marks[data-tr], .blockTypes:not(:hover) .types[data-tr]{
    pointer-events: none;
    position: absolute;
	visibility: hidden;
}

.nav_iTextPer{
    color: #990000;
	font-family: "Times New Roman";
}

.nav_iTextPer[data-s="1"]{
    transform: rotateZ(270deg);
	font-family: unset;
}

.imger{
	width: 2vw;
	pointer-events: none;
}

.nav_iZag{
	border: 1px solid var(--bcV1);
	border-radius: 5px;
	padding-left: 0.5vw;
	padding-block: 0.5vw;
}

.chPass{
	text-decoration: underline;
	cursor: pointer;
	margin-block: 1vw;
	transition-delay: unset;
	border: none;
	background-color: unset;
	display: none;
}

.field, .preinf{
	display: none;
	vertical-align: middle;
	margin-left: 0.2vw;
}

.field{
	margin-left: 5px;
}

.blNew{
	display: none;
	transition-delay: unset;
	border: none;
	background-color: unset;
}

.nav_i[data-st='0'] > .fi, .nav_i[data-st='1'] > .in, .nav_iZag .in{
	display: inline-block;
}

.nav_iZag[data-st='0'] > .chPass, .nav_iZag[data-st='1'] > .blNew{
	display: flex;
}

.imginp, .imgfield{
	width: 1vw;
	vertical-align: middle;
	cursor: pointer;
	margin-left: 1vw;
	display: none;
}

.inp {
	-webkit-border-radius: 0.5vmax;
	border-radius: 0.5vmax;
	background-color: #4d4d4d;
	user-select: none;
	-webkit-box-shadow: 0 1px white, inset 0 2px 2px rgba(0, 0, 0, 0.1);
	box-shadow: 0 1px white, inset 0 2px 2px rgba(0, 0, 0, 0.1);
	border: 1px solid var(--bcV2);
	height: 7vh;
	position:relative;
	transition: background-color 1s ease;
	transition-property: background-color, border-color;
	vertical-align: middle;
	display: none;
	width: 10vw;
	font-size: 1.25vw;
	padding: 0;
	padding-left: 1vw;
	margin-left: 1vw;
}

img.in[data-enable="0"] {
	pointer-events: none;
	opacity: 0.4;
}

.mass{
	width: 2vw;
}

.blockDom{
	display: none;
	text-align: center;
	margin: 5vw auto;
	position: relative;
	top: 7vh;
	width: 50%;
}

.day{
	background-color: var(--bgcV1);
	padding: 10px;
	border-radius: 5px;
	margin-bottom: 10px;
	transition: background-color 1s ease;
	display: grid;
	grid-template: repeat(5, auto)/20% 80%;
}

.dbut{

}

.AppHeader[data-st='0'] > .blockPredm, .AppHeader[data-st='1'] > .blockDom{
	display: block;
}

.AppHeader[data-st='0'] > .blockInstrum.ju, .AppHeader[data-st='1'] > .blockInstrum.dom{
	display: grid;
}

.inparea{
	font-size: 1.25vmax;
	padding-left: 1vmax;
	height: 20vh;
	width: 90%;
}

pre.field{
	white-space: pre-wrap;
	word-break: break-all;
	text-align: left;
}

.predInf{
    align-self: end;
    font-size: 1.25vw;
}

.predEl, .pred{
	display: grid;
	justify-items: center;
	z-index: 1;
	margin-inline: 0;
}

.predEl{
	grid-template: auto auto / auto auto;
	width: 100%;
	margin-block: -0.5px;
}

.pred{
	grid-template: auto / auto;
	background-color: var(--bgcV1);
	padding: 0;
	height: 100%;
	margin-bottom: -2px;
}

.predEl img, .pred img{
	width: 2vw;
	grid-row: 1/3;
	margin-right: 0.25vw;
}

.predEl:hover + .predMenu, .predMenu:hover, .pred:hover + .predMenu{
	opacity: 1;
	top: 100%;
}

.predMenu{
	position: absolute;
	width: 100%;
	height: 100%;
	top: -300%;
	transition: top 1s ease;
	transition-property: top, opacity;
	opacity: 0;
}
import React, {useEffect, useRef} from "react";
import peopleCSS from './peopleMain.module.css';
import {Outlet} from "react-router-dom";
import {useDispatch, useSelector} from "react-redux";
import {groups, states} from "../../store/selector";
import Pane from "../other/pane/Pane";
import {eventSource, send, setActived} from "../main/Main";
import {
    CHANGE_EVENT,
    CHANGE_GROUPS_DEL_GRS,
    CHANGE_GROUPS_GL,
    CHANGE_GROUPS_GR,
    CHANGE_GROUPS_GRS,
    CHANGE_PARENTS,
    CHANGE_PARENTS_DEL,
    CHANGE_PARENTS_DEL_L0,
    CHANGE_TEACHERS,
    changeEvents,
    changeGroups,
    changePeople
} from "../../store/actions";
import parentsCSS from "./parents/parents.module.css";
import {addKid, codPar} from "./parents/Parents";
import {addTea, codTea} from "./teachers/Teachers";

let gr, cState, dispatch, groupsInfo, evsIni;
gr = {
    group: 0
};

export let sit = "http://localhost:3000";

export function copyLink(e, link, name) {
    let title, text;
    title = "Внимание!";
    text = "Ссылка-приглашение для " + name + " успешно скопирована в буфер обмена.";
    navigator.clipboard.writeText(link);
    dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, 10));
}

export function gen_cod(){
    var password = "";
    var symbols = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    for (var i = 0; i < 15; i++){
        password += symbols.charAt(Math.floor(Math.random() * symbols.length));
    }
    return password;
}

export function refreshLink(e, sit, type) {
    let inp, id, title, text;
    title = "Внимание!";
    text = "Ссылка успешно обновлена"
    inp = e.target.parentElement.querySelector("input");
    if (inp.hasAttribute("data-id")) {
        id = inp.getAttribute("data-id").split("_");
        if(type == CHANGE_PARENTS){
            codPar(id[0], id[1], title, text);
            // dispatch(changePeople(type, id[0], "par", id[1], sit + "/invite/" + gen_cod(), "link"));
        } else {
            codTea(id[0], id[1], title, text);
            // dispatch(changePeople(type, id[0], id[1], undefined, sit + "/invite/" + gen_cod(), "link"));
        }
        // dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, 10));
    } else if (inp.hasAttribute("data-id1")) {
        id = inp.getAttribute("data-id1");
        dispatch(changePeople(type, 2, id, undefined, sit + "/invite/" + gen_cod(), "link"));
        dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, 10));
    }
}

export function onDel(e, type, info) {
    let par, inp, id;
    par = e.target.parentElement.parentElement;
    if(par.classList.contains(peopleCSS.pepl)){
        inp = par.querySelector("input:not([readOnly])");
        if (inp.hasAttribute("data-id")) {
            id = inp.getAttribute("data-id").split("_");
            if(type == CHANGE_PARENTS_DEL) {
                if(Object.getOwnPropertyNames(info[id[0]].par).length < 2){
                    dispatch(changePeople(CHANGE_PARENTS_DEL_L0, id[0]));
                } else {
                    dispatch(changePeople(type, id[0], "par", id[1]));
                }
            } else {
                dispatch(changePeople(type, id[0], id[1]));
            }
        } else if(inp.hasAttribute("data-id1")){
            let id = inp.getAttribute("data-id1");
            if(type == CHANGE_PARENTS_DEL) {
                dispatch(changePeople(type, "nw", "par", id));
            } else {
                dispatch(changePeople(type, 2, id));
            }
        }
    } else if(par.classList.contains(peopleCSS.nav_iZag)){
        if(e.target.hasAttribute("data-id1")){
            let id = e.target.getAttribute("data-id1");
            if(type == CHANGE_PARENTS_DEL_L0) {
                dispatch(changePeople(type, id));
            }
        }
    }
}

export function onEdit(e) {
    let par = e.target.parentElement;
    if(par.classList.contains(peopleCSS.add)){
        par.setAttribute('data-st', '1');
    }
    if(par.parentElement.classList.contains(peopleCSS.pepl)){
        par = par.parentElement;
        par.setAttribute('data-st', '1');
    }
}

export function onFin(e, inps, forceUpdate, type, info) {
    let par, inp;
    par = e.target.parentElement;
    if (par.classList.contains(parentsCSS.upr)) {
        par = par.parentElement;
        addKid({...info.nw}, inps.nyid, par);
        // dispatch(changePeople(CHANGE_PARENTS_L1, undefined, inps.nyid, undefined, {...info.nw}));
        // inps.nyid = undefined;
        // dispatch(changePeople(CHANGE_PARENTS_DEL_L1, "nw", "par"));
        par.setAttribute('data-st', '0');
        return;
    }
    if (par.classList.contains(peopleCSS.fi)){
        par = par.parentElement;
        let grop, id, inp;
        if(type == CHANGE_PARENTS) {
            inp = par.querySelector("input");
            par = par.parentElement;
            if(inp.hasAttribute("data-id1")) {
                id = inp.getAttribute("data-id1");
                grop = info[id] && info[id].par ? Object.getOwnPropertyNames(info[id].par) : [];
                let id1 = grop.length == 0 ? "id0" : "id" + (parseInt(grop[grop.length-1].replace("id", "")) + 1);
                dispatch(changePeople(type, id, "par", id1, inps.inpnpt));
            } else {
                grop = info.nw && info.nw.par ? Object.getOwnPropertyNames(info.nw.par) : [];
                id = grop.length == 0 ? "id0" : "id" + (parseInt(grop[grop.length-1].replace("id", "")) + 1);
                dispatch(changePeople(type, "nw", "par", id, inps.inpnpt));
            }
            par.setAttribute('data-st', '0');
        } else if(type == CHANGE_TEACHERS) {
            par = par.parentElement;
            addTea(inps.inpnpt, par);
            // dispatch(changePeople(type, "nt", "id8", undefined, inps.inpnpt));
        } else {
            par = par.parentElement;
            dispatch(changePeople(type, 2, "id8", undefined, inps.inpnpt));
            par.setAttribute('data-st', '0');
        }
        return;
    }
    inp = par.querySelector("input");
    if (inps[inp.id]) {
        inp.setAttribute("data-mod", '0');
        if(par.parentElement.classList.contains(peopleCSS.pepl)) {
            par = par.parentElement;
            if(type){
                if(inp.hasAttribute("data-id")){
                    let id = inp.getAttribute("data-id").split("_");
                    if(type == CHANGE_PARENTS) {
                        dispatch(changePeople(type, id[0], "par", id[1], inp.value));
                    } else {
                        dispatch(changePeople(type, id[0], id[1], undefined, inp.value));
                    }
                } else if(inp.hasAttribute("data-id1")){
                    let id = inp.getAttribute("data-id1");
                    if(type == CHANGE_PARENTS) {
                        dispatch(changePeople(type, "nw", "par", id, inp.value));
                    } else {
                        dispatch(changePeople(type, 2, id, undefined, inp.value));
                    }
                }
            } else {
                inps.inpnpt = inp.value;
                forceUpdate();
            }
        }
        par.setAttribute('data-st', '0');
    } else {
        inp.setAttribute("data-mod", '1');
    }
}

export function onClose(e, type) {
    let par = e.target.parentElement;
    if(par.parentElement.classList.contains(peopleCSS.pepl)){
        if(par.classList.contains(peopleCSS.fi) || type) {
            par = par.parentElement.parentElement;
        } else {
            par = par.parentElement;
        }
        par.setAttribute('data-st', '0');
    }
}
export function chStatB(e, inps) {
    let el = e.target;
    inps[el.id] = !el.validity.patternMismatch && el.value.length != 0;
    if (inps[el.id]) {
        el.setAttribute("data-mod", '0');
    } else {
        el.setAttribute("data-mod", '1');
    }
    el.parentElement.querySelector(".yes").setAttribute("data-enable", +inps[el.id]);
}

export function ele (x, par, inps) {
    if(!inps[par]) inps[par] = x;
}

function remGroupC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changeGroups(CHANGE_GROUPS_DEL_GRS, undefined, undefined, msg.id));
}

function chGroupC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changeGroups(CHANGE_GROUPS_GRS, undefined, msg.name, msg.id));
}

function addGroupC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changeGroups(CHANGE_GROUPS_GRS, undefined, msg.name, msg.id));
}

function onCon(e) {
    setGroups();
}

function setGroups() {
    send({
        uuid: cState.uuid
    }, 'POST', "hteachers", "getGroups")
        .then(data => {
            console.log(data);
            if(data.error == false){
                dispatch(changeGroups(CHANGE_GROUPS_GL, undefined, data.body));
                if(!data.body[groupsInfo.els.group]){
                    let grs = Object.getOwnPropertyNames(data.body);
                    dispatch(changeGroups(CHANGE_GROUPS_GR, undefined, parseInt(grs[0])));
                }
            }
        });
}

export function setActNew(name) {
    gr.group = name;
}

export function remGroup (id) {
    console.log("remGroup");
    send({
        uuid: cState.uuid,
        id: id
    }, 'POST', "hteachers", "remGroup")
}

export function chGroup (id, inp, par) {
    console.log("chGroup");
    send({
        uuid: cState.uuid,
        id: id,
        name: inp
    }, 'POST', "hteachers", "chGroup")
        .then(data => {
            console.log(data);
            if(data.error == false){
                par.setAttribute('data-st', '0');
            }
        });
}

export function addGroup (inp, par) {
    console.log("addGroup");
    send({
        uuid: cState.uuid,
        name: inp
    }, 'POST', "hteachers", "addGroup")
        .then(data => {
            console.log(data);
            if(data.error == false){
                par.setAttribute('data-st', '0');
            }
        });
}

export function setEvGr(cS, dis) {
    if(cS) cState = cS;
    if(dis) dispatch = dis;
    if(!evsIni) {
        evsIni = true;
        eventSource.addEventListener('addGroupC', addGroupC, false);
        eventSource.addEventListener('chGroupC', chGroupC, false);
        eventSource.addEventListener('remGroupC', remGroupC, false);
    }
}

export function PeopleMain() {
    cState = useSelector(states);
    groupsInfo = useSelector(groups);
    if(!dispatch && cState.role > 1){
        if(eventSource.readyState == EventSource.OPEN) setGroups();
        eventSource.addEventListener('connect', onCon, false);
        setEvGr();
    }
    dispatch = useDispatch();
    gr.groups = {
        0: cState.auth && (cState.role < 2 || cState.role == 3) ? {
            nam: "Педагоги",
            linke: "teachers"
        } : undefined,
        1: cState.auth ? {
            nam: "Завучи",
            linke: "hteachers"
        } : undefined,
        2: cState.auth && (cState.role == 0 || cState.role == 3) ? {
            nam: cState.role == 3 ? "Обучающиеся" : "Одноклассники",
            linke: "class"
        } : undefined,
        3: cState.auth && (cState.role == 0 || cState.role == 3) ? {
            nam: "Родители",
            linke: "parents"
        } : undefined,
        4: {
            nam: "Администраторы портала",
            linke: "admins"
        }
    };
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount PeopleMain.jsx");
        setActived(3);
        return function() {
            dispatch = undefined;
            eventSource.removeEventListener('connect', onCon);
            eventSource.removeEventListener('addGroupC', addGroupC);
            eventSource.removeEventListener('chGroupC', chGroupC);
            eventSource.removeEventListener('remGroupC', remGroupC);
            evsIni = false;
            console.log("I was triggered during componentWillUnmount PeopleMain.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate PeopleMain.jsx');
    });
    return (
        <div className={peopleCSS.AppHeader}>
            <div style={{width:"inherit", height: "7vh", position: "fixed", zIndex:"1"}}>
                <Pane gro={gr}/>
            </div>
            <Outlet />
        </div>
    )
}
export default PeopleMain;
.AppHeader {
	width: 100%;
	height: 93vh;
	display: flex;
	position: relative;
	top: 7vh;
}

.header {
	width: 100%;
	height: 86vh;
	display: flex;
	position: relative;
	top: 7vh;
}

.blockPep{
	text-align: center;
	margin: auto;
	width: 75%;
}

.pep{
	background-color: var(--bgcV1);
	padding: 10px;
	border-radius: 5px;
	transition: background-color 1s ease;
	margin-block: 5vh;
}

.nav_i{
	cursor: pointer;
	color: var(--cV1);
	font-size: 1.25vw;
	font-weight: 500;
	text-shadow: 1px 1px 3px var(--shdV1);
	-webkit-transition: color 1s ease;
	-o-transition: color 1s ease;
	transition: color 1s ease;
	transition-property: color, text-shadow;
	margin: -0.5px;
	padding: 5px;
	position: relative;
	backface-visibility: hidden;
	perspective: 1000px;
}

#nav_i:hover{
	color: #00ff00;
	text-shadow: 0 0 2vw #66ff66;
}

.nav_iZag{
	border: 1px solid var(--bcV1);
	text-align: initial;
	margin-block: 1vw;
	border-radius: 5px;
	position: relative;
}

.nav_iZag2{
	text-align: initial;
	margin-left: 2vw;
	border: none;
	display: inline-block;
	vertical-align: middle;
}

.nav_iZag1{
	margin-left: 1vw;
}

.profIm{
	width: 2vw;
	vertical-align: middle;
	cursor: pointer;
	margin-block: auto;
}

.add{
	margin-left: 1vw;
}

.pepl {
	color: var(--cV1);
	margin-bottom:5px;
	text-shadow: 1px 1px 3px var(--shdV1);
	transition: color 1s ease;
	font-size: initial;
	font-weight: normal;
	margin-block: 1em;
	display: block;
	transition-delay: unset;
	border: none;
	background-color: unset;
	position: relative;
}

.link{
	text-decoration: underline;
	cursor: pointer;
	transition-delay: unset;
	background-color: unset;
	display: none;
	justify-content: center;
}

.field{
	display: none;
	vertical-align: middle;
	margin-left: 5px;
}

.fi, .ed, .add[data-st='0'] > .pepl{
	display: none;
}

.add[data-st='1'] > .pepl, .pepl[data-st='1'] > .ed{
	display: block;
}

.add[data-st='0'] > .link, .pepl[data-st='0'] > .fi{
	display: flex;
}

.imginp, .imgfield{
	width: 1vw;
	vertical-align: middle;
	cursor: pointer;
	margin-left: 1vw;
	display: inline-block;
	margin-block: auto;
}

.inp {
	border-radius: 0.5vmax;
	background-color: #4d4d4d;
	user-select: none;
	box-shadow: 0 1px #FFFFFFAA, inset 0 2px 2px #000000AA;
	border: 1px solid var(--bcV2);
	height: 90%;
	position:relative;
	transition: background-color 1s ease;
	transition-property: background-color, border-color;
	vertical-align: middle;
	display: inline-block;
	width: 50%;
	font-size: 1.25vw;
	padding: 0 0 0 1vw;
	margin-left: 1vw;
}

.inp[data-mod='1']{
	animation: but ease 1s;
	outline: solid red;
}

@keyframes but {
	0%{transform: rotateZ(-2deg);}
	50%{transform: rotateZ(2deg);}
	100%{transform: rotateZ(0deg);}
}

*[data-enable="0"] {
	pointer-events: none;
	opacity: 0.4;
}

.field, .preinf{
	display: inline-block;
	vertical-align: middle;
	margin-left: 0.2vw;
	color: var(--cV1);
	text-shadow: 1px 1px 3px var(--shdV1);
}

.field{
	margin-left: 5px;
}

.copyInp{
	max-width: 25%;
	align-self: center;
	border-radius: unset;
}

.refrC{
	width: 2vw;
}
import React, {useEffect, useReducer, useRef} from "react";
import {Helmet} from "react-helmet-async";
import peopleCSS from "../peopleMain.module.css";
import {states, teachers, themes} from "../../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import {chStatB, copyLink, ele, onClose, onDel, onEdit, onFin, refreshLink, setActNew, sit} from "../PeopleMain";
import profl from "../../../media/profl.png";
import profd from "../../../media/profd.png";
import {useNavigate} from "react-router-dom";
import copyl from "../../../media/copyl.png";
import copyd from "../../../media/copyd.png";
import refreshCd from "../../../media/refreshCd.png";
import refreshCl from "../../../media/refreshCl.png";
import {
    CHANGE_EVENT,
    CHANGE_EVENTS_CLEAR,
    CHANGE_TEACHERS,
    CHANGE_TEACHERS_DEL,
    CHANGE_TEACHERS_GL,
    changeEvents,
    changePeople
} from "../../../store/actions";
import ed from "../../../media/edit.png";
import yes from "../../../media/yes.png";
import no from "../../../media/no.png";
import ErrFound from "../../other/error/ErrFound";
import {eventSource, send} from "../../main/Main";

let dispatch, teachersInfo, navigate, cState, themeState, inps, errText;
errText = "К сожалению, информация не найдена... Можете попробовать попросить завуча заполнить информацию.";
inps = {inpnpt : "Фамилия И.О."};
let [_, forceUpdate] = [];

function getTea(title, b, b1) {
    return (
        <div className={peopleCSS.nav_iZag}>
            <div className={peopleCSS.nav_i} id={peopleCSS.nav_i}>
                {title}
            </div>
            {b1 ?
                    <>
                        <div className={peopleCSS.add+" "+peopleCSS.nav_iZag} data-st="0">
                            <div className={peopleCSS.nav_i+" "+peopleCSS.link} id={peopleCSS.nav_i} onClick={onEdit}>
                                Добавить педагога
                            </div>
                            <div className={peopleCSS.pepl} data-st="0">
                                <div className={peopleCSS.fi}>
                                    <div className={peopleCSS.nav_i + " " + peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                                        {inps.inpnpt}
                                    </div>
                                    <img className={peopleCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                                    <img className={peopleCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate, CHANGE_TEACHERS)} title="Подтвердить" alt=""/>
                                    <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                                </div>
                                <div className={peopleCSS.ed}>
                                    <div className={peopleCSS.preinf}>
                                        ФИО:
                                    </div>
                                    <input className={peopleCSS.inp} id={"inpnpt_"} placeholder={"Фамилия И.О."} defaultValue={inps.inpnpt} onChange={(e)=>chStatB(e, inps)} type="text"/>
                                    {ele(false, "inpnpt_", inps)}
                                    <img className={peopleCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate)} title="Подтвердить" alt=""/>
                                    <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                                </div>
                            </div>
                        </div>
                        {teachersInfo.nt && Object.getOwnPropertyNames(teachersInfo.nt.tea).map((param, i, xs, info = teachersInfo.nt.tea[param]) =>
                            <div className={peopleCSS.nav_iZag + " " + peopleCSS.nav_iZag1} key={param}>
                                <div className={peopleCSS.pepl} data-st="0">
                                    <div className={peopleCSS.fi}>
                                        <div className={peopleCSS.nav_i + " " + peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                                            {info.name}
                                        </div>
                                        {info.login && <img className={peopleCSS.profIm} src={themeState.theme_ch ? profd : profl} onClick={e=>goToProf(info.login)} title="Так будет выглядеть иконка перехода в профиль" alt=""/>}
                                        <img className={peopleCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                                        <img className={peopleCSS.imginp} data-id={"nt_" + param} style={{marginRight: "1vw"}} src={no} onClick={(e)=>onDel(e, CHANGE_TEACHERS_DEL)} title="Удалить" alt=""/>
                                        <input className={peopleCSS.inp+" "+peopleCSS.copyInp} data-id={"nt_" + param} id={"inpcpt_" + param} placeholder="Ссылка не создана" value={info.link ? sit + (info.login ? "/reauth/" : "/invite/") + info.link : undefined} type="text" readOnly/>
                                        <img className={peopleCSS.imginp+" "+peopleCSS.refrC} src={themeState.theme_ch ? refreshCd : refreshCl} onClick={(e)=>refreshLink(e, sit, CHANGE_TEACHERS)} title="Создать ссылку-приглашение" alt=""/>
                                        <img className={peopleCSS.imginp} src={themeState.theme_ch ? copyd : copyl} title="Копировать" data-enable={info.link ? "1" : "0"} onClick={(e)=>copyLink(e, info.link, info.name)} alt=""/>
                                    </div>
                                    <div className={peopleCSS.ed}>
                                        <div className={peopleCSS.preinf}>
                                            ФИО:
                                        </div>
                                        <input className={peopleCSS.inp} data-id={"nt_" + param} id={"inpnpt_nt" + param} placeholder={"Фамилия И.О."} defaultValue={info.name} onChange={(e)=>chStatB(e, inps)} type="text"/>
                                        {ele(false, "inpnpt_nt_" + param, inps)}
                                        <img className={peopleCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate, CHANGE_TEACHERS)} title="Подтвердить" alt=""/>
                                        <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                                    </div>
                                </div>
                            </div>
                        )}
                    </>
                :
                    Object.getOwnPropertyNames(teachersInfo).map((param, i, xs, info = teachersInfo[param]) =>
                        param != "nt" &&
                        <div className={peopleCSS.nav_iZag + " " + peopleCSS.nav_iZag1} key={param}>
                            <div className={peopleCSS.nav_i} id={peopleCSS.nav_i}>
                                {info.name}
                            </div>
                            {Object.getOwnPropertyNames(info.tea).map((param1, i1, xs1, info1 = info.tea[param1]) =>
                                b ?
                                    <div className={peopleCSS.pepl} key={param1} data-st="0">
                                        <div className={peopleCSS.fi}>
                                            <div className={peopleCSS.nav_i + " " + peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                                                {info1.name}
                                            </div>
                                            {info1.login && <img className={peopleCSS.profIm} src={themeState.theme_ch ? profd : profl} onClick={e=>goToProf(info1.login)} title="Так будет выглядеть иконка перехода в профиль" alt=""/>}
                                            <img className={peopleCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                                            <img className={peopleCSS.imginp} data-id={param + "_" + param1} style={{marginRight: "1vw"}} src={no} onClick={(e)=>onDel(e, CHANGE_TEACHERS_DEL)} title="Удалить" alt=""/>
                                            <input className={peopleCSS.inp+" "+peopleCSS.copyInp} data-id={param + "_" + param1} id={"inpcpt_" + param + "_" + param1} placeholder="Ссылка не создана" value={info1.link ? sit + (info1.login ? "/reauth/" : "/invite/") + info.tea[param1].link : undefined} type="text" readOnly/>
                                            <img className={peopleCSS.imginp+" "+peopleCSS.refrC} src={themeState.theme_ch ? refreshCd : refreshCl} onClick={(e)=>refreshLink(e, sit, CHANGE_TEACHERS)} title="Создать ссылку-приглашение" alt=""/>
                                            <img className={peopleCSS.imginp} src={themeState.theme_ch ? copyd : copyl} title="Копировать" data-enable={info1.link ? "1" : "0"} onClick={(e)=>copyLink(e, info1.link, info1.name)} alt=""/>
                                        </div>
                                        <div className={peopleCSS.ed}>
                                            <div className={peopleCSS.preinf}>
                                                ФИО:
                                            </div>
                                            <input className={peopleCSS.inp} data-id={param + "_" + param1} id={"inpnpt_" + param + "_" + param1} placeholder={"Фамилия И.О."} defaultValue={info1.name} onChange={(e)=>chStatB(e, inps)} type="text"/>
                                            {ele(false, "inpnpt_" + param + "_" + param1, inps)}
                                            <img className={peopleCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate, CHANGE_TEACHERS)} title="Подтвердить" alt=""/>
                                            <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                                        </div>
                                    </div>
                                :
                                    <div key={param1}>
                                        <div className={peopleCSS.nav_i + " " + peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                                            {info1.name}
                                        </div>
                                        {info1.login && <img className={peopleCSS.profIm} src={themeState.theme_ch ? profd : profl} onClick={e=>goToProf(info1.login)} title="Перейти в профиль" alt=""/>}
                                    </div>
                            )}
                        </div>
                    )
            }
        </div>
    );
}

function goToProf(log) {
    if(log) navigate("/profiles/" + log);
}

function addTeaC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(CHANGE_TEACHERS, "nt", msg.id, undefined, msg.name));
}

function codPepL1C(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(CHANGE_TEACHERS, msg.id, msg.id1, undefined, msg.code, "link"));
}

export function codTea (id, id1, title, text) {
    console.log("codPar");
    send({
        uuid: cState.uuid,
        id: id,
        id1: id1,
        role: cState.role
    }, 'POST', "teachers", "setCodePep")
        .then(data => {
            console.log(data);
            if(data.error == false){
                dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, 10));
                // dispatch(changePeople(CHANGE_PARENTS_L1, undefined, data.id, undefined, data.body));
            }
        });
}

export function addTea(inp, par) {
    console.log("addTea");
    send({
        uuid: cState.uuid,
        name: inp
    }, 'POST', "teachers", "addTea")
        .then(data => {
            console.log(data);
            if(data.error == false){
                // dispatch(changePeople(CHANGE_TEACHERS, "nt", data.id, undefined, data.name));
                par.setAttribute('data-st', '0');
            }
        });
}

function onCon(e) {
    setInfo();
}

function setInfo() {
    send({
        uuid: cState.uuid
    }, 'POST', "teachers", "getTeachers")
        .then(data => {
            console.log(data);
            if(data.error == false){
                dispatch(changePeople(CHANGE_TEACHERS_GL, 0, 0, 0, data.body));
            }
        });
}

export function Teachers() {
    teachersInfo = useSelector(teachers);
    themeState = useSelector(themes);
    cState = useSelector(states);
    navigate = useNavigate();
    if(!dispatch) {
        setActNew(0);
        if(eventSource.readyState == EventSource.OPEN) setInfo();
        eventSource.addEventListener('connect', onCon, false);
        eventSource.addEventListener('addTeaC', addTeaC, false);
        eventSource.addEventListener('codPepL1C', codPepL1C, false);
    }
    [_, forceUpdate] = useReducer((x) => x + 1, 0);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount Teachers.jsx");
        for(let el of document.querySelectorAll("." + peopleCSS.ed + " > *[id^='inpn']")){
            chStatB({target: el}, inps);
        }
        return function() {
            dispatch(changeEvents(CHANGE_EVENTS_CLEAR));
            dispatch = undefined;
            eventSource.removeEventListener('connect', onCon);
            eventSource.removeEventListener('addTeaC', addTeaC);
            eventSource.removeEventListener('codPepL1C', codPepL1C);
            console.log("I was triggered during componentWillUnmount Teachers.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate Teachers.jsx');
    });
    return (
        <div className={peopleCSS.header}>
            <Helmet>
                <title>Педагоги</title>
            </Helmet>
            {(cState.auth && cState.role == 3) ?
                    <div className={peopleCSS.blockPep}>
                        <div className={peopleCSS.pep}>
                            {getTea("Нераспределённые педагоги", true, true)}
                            {getTea("Педагоги", true)}
                        </div>
                    </div>
                :
                    Object.getOwnPropertyNames(teachersInfo).length == 0 ?
                            <ErrFound text={errText}/>
                        :
                            <div className={peopleCSS.blockPep}>
                                <div className={peopleCSS.pep}>
                                    {getTea("Мои педагоги")}
                                </div>
                            </div>
            }
        </div>
    )
}
export default Teachers;
import React, {useEffect, useReducer, useRef} from "react";
import {Helmet} from "react-helmet-async";
import peopleCSS from '../peopleMain.module.css';
import parentsCSS from './parents.module.css';
import {useNavigate} from "react-router-dom";
import {classmates, groups, parents, states, themes} from "../../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import {chStatB, copyLink, ele, onClose, onDel, onEdit, onFin, refreshLink, setActNew, sit} from "../PeopleMain";
import profl from "../../../media/profl.png";
import profd from "../../../media/profd.png";
import Pane from "../../other/pane/Pane";
import ErrFound from "../../other/error/ErrFound";
import mapd from "../../../media/Map_symbolD.png";
import mapl from "../../../media/Map_symbolL.png";
import {
    CHANGE_CLASSMATES_GL,
    CHANGE_EVENT,
    CHANGE_EVENTS_CLEAR,
    CHANGE_PARENTS,
    CHANGE_PARENTS_DEL,
    CHANGE_PARENTS_DEL_L0,
    CHANGE_PARENTS_DEL_L1,
    CHANGE_PARENTS_GL,
    CHANGE_PARENTS_L1,
    CHANGE_PARENTS_L1_PARAM,
    changeEvents,
    changePeople
} from "../../../store/actions";
import ed from "../../../media/edit.png";
import yes from "../../../media/yes.png";
import no from "../../../media/no.png";
import refreshCd from "../../../media/refreshCd.png";
import refreshCl from "../../../media/refreshCl.png";
import copyd from "../../../media/copyd.png";
import copyl from "../../../media/copyl.png";
import {eventSource, send} from "../../main/Main";

let dispatch, parentsInfo, navigate, groupsInfo, selGr, classmatesInfo, errText, inps, themeState, cState;
errText = "К сожалению, информация не найдена... Можете попробовать попросить завуча заполнить информацию.";
inps = {nyid : undefined, inpnpt : "Фамилия И.О."};
selGr = 0;
let [_, forceUpdate] = [];

function selecKid(e, id) {
    inps.nyid = id;
    dispatch(changePeople(CHANGE_PARENTS_L1_PARAM, undefined, "nw", undefined, classmatesInfo[inps.nyid].name));
}

function getKids() {
    let lpI = Object.getOwnPropertyNames(classmatesInfo);
    for(let i = 0; i < lpI.length; i++){
        if(parentsInfo[lpI[i]]) {
            lpI.splice(i, 1);
            i--;
        }
    }
    if(lpI.length > 0 && !inps.nyid) {
        inps.nyid = lpI[0];
        dispatch(changePeople(CHANGE_PARENTS_L1_PARAM, undefined, "nw", undefined, classmatesInfo[inps.nyid].name));
    }
    inps.ppI = inps.nyid && parentsInfo.nw.par ? Object.getOwnPropertyNames(parentsInfo.nw.par) : [];
    return (inps.nyid &&
        <div className={parentsCSS.blockList}>
            <div className={peopleCSS.nav_i+' '+parentsCSS.selEl} id={peopleCSS.nav_i}>
                <div className={parentsCSS.elInf}>Ученик:</div>
                <div className={parentsCSS.elText}>{parentsInfo.nw.name}</div>
                <img className={parentsCSS.mapImg} data-enablem={lpI.length < 2 ? "0" : "1"} src={themeState.theme_ch ? mapd : mapl} alt=""/>
            </div>
            <div className={parentsCSS.list}>
                {parentsInfo && lpI.map(param1 =>
                    param1 != inps.nyid &&
                    <div className={peopleCSS.nav_i+' '+parentsCSS.listEl} key={param1} id={peopleCSS.nav_i} onClick={(e) => (selecKid(e, param1))}>
                        <div className={parentsCSS.elInf}>Ученик:</div>
                        <div className={parentsCSS.elText}>{classmatesInfo[param1].name}</div>
                    </div>
                )}
            </div>
        </div>
    )
}

function getAddPred(param) {
    return(
        <div className={peopleCSS.add+" "+peopleCSS.nav_iZag} data-st="0">
            <div className={peopleCSS.nav_i+" "+peopleCSS.link} id={peopleCSS.nav_i} onClick={onEdit}>
                Добавить представителя
            </div>
            <div className={peopleCSS.pepl} data-st="0">
                <div className={peopleCSS.fi}>
                    <div className={peopleCSS.nav_i + " " + peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                        {inps.inpnpt}
                    </div>
                    <img className={peopleCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                    <img className={peopleCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate, CHANGE_PARENTS, parentsInfo)} title="Подтвердить" alt=""/>
                    <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Выйти из режима создания" alt=""/>
                </div>
                <div className={peopleCSS.ed}>
                    <div className={peopleCSS.preinf}>
                        ФИО:
                    </div>
                    <input className={peopleCSS.inp} data-id1={param ? param : undefined} id={"inpnpt_"} placeholder={"Фамилия И.О."} defaultValue={inps.inpnpt} onChange={(e)=>chStatB(e, inps)} type="text"/>
                    {ele(false, "inpnpt_", inps)}
                    <img className={peopleCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate)} title="Подтвердить" alt=""/>
                    <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                </div>
            </div>
        </div>
    )
}

function getAdd() {
    return (
        <div className={peopleCSS.add+" "+peopleCSS.nav_iZag} data-st="0">
            <div className={peopleCSS.nav_i+" "+peopleCSS.link} data-enable={inps.nyid ? 1 : 0} id={peopleCSS.nav_i} onClick={onEdit}>
                Добавить ученику представителей
            </div>
            <div className={peopleCSS.pepl} style={{marginBlock: "unset"}}>
                <div className={parentsCSS.uch}>
                    <div className={peopleCSS.nav_i+" "+parentsCSS.nam} id={peopleCSS.nav_i}>
                        Обучающийся:
                    </div>
                    {getKids()}
                    <div className={peopleCSS.nav_i} id={peopleCSS.nav_i}>
                        {inps.ppI.length > 1 ? "Представители:" : "Представитель:"}
                    </div>
                </div>
                {getAddPred()}
                {inps.ppI.map((param1, i, xs, info = parentsInfo.nw.par[param1]) =>
                    <div className={peopleCSS.pepl} data-st="0" key={param1}>
                        <div className={peopleCSS.fi}>
                            <div className={peopleCSS.nav_i+" "+peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                                {info.name}
                            </div>
                            <img className={peopleCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                            <img className={peopleCSS.imginp} data-id={param1} style={{marginRight: "1vw"}} src={no} onClick={(e)=>onDel(e, CHANGE_PARENTS_DEL)} title="Удалить" alt=""/>
                        </div>
                        <div className={peopleCSS.ed}>
                            <div className={peopleCSS.preinf}>
                                ФИО:
                            </div>
                            <input className={peopleCSS.inp} data-id1={param1} id={"inpnpt_" + param1} placeholder={"Фамилия И.О."} defaultValue={info.name} onChange={(e)=>chStatB(e, inps)} type="text"/>
                            {ele(false, "inpnpt_" + param1, inps)}
                            <img className={peopleCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate, CHANGE_PARENTS, parentsInfo)} title="Подтвердить" alt=""/>
                            <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                        </div>
                    </div>
                )}
                <div className={parentsCSS.upr}>
                    <img className={peopleCSS.imginp+" yes "} src={yes} data-enable={(parentsInfo.nw && parentsInfo.nw.par && Object.getOwnPropertyNames(parentsInfo.nw.par).length > 0) ? "1" : "0"} onClick={(e)=>onFin(e, inps, forceUpdate, CHANGE_PARENTS, parentsInfo)} title="Подтвердить" alt=""/>
                    <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={(e)=>onClose(e, true)} title="Выйти из режима создания" alt=""/>
                </div>
            </div>
        </div>
    );
}

function getParents (pI, b) {
    return b ?
            <>
                {getAdd()}
                {pI.map((param, i, xs, info = parentsInfo[param], ppI = info.par ? Object.getOwnPropertyNames(info.par) : [])=>
                    (param != "nw" && info.par) &&
                    <div className={peopleCSS.nav_iZag+" "+peopleCSS.nav_iZag1} key={param}>
                        <div className={parentsCSS.uch}>
                            <div className={peopleCSS.nav_i+" "+parentsCSS.nam} id={peopleCSS.nav_i}>
                                Обучающийся: {info.name}
                            </div>
                            {info.login && <img className={peopleCSS.profIm} src={themeState.theme_ch ? profd : profl} onClick={e=>goToProf(info.login)} title="Перейти в профиль" alt=""/>}
                            <div className={peopleCSS.nav_i} id={peopleCSS.nav_i}>
                                {ppI.length > 1 ? "Представители:" : "Представитель:"}
                            </div>
                        </div>
                        {getAddPred(param)}
                        {ppI.map((param1, i1, xs1, info1 = info.par[param1]) =>
                            <div className={peopleCSS.pepl} data-st="0" key={param1}>
                                <div className={peopleCSS.fi}>
                                    <div className={peopleCSS.nav_i+" "+peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                                        {info1.name}
                                    </div>
                                    {info1.login && <img className={peopleCSS.profIm} src={themeState.theme_ch ? profd : profl} onClick={e=>goToProf(info1.login)} title="Перейти в профиль" alt=""/>}
                                    <img className={peopleCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                                    <img className={peopleCSS.imginp} data-id={param + "_" + param1} style={{marginRight: "1vw"}} src={no} onClick={(e)=>onDel(e, CHANGE_PARENTS_DEL, parentsInfo)} title="Удалить" alt=""/>
                                    <input className={peopleCSS.inp+" "+peopleCSS.copyInp} data-id={param + "_" + param1} id={"inpcpt_" + param + "_" + param1} placeholder="Ссылка не создана" defaultValue={info1.link ? sit + (info1.login ? "/reauth/" : "/invite/") + info1.link : undefined} type="text" readOnly/>
                                    <img className={peopleCSS.imginp+" "+peopleCSS.refrC} src={themeState.theme_ch ? refreshCd : refreshCl} onClick={(e)=>refreshLink(e, sit, CHANGE_PARENTS)} title="Создать ссылку-приглашение" alt=""/>
                                    <img className={peopleCSS.imginp} src={themeState.theme_ch ? copyd : copyl} title="Копировать" data-enable={info1.link ? "1" : "0"} onClick={(e)=>copyLink(e, info1.link, info1.name)} alt=""/>
                                </div>
                                <div className={peopleCSS.ed}>
                                    <div className={peopleCSS.preinf}>
                                        ФИО:
                                    </div>
                                    <input className={peopleCSS.inp} data-id={param + "_" + param1} id={"inpnpt_" + param1} placeholder={"Фамилия И.О."} defaultValue={info1.name} onChange={(e)=>chStatB(e, inps)} type="text"/>
                                    {ele(false, "inpnpt_" + param + "_" + param1, inps)}
                                    <img className={peopleCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate, CHANGE_PARENTS, parentsInfo)} title="Подтвердить" alt=""/>
                                    <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                                </div>
                            </div>
                        )}
                        <div className={parentsCSS.upr}>
                            <img className={peopleCSS.imginp} data-id1={param} style={{marginRight: "1vw"}} src={no} onClick={(e)=>onDel(e, CHANGE_PARENTS_DEL_L0)} title="Удалить" alt=""/>
                        </div>
                    </div>
                )}
            </>
        :
            pI.map((param, i, xs, info = parentsInfo[param], ppI = info.par ? Object.getOwnPropertyNames(info.par) : []) =>
                info.par &&
                <div className={peopleCSS.nav_iZag+" "+peopleCSS.nav_iZag1} key={param}>
                    <div className={parentsCSS.uch}>
                        <div className={peopleCSS.nav_i+" "+parentsCSS.nam} id={peopleCSS.nav_i}>
                            Обучающийся: {info.name}
                        </div>
                        {info.login && <img className={peopleCSS.profIm} src={themeState.theme_ch ? profd : profl} onClick={e=>goToProf(info.login)} title="Перейти в профиль" alt=""/>}
                        <div className={peopleCSS.nav_i} id={peopleCSS.nav_i}>
                            {ppI.length > 1 ? "Представители:" : "Представитель:"}
                        </div>
                    </div>
                    {ppI.map((param1, i1, xs1, info1 = info.par[param1]) =>
                        <div key={param1}>
                            <div className={peopleCSS.nav_i+" "+peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                                {info1.name}
                            </div>
                            {info1.login && <img className={peopleCSS.profIm} src={themeState.theme_ch ? profd : profl} onClick={e=>goToProf(info1.login)} title="Перейти в профиль" alt=""/>}
                        </div>
                    )}
                </div>
            )
}

function goToProf(log) {
    if(log) navigate("/profiles/" + log);
}

function codPepL1C(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(CHANGE_PARENTS, msg.id, "par", msg.id1, msg.code, "link"));
}

export function codPar (id, id1, title, text) {
    console.log("codPar");
    send({
        uuid: cState.uuid,
        id: id,
        id1: id1,
        role: cState.role
    }, 'POST', "parents", "setCodePep")
        .then(data => {
            console.log(data);
            if(data.error == false){
                dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, 10));
                // dispatch(changePeople(CHANGE_PARENTS_L1, undefined, data.id, undefined, data.body));
            }
        });
}

function addKidC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(CHANGE_PARENTS_L1, undefined, msg.id, undefined, msg.body));
}

export function addKid (bod, id, par) {
    console.log("addKid");
    send({
        uuid: cState.uuid,
        bod: bod,
        id: id
    }, 'POST', "parents", "addKid")
        .then(data => {
            console.log(data);
            if(data.error == false){
                // dispatch(changePeople(CHANGE_PARENTS_L1, undefined, data.id, undefined, data.body));
                id = undefined;
                dispatch(changePeople(CHANGE_PARENTS_DEL_L1, "nw", "par"));
                par.setAttribute('data-st', '0');
            }
        });
}

function onCon(e) {
    if(groupsInfo.group) setInfo();
}

function setInfo() {
    send({
        uuid: cState.uuid,
        group: groupsInfo.group
    }, 'POST', "parents", "getInfo")
        .then(data => {
            console.log(data);
            if(data.error == false){
                selGr = groupsInfo.group;
                dispatch(changePeople(CHANGE_CLASSMATES_GL, undefined, undefined, undefined, data.bodyC));
                dispatch(changePeople(CHANGE_PARENTS_GL, undefined, undefined, undefined, data.bodyP));
            }
        });
}

export function Parents() {
    parentsInfo = useSelector(parents);
    classmatesInfo = useSelector(classmates);
    themeState = useSelector(themes);
    cState = useSelector(states);
    groupsInfo = useSelector(groups);
    navigate = useNavigate();
    if(!dispatch) {
        setActNew(3);
        if(eventSource.readyState == EventSource.OPEN) setInfo();
        eventSource.addEventListener('connect', onCon, false);
        eventSource.addEventListener('addKidC', addKidC, false);
        eventSource.addEventListener('codPepL1C', codPepL1C, false);
    }
    [_, forceUpdate] = useReducer((x) => x + 1, 0);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount Parents.jsx");
        return function() {
            dispatch(changeEvents(CHANGE_EVENTS_CLEAR));
            dispatch = undefined;
            eventSource.removeEventListener('connect', onCon);
            eventSource.removeEventListener('addKidC', addKidC);
            eventSource.removeEventListener('codPepL1C', codPepL1C);
            console.log("I was triggered during componentWillUnmount Parents.jsx");
        }
    }, []);
    let pI = Object.getOwnPropertyNames(parentsInfo);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        if(selGr != groupsInfo.group){
            if(eventSource.readyState == EventSource.OPEN) setInfo();
        }
        console.log('componentDidUpdate Parents.jsx');
    });
    return (
        <div className={peopleCSS.header}>
            <Helmet>
                <title>Родители</title>
            </Helmet>
            {pI.length == 0 ?
                    <ErrFound text={errText}/>
                :
                    <>
                        {(cState.auth && cState.role == 3) &&
                            <div className={parentsCSS.pane}>
                                <Pane cla={true}/>
                            </div>
                        }
                        <div className={peopleCSS.blockPep} style={{marginTop: (cState.auth && cState.role == 3) ? "7vh" : undefined}}>
                            <div className={peopleCSS.pep}>
                                <div className={peopleCSS.nav_iZag}>
                                    <div className={peopleCSS.nav_i} id={peopleCSS.nav_i}>
                                        Родители
                                    </div>
                                    {getParents(pI, (cState.auth && cState.role == 3))}
                                </div>
                            </div>
                        </div>
                    </>
            }
        </div>
    )
}
export default Parents;
.uch > .nam{
	display: inline-block;
	vertical-align: middle;
}

.pane{
	width: inherit;
	height: 7vh;
	position: fixed;
	z-index: 1;
}

.blockList{
	position: relative;
	margin-inline: -0.5px;
	display: inline-block;
	margin-left: -1px;
	vertical-align: middle;
}

.selEl, .listEl{
	display: grid !important;
	justify-items: center;
	margin-inline: 0;
	font-weight: 500;
	background-color: var(--bgcV1);
	border: 1px solid var(--bcV1);
}

.selEl{
	grid-template: auto auto / auto auto;
	margin-block: -0.5px;
}

.listEl{
	grid-template: auto / auto;
	padding: 0;
	height: 33%;
	margin-bottom: -2px;
}

.selEl img, .listEl img{
	width: 2vw;
	grid-row: 1/3;
	margin-right: 0.25vw;
}

.selEl:hover + .list, .list:hover, .listEl:hover + .list{
	opacity: 1;
	top: 100%;
}

.list{
	position: absolute;
	width: 100%;
	height: 300%;
	top: -300%;
	transition: top 1s ease;
	transition-property: top, opacity;
	opacity: 0;
	z-index: 1;
	overflow: auto;
}

.elText{
	align-self: baseline;
	font-size: 0.75vw;
}

.elInf{
	align-self: end;
	font-size: 1.25vw;
}

.mapImg{
	width: 2vw;
	vertical-align: middle;
	cursor: pointer;
	margin: 0 0.1vw;
	grid-column: 2;
}

.upr{
	position: absolute;
	top: 0;
	right: 0;
}

*[data-enablem="0"] {
	visibility: hidden;
}
import React, {useEffect, useReducer, useRef} from "react";
import {Helmet} from "react-helmet-async";
import {useNavigate} from "react-router-dom";
import peopleCSS from '../peopleMain.module.css';
import {hteachers, states, themes} from "../../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import {ele, setActNew, sit} from "../PeopleMain";
import profl from "../../../media/profl.png";
import profd from "../../../media/profd.png";
import ErrFound from "../../other/error/ErrFound";
import ed from "../../../media/edit.png";
import yes from "../../../media/yes.png";
import no from "../../../media/no.png";
import {
    CHANGE_EVENT,
    CHANGE_EVENTS_CLEAR,
    CHANGE_HTEACHERS,
    CHANGE_HTEACHERS_DEL,
    CHANGE_HTEACHERS_DEL_L2,
    CHANGE_HTEACHERS_EL_GL,
    CHANGE_HTEACHERS_GL,
    CHANGE_HTEACHERS_L2,
    CHANGE_HTEACHERS_L2_GL,
    changeEvents,
    changePeople
} from "../../../store/actions";
import refreshCd from "../../../media/refreshCd.png";
import refreshCl from "../../../media/refreshCl.png";
import copyd from "../../../media/copyd.png";
import copyl from "../../../media/copyl.png";
import {eventSource, send} from "../../main/Main";

let dispatch, errText, cState, inps, navigate, hteachersInfo, themeState, tps;
errText = "К сожалению, информация не найдена... Можете попробовать попросить завуча заполнить информацию.";
inps = {inpnpt : "Поле для ввода"};
tps = {
    "ht" : {
        del : CHANGE_HTEACHERS_DEL,
        ch: CHANGE_HTEACHERS,
        el_gl: CHANGE_HTEACHERS_EL_GL
    },
    "ht4" : {
        del : CHANGE_HTEACHERS_DEL,
        ch: CHANGE_HTEACHERS,
        el_gl: CHANGE_HTEACHERS_EL_GL
    },
    "ht4L2" : {
        del : CHANGE_HTEACHERS_DEL_L2,
        ch: CHANGE_HTEACHERS_L2,
        el_gl: CHANGE_HTEACHERS_L2_GL
    }
};
let [_, forceUpdate] = [];

function copyLink(e, link, name) {
    let title, text;
    title = "Внимание!";
    text = "Ссылка-приглашение для " + name + " успешно скопирована в буфер обмена.";
    navigator.clipboard.writeText(link);
    dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, 10));
}

function refreshLink(e) {
    let inp, id, title, text;
    title = "Внимание!";
    text = "Ссылка успешно обновлена";
    inp = e.target.parentElement.parentElement.querySelector("input:not([readOnly])");
    if (inp.hasAttribute("data-id")) {
        id = inp.getAttribute("data-id").split("_");
        send({
            uuid: cState.uuid,
            id: id[0],
            id1: id[1]
        }, 'POST', "auth/setCodePep")
            .then(data => {
                console.log(data);
                if(data.error == false){
                    dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, 10));
                }
            });
    } else if (inp.hasAttribute("data-id1")) {
        id = inp.getAttribute("data-id1").split("_");
        // dispatch(changePeople(type, 2, id, undefined, sit + (id[0] ? "/reauth/" : "/invite/") + gen_cod(), "link"));
        // dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, 10));
        send({
            uuid: cState.uuid,
            id: id[1],
            id1: id[0]
        }, 'POST', "auth/setCodePep")
            .then(data => {
                console.log(data);
                if(data.error == false){
                    dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, 10));
                }
            });
    }
}

function onDel(e) {
    let par, inp, id;
    par = e.target.parentElement.parentElement;
    if(par.classList.contains(peopleCSS.pepl)){
        inp = par.querySelector("input:not([readOnly])");
        if (inp.hasAttribute("data-id")) {
            id = inp.getAttribute("data-id").split("_");
            // dispatch(changePeople(type, 0, id[0], id[1]));
            remPep(id[0], id[1]);
        } else if(inp.hasAttribute("data-id1")){
            let id = inp.getAttribute("data-id1").split("_");
            // dispatch(changePeople(type, 2, id));
            if(cState.role == 4) {
                remSch(id[0]);
            } else if(cState.role == 3) {
                remPep(id[1], id[0]);
            }
        }
    }
}

function onEdit(e) {
    let par;
    par = e.target.parentElement;
    if(par.classList.contains(peopleCSS.add)){
        par.setAttribute('data-st', '1');
    }
    if(par.parentElement.classList.contains(peopleCSS.pepl)){
        par = par.parentElement;
        par.setAttribute('data-st', '1');
    }
}

function onFin(e, type) {
    let par, inp;
    par = e.target.parentElement;
    if (par.classList.contains(peopleCSS.fi)){
        par = par.parentElement;
        if(type == CHANGE_HTEACHERS_L2){
            par = par.parentElement;
            if(e.target.hasAttribute("data-id1")){
                let id = e.target.getAttribute("data-id1");
                addPep(par, id, inps.inpnpt);
                // dispatch(changePeople(type, 2, id, "id8", inps.inpnpt));
            }
        } else {
            par = par.parentElement;
            if(cState.role == 4) {
                addSch(par, inps.inpnpt);
            } else if(cState.role == 3) {
                addPep(par, undefined, inps.inpnpt);
            }
        }
        // par.setAttribute('data-st', '0');
        return;
    }
    inp = par.querySelector("input");
    if (inps[inp.id]) {
        inp.setAttribute("data-mod", '0');
        if(par.parentElement.classList.contains(peopleCSS.pepl)) {
            par = par.parentElement;
            if(type){
                if(inp.hasAttribute("data-id")){
                    let id = inp.getAttribute("data-id").split("_");
                    chPep(par, id[0], id[1], inp.value);
                    // dispatch(changePeople(type, 0, id[0], id[1], inp.value));
                } else if(inp.hasAttribute("data-id1")){
                    let id = inp.getAttribute("data-id1").split("_");
                    if(cState.role == 4) {
                        chSch(par, id[0], inp.value);
                    } else if(cState.role == 3) {
                        chPep(par, id[1], id[0], inp.value);
                    }
                }
            } else {
                inps.inpnpt = inp.value;
                forceUpdate();
                par.setAttribute('data-st', '0');
            }
        }
        // par.setAttribute('data-st', '0');
    } else {
        inp.setAttribute("data-mod", '1');
    }
}

function onClose(e) {
    let par = e.target.parentElement;
    if(par.parentElement.classList.contains(peopleCSS.pepl)){
        if(par.classList.contains(peopleCSS.fi)) {
            par = par.parentElement.parentElement;
        } else {
            par = par.parentElement;
        }
        par.setAttribute('data-st', '0');
    }
}

function chStatB(e) {
    let el = e.target;
    inps[el.id] = !el.validity.patternMismatch && el.value.length != 0;
    if (inps[el.id]) {
        el.setAttribute("data-mod", '0');
    } else {
        el.setAttribute("data-mod", '1');
    }
    el.parentElement.querySelector(".yes").setAttribute("data-enable", +inps[el.id]);
}

function goToProf(log) {
    if(log) navigate("/profiles/" + log);
}

function onCon(e) {
    setInfo();
}

function codPepL2C(e) {
    console.log(e.data);
    const msg = JSON.parse(e.data);
    dispatch(changePeople(tps.ht4L2.ch, 0, msg.id1, msg.id, msg.code, "link"));
}

function codPepL1C(e) {
    console.log(e.data);
    const msg = JSON.parse(e.data);
    dispatch(changePeople(tps.ht4.ch, 0, msg.id, undefined, msg.code, "link"));
}

function remInfoL1C(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(tps.ht4.del, 0, msg.id));
}

function chInfoL1C(e) {
    const msg = JSON.parse(e.data);
    console.log(msg);
    dispatch(changePeople(tps.ht4.ch, 0, msg.id, undefined, msg.name));
}

function addInfoL1C(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(tps.ht4.el_gl, 0, msg.id, undefined, msg.body));
}

function remInfoL2C(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(tps.ht4L2.del, 0, msg.id1, msg.id));
}

function chInfoL2C(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(tps.ht4L2.ch, 0, msg.id1, msg.id, msg.name));
}

function addInfoL2C(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(tps.ht4L2.el_gl, 0, msg.id1, msg.id, msg.body));
}

function addSch (par, inp) {
    console.log("addSch");
    send({
        uuid: cState.uuid,
        name: inp
    }, 'POST', "hteachers", "addSch")
        .then(data => {
            console.log(data);
            if(data.error == false){
                par.setAttribute('data-st', '0');
            }
        });
}

function remSch (id) {
    console.log("remSch");
    send({
        uuid: cState.uuid,
        id: id
    }, 'POST', "hteachers", "remSch")
}

function chSch (par, id, inp) {
    console.log("chSch");
    send({
        uuid: cState.uuid,
        id: id,
        name: inp
    }, 'POST', "hteachers", "chSch")
        .then(data => {
            console.log(data);
            if(data.error == false){
                par.setAttribute('data-st', '0');
            }
        });
}

function remPep (id, id1) {
    console.log("remInv");
    send({
        uuid: cState.uuid,
        id: id,
        id1: id1,
        role: cState.role
    }, 'POST', "hteachers", "remPep")
}

function chPep (par, id, id1, inp) {
    console.log("changeInv");
    send({
        uuid: cState.uuid,
        id: id,
        id1: id1,
        name: inp,
        role: cState.role
    }, 'POST', "hteachers", "chPep")
        .then(data => {
            console.log(data);
            if(data.error == false){
                par.setAttribute('data-st', '0');
            }
        });
}

function addPep (par, id, inp) {
    console.log("addInv");
    send({
        uuid: cState.uuid,
        yo: id,
        name: inp,
        role: cState.role
    }, 'POST', "hteachers", "addPep")
        .then(data => {
            console.log(data);
            if(data.error == false){
                par.setAttribute('data-st', '0');
            }
        });
}

function setInfo() {
    send({
        role: cState.role,
        uuid: cState.uuid
    }, 'POST', "hteachers", "getInfo")
        .then(data => {
            console.log(data);
            if(data.error == false){
                dispatch(changePeople(CHANGE_HTEACHERS_GL, undefined, undefined, undefined, data.body));
            }
        });
    for(let el of document.querySelectorAll("." + peopleCSS.ed + " > *[id^='inpn']")){
        chStatB({target: el});
    }
}

function getBlock(title, typ, x, b, info, x1) {
    let edFi;
    edFi = <div className={peopleCSS.pepl} style={{marginLeft: typ == "ht4L2" ? "2vw" : undefined}} key={x1 ? x1 : x} data-st="0">
        {b ?
            <div className={peopleCSS.fi}>
                <div className={peopleCSS.nav_i+" "+peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                    {info.name}
                </div>
                {(typ != "ht4" && info.login) && <img className={peopleCSS.profIm} src={themeState.theme_ch ? profd : profl} onClick={e=>goToProf(info.login)} title="Перейти в профиль" alt=""/>}
                <img className={peopleCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onDel} title="Удалить" alt=""/>
                {typ != "ht4" && <>
                    <input className={peopleCSS.inp+" "+peopleCSS.copyInp} id={"inpcpt_" + x} placeholder="Ссылка не создана" defaultValue={info.link ? sit + (info.login ? "/reauth/" : "/invite/") + info.link : undefined} type="text" readOnly/>
                    <img className={peopleCSS.imginp+" "+peopleCSS.refrC} src={themeState.theme_ch ? refreshCd : refreshCl} onClick={refreshLink} title="Создать ссылку-приглашение" alt=""/>
                    <img className={peopleCSS.imginp} src={themeState.theme_ch ? copyd : copyl} title="Копировать" data-enable={info.link ? "1" : "0"} onClick={(e)=>copyLink(e, info.link ? sit + (info.login ? "/reauth/" : "/invite/") + info.link : undefined, info.name)} alt=""/>
                </>}
            </div>
            :
            <div className={peopleCSS.fi}>
                <div className={peopleCSS.nav_i + " " + peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                    {inps.inpnpt}
                </div>
                {typ != "ht4" && <img className={peopleCSS.profIm} src={themeState.theme_ch ? profd : profl} title="Так будет выглядеть иконка перехода в профиль" alt=""/>}
                <img className={peopleCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                <img className={peopleCSS.imginp+" yes "} data-id1={typ == "ht4L2" ? x : undefined} src={yes} onClick={e=>onFin(e, tps[typ].ch)} title="Подтвердить" alt=""/>
                <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
            </div>
        }
        <div className={peopleCSS.ed}>
            <div className={peopleCSS.preinf}>
                ФИО:
            </div>
            <input className={peopleCSS.inp} data-id={x1 ? info.login+"_"+x1 : undefined} data-id1={info ? x+"_"+info.login : x+"_"} id={"inpnpt_" + (x?x:"")} placeholder={"Фамилия И.О."} defaultValue={b ? info.name : inps.inpnpt} onChange={chStatB} type="text"/>
            {ele(false, "inpnpt_" + (x?x:""), inps)}
            <img className={peopleCSS.imginp+" yes "} src={yes} onClick={e=>onFin(e, b ? tps[typ].ch : undefined)} title="Подтвердить" alt=""/>
            <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
        </div>
    </div>;
    return b ? edFi :
        <div className={peopleCSS.add+" "+peopleCSS.nav_iZag} style={{marginLeft: typ == "ht4L2" ? "2vw" : undefined}} data-st="0">
            <div className={peopleCSS.nav_i+" "+peopleCSS.link} id={peopleCSS.nav_i} onClick={onEdit}>
                {title}
            </div>
            {edFi}
        </div>
}

export function HTeachers() {
    hteachersInfo = useSelector(hteachers);
    themeState = useSelector(themes);
    navigate = useNavigate();
    cState = useSelector(states);
    if(!dispatch) {
        setActNew(1);
        if(eventSource.readyState == EventSource.OPEN) setInfo();
        eventSource.addEventListener('connect', onCon, false);
        eventSource.addEventListener('addInfoL1C', addInfoL1C, false);
        eventSource.addEventListener('chInfoL1C', chInfoL1C, false);
        eventSource.addEventListener('remInfoL1C', remInfoL1C, false);
        eventSource.addEventListener('addInfoL2C', addInfoL2C, false);
        eventSource.addEventListener('remInfoL2C', remInfoL2C, false);
        eventSource.addEventListener('chInfoL2C', chInfoL2C, false);
        eventSource.addEventListener('codPepL1C', codPepL1C, false);
        eventSource.addEventListener('codPepL2C', codPepL2C, false);
    }
    [_, forceUpdate] = useReducer((x) => x + 1, 0);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount HTeachers.jsx");
        return function() {
            dispatch(changeEvents(CHANGE_EVENTS_CLEAR));
            dispatch = undefined;
            eventSource.removeEventListener('connect', onCon);
            eventSource.removeEventListener('addInfoL1C', addInfoL1C);
            eventSource.removeEventListener('chInfoL1C', chInfoL1C);
            eventSource.removeEventListener('remInfoL1C', remInfoL1C);
            eventSource.removeEventListener('addInfoL2C', addInfoL2C);
            eventSource.removeEventListener('remInfoL2C', remInfoL2C);
            eventSource.removeEventListener('chInfoL2C', chInfoL2C);
            eventSource.removeEventListener('codPepL1C', codPepL1C);
            eventSource.removeEventListener('codPepL2C', codPepL2C);
            console.log("I was triggered during componentWillUnmount HTeachers.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate HTeachers.jsx');
    });
    return (
        <div className={peopleCSS.header}>
            <Helmet>
                <title>{cState.role == 4 ? "Администрации учебных организаций" : "Администрация учебной организации"}</title>
            </Helmet>
            {Object.getOwnPropertyNames(hteachersInfo).length == 0 && !(cState.auth && cState.role > 2) ?
                <ErrFound text={errText}/>
                :
                <div className={peopleCSS.blockPep}>
                    <div className={peopleCSS.pep}>
                        <div className={peopleCSS.nav_iZag}>
                            <div className={peopleCSS.nav_i} id={peopleCSS.nav_i}>
                                {cState.role == 4 ? "Администрации учебных организаций" : "Администрация учебной организации"}
                            </div>
                            {cState.auth && cState.role > 2 ? cState.role == 3 ? <>
                                        {getBlock("Добавить завуча", "ht")}
                                        {Object.getOwnPropertyNames(hteachersInfo).map(param =>
                                            getBlock(undefined, "ht", param, true, hteachersInfo[param])
                                        )}
                                    </> : <>
                                        {getBlock("Добавить учебную организацию", "ht4")}
                                        {Object.getOwnPropertyNames(hteachersInfo).map(param =><>
                                            {getBlock(undefined, "ht4", param, true, hteachersInfo[param])}
                                            {getBlock("Добавить завуча", "ht4L2", param)}
                                            {hteachersInfo[param].pep && Object.getOwnPropertyNames(hteachersInfo[param].pep).map(param1 =>
                                                getBlock(undefined, "ht4L2", param, true, hteachersInfo[param].pep[param1], param1)
                                            )}
                                        </>)}
                                </> :
                                Object.getOwnPropertyNames(hteachersInfo).map(param =>
                                    <div key={param}>
                                        <div className={peopleCSS.nav_i+" "+peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                                            {hteachersInfo[param].name}
                                        </div>
                                        {hteachersInfo[param].login && <img className={peopleCSS.profIm} src={themeState.theme_ch ? profd : profl} onClick={e=>goToProf(hteachersInfo[param].login)} title="Перейти в профиль" alt=""/>}
                                    </div>
                                )
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    )
}
export default HTeachers;
import React, {useEffect, useReducer, useRef} from "react";
import {Helmet} from "react-helmet-async";
import {classmates, groups, states, themes} from "../../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import {useNavigate} from "react-router-dom";
import {ele, setActNew, sit} from "../PeopleMain";
import profl from "../../../media/profl.png";
import profd from "../../../media/profd.png";
import Pane from "../../other/pane/Pane";
import ErrFound from "../../other/error/ErrFound";
import peopleCSS from "../peopleMain.module.css";
import {
    CHANGE_CLASSMATES,
    CHANGE_CLASSMATES_DEL,
    CHANGE_CLASSMATES_EL_GL,
    CHANGE_CLASSMATES_GL,
    CHANGE_EVENT,
    CHANGE_EVENTS_CLEAR,
    changeEvents,
    changePeople
} from "../../../store/actions";
import ed from "../../../media/edit.png";
import no from "../../../media/no.png";
import refreshCd from "../../../media/refreshCd.png";
import refreshCl from "../../../media/refreshCl.png";
import copyd from "../../../media/copyd.png";
import copyl from "../../../media/copyl.png";
import yes from "../../../media/yes.png";
import {eventSource, send} from "../../main/Main";

let dispatch, classmatesInfo, groupsInfo, selGr, errText, navigate, inps, themeState, cState, tps;
errText = "К сожалению, информация не найдена... Можете попробовать попросить завуча заполнить информацию.";
inps = {inpnpt : "Фамилия И.О."};
selGr = 0;
tps = {
    del : CHANGE_CLASSMATES_DEL,
    ch: CHANGE_CLASSMATES,
    el_gl: CHANGE_CLASSMATES_EL_GL,
    gl: CHANGE_CLASSMATES_GL
};
let [_, forceUpdate] = [];

function copyLink(e, link, name) {
    let title, text;
    title = "Внимание!";
    text = "Ссылка-приглашение для " + name + " успешно скопирована в буфер обмена.";
    navigator.clipboard.writeText(link);
    dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, 10));
}

function refreshLink(e) {
    let inp, id, title, text;
    title = "Внимание!";
    text = "Ссылка успешно обновлена"
    inp = e.target.parentElement.querySelector("input");
    if (inp.hasAttribute("data-id")) {
        id = inp.getAttribute("data-id").split("_");
        // dispatch(changePeople(type, 0, id[0], id[1], sit + "/invite/" + gen_cod(), "link"));
        // dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, 10));
        send({
            uuid: cState.uuid,
            id: id[0],
            id1: id[1]
        }, 'POST', "auth/setCodePep")
            .then(data => {
                console.log(data);
                if(data.error == false){
                    dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, 10));
                }
            });
    }
}

function onDel(e, type) {
    let par, inp, id;
    par = e.target.parentElement.parentElement;
    if(par.classList.contains(peopleCSS.pepl)){
        inp = par.querySelector("input:not([readOnly])");
        if (inp.hasAttribute("data-id")) {
            id = inp.getAttribute("data-id").split("_");
            // dispatch(changePeople(type, 0, id[0], id[1]));
            remInv(type, id[0], id[1]);
        }
    }
}

function onEdit(e) {
    let par;
    par = e.target.parentElement;
    if(par.classList.contains(peopleCSS.add)){
        par.setAttribute('data-st', '1');
    }
    if(par.parentElement.classList.contains(peopleCSS.pepl)){
        par = par.parentElement;
        par.setAttribute('data-st', '1');
    }
}

function onFin(e, type) {
    let par, inp;
    par = e.target.parentElement;
    if (par.classList.contains(peopleCSS.fi)){
        par = par.parentElement.parentElement;
        addInv(type, inps.inpnpt, par);
        // dispatch(changePeople(type, 2, "id8", undefined, inps.inpnpt));
        // par.setAttribute('data-st', '0');
        return;
    }
    inp = par.querySelector("input");
    if (inps[inp.id]) {
        inp.setAttribute("data-mod", '0');
        if(par.parentElement.classList.contains(peopleCSS.pepl)) {
            par = par.parentElement;
            if(type){
                if(inp.hasAttribute("data-id")){
                    let id = inp.getAttribute("data-id").split("_");
                    changeInv(type, id[0], id[1], inp.value, par);
                    // dispatch(changePeople(type, 2, id, undefined, inp.value));
                }
            } else {
                inps.inpnpt = inp.value;
                forceUpdate();
                par.setAttribute('data-st', '0');
            }
        }
        // par.setAttribute('data-st', '0');
    } else {
        inp.setAttribute("data-mod", '1');
    }
}

function onClose(e) {
    let par = e.target.parentElement;
    if(par.parentElement.classList.contains(peopleCSS.pepl)){
        if(par.classList.contains(peopleCSS.fi)) {
            par = par.parentElement.parentElement;
        } else {
            par = par.parentElement;
        }
        par.setAttribute('data-st', '0');
    }
}

function chStatB(e) {
    let el = e.target;
    inps[el.id] = !el.validity.patternMismatch && el.value.length != 0;
    if (inps[el.id]) {
        el.setAttribute("data-mod", '0');
    } else {
        el.setAttribute("data-mod", '1');
    }
    el.parentElement.querySelector(".yes").setAttribute("data-enable", +inps[el.id]);
}

function goToProf(log) {
    if(log) navigate("/profiles/" + log);
}

function codPepC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(tps.ch, 0, msg.id, undefined, msg.code, "link"));
}

function remPepC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(tps.del, 0, msg.id));
}

function chPepC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(tps.ch, 0, msg.id, undefined, msg.name));
}

function addPepC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(tps.el_gl, 0, msg.id, undefined, msg.body));
}

function remInv (type, id, id1) {
    console.log("remInv");
    send({
        uuid: cState.uuid,
        id: id,
        id1: id1
    }, 'POST', "students", "remPep")
}

function changeInv (type, id, id1, inp, par) {
    console.log("changeInv");
    send({
        uuid: cState.uuid,
        id: id,
        id1: id1,
        name: inp
    }, 'POST', "students", "chPep")
        .then(data => {
            console.log(data);
            if(data.error == false){
                par.setAttribute('data-st', '0');
            }
        });
}

function addInv (type, inp, par) {
    console.log("addInv");
    send({
        uuid: cState.uuid,
        name: inp
    }, 'POST', "students", "addPep")
        .then(data => {
            console.log(data);
            if(data.error == false){
                par.setAttribute('data-st', '0');
            }
        });
}

function onCon(e) {
    setInfo();
}

function setInfo() {
    send({
        uuid: cState.uuid,
        group: groupsInfo.group
    }, 'POST', "students", "getStud")
        .then(data => {
            console.log(data);
            if(data.error == false){
                selGr = groupsInfo.group;
                dispatch(changePeople(tps.gl, undefined, undefined, undefined, data.body));
            }
            for(let el of document.querySelectorAll("." + peopleCSS.ed + " > *[id^='inpn']")){
                chStatB({target: el});
            }
        });
}

function getBlock(x, b) {
    let edFi, info;
    info = classmatesInfo[x];
    edFi = <div className={peopleCSS.pepl} key={x} data-st="0">
        {x ?
            <div className={peopleCSS.fi}>
                <div className={peopleCSS.nav_i+" "+peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                    {info.name}
                </div>
                {info.login && <img className={peopleCSS.profIm} src={themeState.theme_ch ? profd : profl} onClick={e=>goToProf(info.login)} title="Перейти в профиль" alt=""/>}
                <img className={peopleCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={e=>onDel(e, tps.del)} title="Удалить" alt=""/>
                <input className={peopleCSS.inp+" "+peopleCSS.copyInp} data-id={x ? info.login+"_"+x : undefined} id={"inpcpt_" + x} placeholder="Ссылка не создана" defaultValue={info.link ? sit + (info.login ? "/reauth/" : "/invite/") + info.link : undefined} type="text" readOnly/>
                <img className={peopleCSS.imginp+" "+peopleCSS.refrC} src={themeState.theme_ch ? refreshCd : refreshCl} onClick={refreshLink} title="Создать ссылку-приглашение" alt=""/>
                <img className={peopleCSS.imginp} src={themeState.theme_ch ? copyd : copyl} title="Копировать" data-enable={info.link ? "1" : "0"} onClick={(e)=>copyLink(e, info.link ? sit + (info.login ? "/reauth/" : "/invite/") + info.link : undefined, info.name)} alt=""/>
            </div>
            :
            <div className={peopleCSS.fi}>
                <div className={peopleCSS.nav_i + " " + peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                    {inps.inpnpt}
                </div>
                <img className={peopleCSS.profIm} src={themeState.theme_ch ? profd : profl} title="Так будет выглядеть иконка перехода в профиль" alt=""/>
                <img className={peopleCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                <img className={peopleCSS.imginp+" yes "} src={yes} onClick={e=>onFin(e, tps.ch)} title="Подтвердить" alt=""/>
                <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
            </div>
        }
        <div className={peopleCSS.ed}>
            <div className={peopleCSS.preinf}>
                ФИО:
            </div>
            <input className={peopleCSS.inp} data-id={x ? info.login+"_"+x : undefined} id={"inpnpt_" + (x?x:"")} placeholder={"Фамилия И.О."} defaultValue={x ? info.name : inps.inpnpt} onChange={chStatB} type="text"/>
            {ele(false, "inpnpt_" + (x?x:""), inps)}
            <img className={peopleCSS.imginp+" yes "} src={yes} onClick={e=>onFin(e, x ? tps.ch : undefined)} title="Подтвердить" alt=""/>
            <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
        </div>
    </div>;
    return b ? edFi :
        <div className={peopleCSS.add+" "+peopleCSS.nav_iZag} data-st="0">
            <div className={peopleCSS.nav_i+" "+peopleCSS.link} id={peopleCSS.nav_i} onClick={onEdit}>
                Добавить ученика
            </div>
            {edFi}
        </div>
}

export function Classmates() {
    classmatesInfo = useSelector(classmates);
    cState = useSelector(states);
    themeState = useSelector(themes);
    groupsInfo = useSelector(groups);
    navigate = useNavigate();
    if(!dispatch) {
        setActNew(2);
        if(eventSource.readyState == EventSource.OPEN) setInfo();
        eventSource.addEventListener('connect', onCon, false);
        eventSource.addEventListener('addPepC', addPepC, false);
        eventSource.addEventListener('chPepC', chPepC, false);
        eventSource.addEventListener('remPepC', remPepC, false);
        eventSource.addEventListener('codPepL1C', codPepC, false);
    }
    [_, forceUpdate] = useReducer((x) => x + 1, 0);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount Classmates.jsx");
        for(let el of document.querySelectorAll("." + peopleCSS.ed + " > *[id^='inpn']")){
            chStatB({target: el}, inps);
        }
        return function() {
            dispatch(changeEvents(CHANGE_EVENTS_CLEAR));
            dispatch = undefined;
            eventSource.removeEventListener('connect', onCon);
            eventSource.removeEventListener('addPepC', addPepC);
            eventSource.removeEventListener('chPepC', chPepC);
            eventSource.removeEventListener('remPepC', remPepC);
            eventSource.removeEventListener('codPepL1C', codPepC);
            console.log("I was triggered during componentWillUnmount Classmates.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        if(selGr != groupsInfo.group){
            if(eventSource.readyState == EventSource.OPEN) setInfo();
        }
        console.log('componentDidUpdate Classmates.jsx');
    });
    return (
        <div className={peopleCSS.header}>
            <Helmet>
                <title>{cState.role == 3 ? "Обучающиеся" : "Одноклассники"}</title>
            </Helmet>
            {Object.getOwnPropertyNames(classmatesInfo).length == 0 && !(cState.auth && cState.role == 3) ?
                    <ErrFound text={errText}/>
                :
                    <>
                        {(cState.auth && cState.role == 3) &&
                            <div style={{width:"inherit", height: "7vh", position: "fixed", zIndex:"1"}}>
                                <Pane cla={true}/>
                            </div>
                        }
                        <div className={peopleCSS.blockPep}>
                            <div className={peopleCSS.pep}>
                                <div className={peopleCSS.nav_iZag}>
                                    <div className={peopleCSS.nav_i} id={peopleCSS.nav_i}>
                                        {cState.role == 3 ? "Обучающиеся" : "Одноклассники"}
                                    </div>
                                    {cState.auth && cState.role == 3 ? <>
                                            {getBlock()}
                                            {Object.getOwnPropertyNames(classmatesInfo).map(param =>
                                                getBlock(param, true)
                                            )}
                                        </> :
                                        Object.getOwnPropertyNames(classmatesInfo).map(param =>
                                            <div key={param}>
                                                <div className={peopleCSS.nav_i+" "+peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                                                    {classmatesInfo[param].name}
                                                </div>
                                                {classmatesInfo[param].login && <img className={peopleCSS.profIm} src={themeState.theme_ch ? profd : profl} onClick={e=>goToProf(classmatesInfo[param].login)} title="Перейти в профиль" alt=""/>}
                                            </div>
                                        )
                                    }
                                </div>
                            </div>
                        </div>
                    </>
            }
        </div>
    )
}
export default Classmates;
import React, {useEffect, useReducer, useRef} from "react";
import {Helmet} from "react-helmet-async";
import peopleCSS from '../peopleMain.module.css';
import {useNavigate} from "react-router-dom";
import {admins, states, themes} from "../../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import {ele, setActNew, sit} from "../PeopleMain";
import profl from "../../../media/profl.png";
import profd from "../../../media/profd.png";
import ErrFound from "../../other/error/ErrFound";
import {
    CHANGE_ADMINS,
    CHANGE_ADMINS_DEL,
    CHANGE_ADMINS_EL_GL,
    CHANGE_ADMINS_GL,
    CHANGE_EVENT,
    CHANGE_EVENTS_CLEAR,
    changeEvents,
    changePeople
} from "../../../store/actions";
import ed from "../../../media/edit.png";
import no from "../../../media/no.png";
import refreshCd from "../../../media/refreshCd.png";
import refreshCl from "../../../media/refreshCl.png";
import copyd from "../../../media/copyd.png";
import copyl from "../../../media/copyl.png";
import yes from "../../../media/yes.png";
import {eventSource, send} from "../../main/Main";

let dispatch, errText, inps, adminsInfo, themeState, cState, tps, navigate;
errText = "К сожалению, информация не найдена...";
inps = {inpnpt : "Фамилия И.О."};
tps = {
    del : CHANGE_ADMINS_DEL,
    ch: CHANGE_ADMINS,
    el_gl: CHANGE_ADMINS_EL_GL,
    gl: CHANGE_ADMINS_GL
};
let [_, forceUpdate] = [];

function copyLink(e, link, name) {
    let title, text;
    title = "Внимание!";
    text = "Ссылка-приглашение для " + name + " успешно скопирована в буфер обмена.";
    navigator.clipboard.writeText(link);
    dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, 10));
}

function refreshLink(e) {
    let inp, id, title, text;
    title = "Внимание!";
    text = "Ссылка успешно обновлена"
    inp = e.target.parentElement.querySelector("input");
    if (inp.hasAttribute("data-id")) {
        id = inp.getAttribute("data-id").split("_");
        // dispatch(changePeople(type, 0, id[0], id[1], sit + "/invite/" + gen_cod(), "link"));
        // dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, 10));
        send({
            uuid: cState.uuid,
            id: id[0],
            id1: id[1]
        }, 'POST', "auth/setCodePep")
            .then(data => {
                console.log(data);
                if(data.error == false){
                    dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, 10));
                }
            });
    }
}

function onDel(e, type) {
    let par, inp, id;
    par = e.target.parentElement.parentElement;
    if(par.classList.contains(peopleCSS.pepl)){
        inp = par.querySelector("input:not([readOnly])");
        if (inp.hasAttribute("data-id")) {
            id = inp.getAttribute("data-id").split("_");
            // dispatch(changePeople(type, 0, id[0], id[1]));
            remInv(type, id[0], id[1]);
        }
    }
}

function onEdit(e) {
    let par;
    par = e.target.parentElement;
    if(par.classList.contains(peopleCSS.add)){
        par.setAttribute('data-st', '1');
    }
    if(par.parentElement.classList.contains(peopleCSS.pepl)){
        par = par.parentElement;
        par.setAttribute('data-st', '1');
    }
}

function onFin(e, type) {
    let par, inp;
    par = e.target.parentElement;
    if (par.classList.contains(peopleCSS.fi)){
        par = par.parentElement.parentElement;
        addInv(type, inps.inpnpt, par);
        // dispatch(changePeople(type, 2, "id8", undefined, inps.inpnpt));
        // par.setAttribute('data-st', '0');
        return;
    }
    inp = par.querySelector("input");
    if (inps[inp.id]) {
        inp.setAttribute("data-mod", '0');
        if(par.parentElement.classList.contains(peopleCSS.pepl)) {
            par = par.parentElement;
            if(type){
                if(inp.hasAttribute("data-id")){
                    let id = inp.getAttribute("data-id").split("_");
                    changeInv(type, id[0], id[1], inp.value, par);
                    // dispatch(changePeople(type, 2, id, undefined, inp.value));
                }
            } else {
                inps.inpnpt = inp.value;
                forceUpdate();
                par.setAttribute('data-st', '0');
            }
        }
        // par.setAttribute('data-st', '0');
    } else {
        inp.setAttribute("data-mod", '1');
    }
}

function onClose(e) {
    let par = e.target.parentElement;
    if(par.parentElement.classList.contains(peopleCSS.pepl)){
        if(par.classList.contains(peopleCSS.fi)) {
            par = par.parentElement.parentElement;
        } else {
            par = par.parentElement;
        }
        par.setAttribute('data-st', '0');
    }
}

function chStatB(e) {
    let el = e.target;
    inps[el.id] = !el.validity.patternMismatch && el.value.length != 0;
    if (inps[el.id]) {
        el.setAttribute("data-mod", '0');
    } else {
        el.setAttribute("data-mod", '1');
    }
    el.parentElement.querySelector(".yes").setAttribute("data-enable", +inps[el.id]);
}

function goToProf(log) {
    if(log) navigate("/profiles/" + log);
}

function codPepC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(tps.ch, 0, msg.id, undefined, msg.code, "link"));
}

function remPepC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(tps.del, 0, msg.id));
}

function chPepC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(tps.ch, 0, msg.id, undefined, msg.name));
}

function addPepC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changePeople(tps.el_gl, 0, msg.id, undefined, msg.body));
}

function remInv (type, id, id1) {
    console.log("remInv");
    send({
        uuid: cState.uuid,
        id: id,
        id1: id1
    }, 'POST', "admins", "remPep")
}

function changeInv (type, id, id1, inp, par) {
    console.log("changeInv");
    send({
        uuid: cState.uuid,
        id: id,
        id1: id1,
        name: inp
    }, 'POST', "admins", "chPep")
        .then(data => {
            console.log(data);
            if(data.error == false){
                par.setAttribute('data-st', '0');
            }
        });
}

function addInv (type, inp, par) {
    console.log("addInv");
    send({
        uuid: cState.uuid,
        name: inp
    }, 'POST', "admins", "addPep")
        .then(data => {
            console.log(data);
            if(data.error == false){
                par.setAttribute('data-st', '0');
            }
        });
}

function onCon(e) {
    setInfo();
}

function setInfo() {
    send({
        uuid: cState.uuid
    }, 'POST', "admins", "getAdmins")
        .then(data => {
            console.log(data);
            if(data.error == false){
                dispatch(changePeople(tps.gl, undefined, undefined, undefined, data.body));
            }
            for(let el of document.querySelectorAll("." + peopleCSS.ed + " > *[id^='inpn']")){
                chStatB({target: el});
            }
        });
}

function getBlock(x, b) {
    let edFi, info;
    info = adminsInfo[x];
    edFi = <div className={peopleCSS.pepl} key={x} data-st="0">
        {x ?
            <div className={peopleCSS.fi}>
                <div className={peopleCSS.nav_i+" "+peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                    {info.name}
                </div>
                {info.login && <img className={peopleCSS.profIm} src={themeState.theme_ch ? profd : profl} onClick={e=>goToProf(info.login)} title="Перейти в профиль" alt=""/>}
                <img className={peopleCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={e=>onDel(e, tps.del)} title="Удалить" alt=""/>
                <input className={peopleCSS.inp+" "+peopleCSS.copyInp} data-id={x ? info.login+"_"+x : undefined} id={"inpcpt_" + x} placeholder="Ссылка не создана" defaultValue={info.link ? sit + (info.login ? "/reauth/" : "/invite/") + info.link : undefined} type="text" readOnly/>
                <img className={peopleCSS.imginp+" "+peopleCSS.refrC} src={themeState.theme_ch ? refreshCd : refreshCl} onClick={refreshLink} title="Создать ссылку-приглашение" alt=""/>
                <img className={peopleCSS.imginp} src={themeState.theme_ch ? copyd : copyl} title="Копировать" data-enable={info.link ? "1" : "0"} onClick={(e)=>copyLink(e, info.link ? sit + (info.login ? "/reauth/" : "/invite/") + info.link : undefined, info.name)} alt=""/>
            </div>
            :
            <div className={peopleCSS.fi}>
                <div className={peopleCSS.nav_i + " " + peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                    {inps.inpnpt}
                </div>
                <img className={peopleCSS.profIm} src={themeState.theme_ch ? profd : profl} title="Так будет выглядеть иконка перехода в профиль" alt=""/>
                <img className={peopleCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                <img className={peopleCSS.imginp+" yes "} src={yes} onClick={e=>onFin(e, tps.ch)} title="Подтвердить" alt=""/>
                <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
            </div>
        }
        <div className={peopleCSS.ed}>
            <div className={peopleCSS.preinf}>
                ФИО:
            </div>
            <input className={peopleCSS.inp} data-id={x ? info.login+"_"+x : undefined} id={"inpnpt_" + (x?x:"")} placeholder={"Фамилия И.О."} defaultValue={x ? info.name : inps.inpnpt} onChange={chStatB} type="text"/>
            {ele(false, "inpnpt_" + (x?x:""), inps)}
            <img className={peopleCSS.imginp+" yes "} src={yes} onClick={e=>onFin(e, x ? tps.ch : undefined)} title="Подтвердить" alt=""/>
            <img className={peopleCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
        </div>
    </div>;
    return b ? edFi :
        <div className={peopleCSS.add+" "+peopleCSS.nav_iZag} data-st="0">
            <div className={peopleCSS.nav_i+" "+peopleCSS.link} id={peopleCSS.nav_i} onClick={onEdit}>
                Добавить администратора
            </div>
            {edFi}
        </div>
}

export function Admins() {
    adminsInfo = useSelector(admins);
    themeState = useSelector(themes);
    navigate = useNavigate();
    cState = useSelector(states);
    if(!dispatch) {
        setActNew(4);
        if(eventSource.readyState == EventSource.OPEN) setInfo();
        eventSource.addEventListener('connect', onCon, false);
        eventSource.addEventListener('addPepC', addPepC, false);
        eventSource.addEventListener('chPepC', chPepC, false);
        eventSource.addEventListener('remPepC', remPepC, false);
        eventSource.addEventListener('codPepL2C', codPepC, false);
    }
    [_, forceUpdate] = useReducer((x) => x + 1, 0);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount Admins.jsx");
        return function() {
            dispatch(changeEvents(CHANGE_EVENTS_CLEAR));
            dispatch = undefined;
            eventSource.removeEventListener('connect', onCon);
            eventSource.removeEventListener('addPepC', addPepC);
            eventSource.removeEventListener('chPepC', chPepC);
            eventSource.removeEventListener('remPepC', remPepC);
            eventSource.removeEventListener('codPepL2C', codPepC);
            console.log("I was triggered during componentWillUnmount Admins.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log(adminsInfo);
        console.log('componentDidUpdate Admins.jsx');
    });
    return (
        <div className={peopleCSS.header}>
            <Helmet>
                <title>Администраторы портала</title>
            </Helmet>
            {Object.getOwnPropertyNames(adminsInfo).length == 0 && !(cState.auth && cState.role == 4) ?
                    <ErrFound text={errText}/>
                :
                    <div className={peopleCSS.blockPep}>
                        <div className={peopleCSS.pep}>
                            <div className={peopleCSS.nav_iZag}>
                                <div className={peopleCSS.nav_i} id={peopleCSS.nav_i}>
                                    Администраторы портала
                                </div>
                                {cState.auth && cState.role == 4 ? <>
                                        {getBlock()}
                                        {Object.getOwnPropertyNames(adminsInfo).map(param =>
                                            getBlock(param, true)
                                        )}
                                    </> :
                                    Object.getOwnPropertyNames(adminsInfo).map(param =>
                                        <div key={param}>
                                            <div className={peopleCSS.nav_i+" "+peopleCSS.nav_iZag2} id={peopleCSS.nav_i}>
                                                {adminsInfo[param].name}
                                            </div>
                                            {adminsInfo[param].login && <img className={peopleCSS.profIm} src={themeState.theme_ch ? profd : profl} onClick={e=>goToProf(adminsInfo[param].login)} title="Перейти в профиль" alt=""/>}
                                        </div>
                                    )
                                }
                            </div>
                        </div>
                    </div>
            }
        </div>
    )
}
export default Admins;
export default class PanJs {
    ke
    pari = {elems: 0, paels: 0}
    parb = {resiz: false, updf: false}
    refes = {}
    inps = {}
    gr = {}
    gr1 = {}
    nav
    lGroups
    lGroupY
    panAdd
    edGr
    blockCl = false
    act = ".panYo"
    mor
    lmor
    timid
    lel
    eles
}
.panel{
	user-select: none;
	height: 7vh;
	display: grid;
	/*place-items: center;*/
	grid-template: 7vh/ auto;
	/*justify-items: stretch;*/
	position: relative;
	margin-right: 0.5px;
}

.panel[data-mod="0"]{
	background-color: var(--bgcV1);
	transition: background-color 1s ease;
}

.panel[data-mod="1"]{
	gap: 1vmin;
}

.panel[data-mod="1"] > .nav_i, .panel[data-mod="1"] > .predBlock > .nav_i{
	background-color: var(--bgcV1);
	border-radius: 5px;
}

.panel > *{
	grid-row: 1;
}

.nav_i{
	text-decoration: none;
	border: 1px solid var(--bcV1);
	cursor: pointer;
	color: var(--cV1);
	font-size: 1.25vmax;
	font-weight: bold;
	margin: -1px -0.5px;
	display: flex;
	align-items: center;
	justify-content: center;
	align-self: stretch;
	transition: color 1s ease;
	transition-property: color, text-shadow, border-color, background-color;
	background-color: var(--bgcV1);
	border-radius: 5px;
	text-shadow: 1px 1px 3px var(--shdV1);
	backface-visibility: hidden;
	perspective: 1000px;
}

#nav_i:hover{
	color: #00ff00 !important;
	text-shadow: 0 0 2vw #66ff66;
}

#nav_i:active, #nav_i[data-act="1"]{
	-webkit-transition: color 0.1s ease;
	-o-transition: color 0.1s ease;
	transition: color 0.1s ease;
	color: #004d00 !important;
}

.nav_iJur{
	font-weight: 500;
	background-color: unset;
	border-radius: unset;
	transition-property: color, text-shadow, border-color;
	margin: -0.5px;
	padding: 5px;
	position: relative;
}

.lin{
	height: 20%;
	background: var(--bgcV2);
	position: absolute;
	bottom: 0;
	left: 0;
	transition: left 1s ease;
}

.predInf{
	align-self: end;
	font-size: 1.25vw;
}

.predEl{
	display: grid;
	justify-items: center;
	grid-template: auto auto / auto auto;
	width: 100%;
	z-index: 1;
}

.predEl img{
	width: 2vw;
	grid-row: 1/3;
	margin-right: 0.25vw;
}

.predBlock:hover > .predMenu, .predMenu:hover{
	opacity: 1;
	top: 100%;
}

.predMenu{
	position: absolute;
	height: 100%;
	top: -300%;
	transition: top 1s ease;
	transition-property: top, opacity;
	opacity: 0;
	margin-right: 100%;
}

.predMM{
	height: 300%;
	overflow-y: auto;
	overflow-x: hidden;
}

.predMM > div{
	height: 33.3%;
}

.predBlock{
	position: relative;
	margin-inline: -0.5px;
	align-items: center;
	justify-content: center;
	align-self: stretch;
	width: 100%;
    display: none;
}

.pred{
	background-color: var(--bgcV1);
	z-index: 1;
	padding: 0;
	height: 100%;
	margin-bottom: -2px;
	margin-inline: 0;
}

.nav_iZag{
}

.chPass{
    text-decoration: underline;
    cursor: pointer;
    transition-delay: unset;
    border: none;
    background-color: unset;
    display: none;
}

.field{
    display: none;
    vertical-align: middle;
    margin-left: 5px;
}

.blNew{
    display: none;
    transition-delay: unset;
    border: none;
    background-color: unset;
}

.nav_i[data-st='0'] > .fi, .nav_i[data-st='1'] > .in, .nav_iZag .in{
    display: inline-block;
}

.nav_iZag[data-st='0'] > .chPass, .nav_iZag[data-st='1'] > .blNew{
    display: flex;
}

.imginp, .imgfield{
    width: 1vw;
    vertical-align: middle;
    cursor: pointer;
    margin-left: 1vw;
    display: none;
}

.inp {
    border-radius: 0.5vmax;
    background-color: #4d4d4d;
    user-select: none;
	box-shadow: 0 1px #FFFFFFAA, inset 0 2px 2px #000000AA;
    border: 1px solid var(--bcV2);
    height: 90%;
    position:relative;
    transition: background-color 1s ease;
    transition-property: background-color, border-color;
    vertical-align: middle;
    display: none;
    width: 50%;
    font-size: 1.25vw;
	padding: 0 0 0 1vw;
	margin-left: 1vw;
}

.inp[data-mod='1']{
	animation: but ease 1s;
	outline: solid red;
}

@keyframes but {
	0%{transform: rotateZ(-2deg);}
	50%{transform: rotateZ(2deg);}
	100%{transform: rotateZ(0deg);}
}

img.in[data-enable="0"] {
    pointer-events: none;
    opacity: 0.4;
}
import React, {useEffect, useReducer, useRef} from "react";
import paneCSS from './pane.module.css';
import {Link} from "react-router-dom";
import {useDispatch, useSelector} from "react-redux";
import {groups, pane, states} from "../../../store/selector";
import {
    CHANGE_EVENTS_STEP,
    CHANGE_PANE,
    CHANGE_PANE_DEL_GRS,
    CHANGE_PANE_GR,
    CHANGE_PANE_GRS,
    changeEvents,
    changeGroups
} from "../../../store/actions";
import PanJs from "./PanJs";
import yes from "../../../media/yes.png";
import no from "../../../media/no.png";
import ed from "../../../media/edit.png";
import {addGroup, chGroup, remGroup} from "../../people/PeopleMain";

let kel, gType;
kel = 0;
gType = {
    true : {
        CHANGE_PANE_GR: "CHANGE_GROUPS_GR",
    },
    false: {
        CHANGE_PANE_GR: "CHANGE_PANE_GR",
    }
};

export function Pane(props) {
    const ele = (x, par) => {
        if(!panJs.inps[par]) panJs.inps[par] = x;
    };
    const getPan = (name, namecl, link, fun) => {
        let cla = [paneCSS.nav_i, paneCSS.nav_iJur, namecl].join(" ");
        return link ?
            <Link className={cla} id={paneCSS.nav_i} to={link} onClick={fun} data-id={namecl} key={namecl} ref={el=>panJs.gr[namecl]=el}>
                {name.nam}
            </Link>
            :
            <div className={cla} id={paneCSS.nav_i} onClick={fun} data-id={namecl} key={namecl} data-st="0" ref={el=>panJs.gr[namecl]=el}>
                {props.cla && cState.role == 3 ?
                    <>
                        <div className={paneCSS.field+" "+paneCSS.fi}>
                            {name}
                        </div>
                        <img className={paneCSS.imgfield+" "+paneCSS.fi} src={ed} onClick={onEdGr} title="Редактировать" alt=""/>
                        <img className={paneCSS.imginp+" "+paneCSS.fi} src={no} onClick={onDel} title="Удалить группу" alt=""/>
                    </> : name
                }
            </div>
    };
    const overpan = () => {
        let wid, el, lst;
        panJs.eles = [];
        for(el of panJs.lGroupY) {
            if(panJs.gr[el].style.display) {
                panJs.gr[el].style.display = "";
            }
        }
        lst = panJs.refes.mor.style.display;
        panJs.refes.mor.style.display = "none";
        if(panJs.refes.lin) {
            panJs.refes.lin.style.display = "none";
        }
        wid = panJs.nav.scrollWidth - panJs.nav.getBoundingClientRect().width;
        if(wid > 1 && panJs.lGroupY.length > 4) {
            let i1 = 3, i = panJs.lGroupY.length-1, el1, el2;
            for(; i > 0; i--) {
                if(wid < 1) {
                    if(i1 < 1) {
                        break;
                    } else i1--;
                }
                el1 = panJs.gr[panJs.lGroupY[i]];
                el2 = panJs.gr1[panJs.lGroupY[i]];
                wid -= el1.getBoundingClientRect().width;
                panJs.eles[panJs.eles.length] = React.cloneElement(el2, {className: el2.props.className+" "+paneCSS.pred});
                el1.style.display = "none";
            }
            panJs.lel = panJs.gr[panJs.lGroupY[i--]];
            panJs.refes.mor.style.display = lst;
            updMor();
        } else {
            panJs.refes.mor.style.display = lst;
        }
        if(panJs.refes.lin) {
            panJs.refes.lin.style.display = "";
        }
    };
    const setGr = (bol) => {
        if(panJs.info.groups[panJs.info.group]){
            if (panJs.act != panJs.info.group || !bol) {
                setActivedMy(panJs.info.group);
            }
        } else {
            if(props.main) {
                setActivedMy(undefined);
                return;
            }
            if(panJs.lGroups.length == 0){
                if(panJs.refes.lin) {
                    panJs.refes.lin.style.width = "0";
                }
                return;
            }
            setActivedMy(panJs.lGroups[0]);
        }
    };
    const updMor = () => {
        if(panJs.eles.length > 0) {
            panJs.refes.lmor = getMore(panJs.eles);
            panJs.parb.updf = true;
            forceUpdate();
            panJs.refes.mor.style.display = "flex";
        }
    };
    const getMore = (el) => {
        let bol = panJs.lel.getBoundingClientRect().width < 50 ? "200%" : "100%";
        panJs.refes.MMel.style.minWidth = bol;
        panJs.refes.MMel.style.marginRight = bol;
        return el.map(par => par);
    };
    const replGr = (x) => {
        let elc, elr, i;
        elc = panJs.gr1[panJs.lel.dataset.id];
        elr = React.cloneElement(elc, {className: elc.props.className+" "+paneCSS.pred});
        for (i = 0; i < panJs.eles.length; i++) {
            if(panJs.eles[i].props["data-id"] == x.dataset.id) {
                panJs.eles[i] = elr;
            }
        }
        panJs.lel.style.display = "none";
        x.style.display = "";
        panJs.lel = x;
        updMor();
    };
    const setActivedMy = (name) => {
        let ao, an;
        ao = panJs.gr[panJs.act];
        an = panJs.gr[name];
        if(ao) ao.dataset.act = '0';
        if(an) {
            panJs.act = name;
            an.dataset.act = '1';
            if(an.style.display == "none") replGr(an);
            if(panJs.refes.lin) {
                panJs.refes.lin.style.left = an.getBoundingClientRect().left+"px";
                panJs.refes.lin.style.width = an.getBoundingClientRect().width+"px";
            }
        }
    };
    const preTim = () => {
        if(!panJs.parb.resiz) {
            panJs.parb.resiz = true;
            panJs.timid = setTimeout(tim,1000);
        }
    };
    const tim = () => {
        if (panJs.parb.resiz) {
            panJs.parb.resiz = false;
            overpan();
            setGr();
        }
    };
    const onEdit = (e) => {
        let par = e.target.parentElement;
        par.dataset.st = '1';
    };
    const onFin = (e) => {
        let par, inp;
        par = e.target.parentElement;
        inp = par.querySelector("input");
        par = par.parentElement;
        if (panJs.inps[inp.id]) {
            if(panJs.edGr){
                if(props.cla) {
                    chGroup(panJs.edGr, inp.value, par);
                } else {
                    dispatch(changeGroups(CHANGE_PANE_GRS, panJs.ke, inp.value, panJs.edGr));
                    par.dataset.st = '0';
                }
                panJs.edGr = undefined;
                panJs.blockCl = false;
            } else {
                if(props.cla) {
                    addGroup(inp.value, par);
                } else {
                    dispatch(changeGroups(CHANGE_PANE_GRS, panJs.ke, inp.value, panJs.lGroups.length == 0 ? 0 : parseInt(panJs.lGroups[panJs.lGroups.length - 1]) + 1));
                    par.dataset.st = '0';
                }
            }
        }
    };
    const onClose = (e) => {
        let par = e.target.parentElement.parentElement;
        par.dataset.st = '0';
        panJs.edGr = undefined;
        panJs.blockCl = false;
    };
    const onEdGr = (e) => {
        let par, inp;
        par = e.target.parentElement;
        panJs.blockCl = "ED";
        panJs.panAdd.dataset.st = '1';
        inp = panJs.panAdd.querySelector("input");
        inp.value = panJs.info.groups[par.dataset.id];
        chStatB({target: inp});
        panJs.edGr = par.dataset.id;
    };
    const onDel = (e) => {
        let par = e.target.parentElement;
        if(props.cla) {
            remGroup(par.dataset.id);
        } else {
            dispatch(changeGroups(CHANGE_PANE_DEL_GRS, panJs.ke, undefined, par.dataset.id));
        }
    };
    const chStatB = (e) => {
        let el = e.target;
        panJs.inps[el.id] = !el.validity.patternMismatch && el.value.length != 0;
        if (panJs.inps[el.id]) {
            el.dataset.mod = '0';
        } else {
            el.dataset.mod = '1';
        }
        el.parentElement.querySelector(".yes").setAttribute("data-enable", +panJs.inps[el.id]);
    };
    const getAdd = (name, namecl) => {
        if(!props.cla || cState.role != 3) return;
        let cla = [paneCSS.nav_i, paneCSS.nav_iZag, paneCSS.nav_iJur].join(" ");
        return (
            <div className={cla} data-st="0" ref={el=>panJs.panAdd = el}>
                <div className={paneCSS.nav_i+" "+paneCSS.chPass} id={paneCSS.nav_i} onClick={onEdit}>
                    {name}
                </div>
                <div className={paneCSS.nav_i+" "+paneCSS.blNew} id={paneCSS.nav_i}>
                    <input className={paneCSS.inp+" "+paneCSS.in} id={"inpt_"} onChange={chStatB} type="text" pattern="^[A-Za-zА-Яа-яЁё\s0-9.-]+$"/>
                    {ele(false, "inpt_")}
                    <img className={paneCSS.imginp+" yes "+paneCSS.in} src={yes} onClick={onFin} title="Подтвердить" alt=""/>
                    <img className={paneCSS.imginp+" "+paneCSS.in} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                </div>
            </div>
        )
    };
    const setGroup = (param) => {
        dispatch(changeGroups(gType[props.cla == true][CHANGE_PANE_GR], panJs.ke, param, undefined, panJs.blockCl));
    };
    const cState = useSelector(states);
    const paneInfo = useSelector(pane);
    const groupsInfo = useSelector(groups);
    const panJs = useRef(new PanJs()).current;
    const dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    const [_, forceUpdate] = useReducer((x) => x + 1, 0);
    if(panJs.info) {
        panJs.lGroups = Object.getOwnPropertyNames(panJs.info.groups);
        panJs.gr1 = {};
        panJs.gr = {};
        panJs.g = panJs.lGroups.map(param =>
            panJs.info.groups[param] &&
            (panJs.gr1[param] = getPan(panJs.info.groups[param], param, panJs.info.groups[param].linke, () => setGroup(param)))
        );
        panJs.lGroupY = Object.getOwnPropertyNames(panJs.gr1);
    }
    useEffect(() => {
        if(panJs.ke == undefined) {
            panJs.pari.paels = 0;
            panJs.ke = kel++;
            if(!props.cla) {
                dispatch(changeGroups(CHANGE_PANE, panJs.ke, props.gro));
                panJs.info = paneInfo.els[panJs.ke];
            } else {
                panJs.nav.style.gridTemplate = "7vh/ 15% auto";
                forceUpdate();
                panJs.info = groupsInfo.els;
            }
        }
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        if(panJs.parb.updf){
            panJs.parb.updf = false;
            console.log('componentDidUpdate onlyRender Pane.jsx');
            return;
        }
        if(panJs.lGroups.length != panJs.pari.paels) {
            panJs.pari.paels = panJs.lGroups.length;
            overpan();
        }
        if(panJs.info) {
            setGr();
        }
        console.log('componentDidUpdate Pane.jsx ke: ' + panJs.ke);
    });
    useEffect(() => {
        dispatch(changeEvents(CHANGE_EVENTS_STEP, 1));
        if(props.cla && cState.role == 3) {
            chStatB({target: panJs.nav.querySelector("." + paneCSS.nav_iZag + " input")});
        }
        console.log("I was triggered during componentDidMount Pane.jsx ke: " + panJs.ke);
        window.addEventListener('resize', preTim);
        return function() {
            dispatch(changeEvents(CHANGE_EVENTS_STEP, -1));
            window.removeEventListener('resize', preTim);
            panJs.pari.paels = 0;
            clearTimeout(panJs.timid);
            console.log("I was triggered during componentWillUnmount Pane.jsx ke: " + panJs.ke);
        }
    }, []);
    return (
        <nav className={paneCSS.panel} id="pan" data-mod={props.main ? "1" : "0"} data-ke={panJs.ke} ref={el=>panJs.nav = el}>
            {getAdd("Добавить группу", "Add")}
            {panJs.g}
            <div className={paneCSS.predBlock} ref={re=>panJs.refes.mor = re}>
                <div className={paneCSS.nav_i+' '+paneCSS.nav_iJur+' '+paneCSS.predEl} id={paneCSS.nav_i}>
                    <div className={paneCSS.predInf}>...</div>
                </div>
                <div className={paneCSS.predMenu+" pre "+paneCSS.predMM} ref={re=>panJs.refes.MMel = re}>
                    <div>
                        {panJs.refes.lmor}
                    </div>
                </div>
            </div>
            {!props.main &&
                <div className={paneCSS.lin} ref={ele=>panJs.refes.lin = ele}/>
            }
        </nav>
    )
}
export default Pane;
.evHeader{
	position: fixed;
	height: 50vh;
	overflow: auto;
}

.warne{
	width: 18vw;
	position: relative;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	margin-top: 1vh;
	-webkit-box-shadow: 2px 2px 4px 2px rgba(0, 0, 0, 0.5);
	box-shadow: 2px 2px 4px 2px rgba(0, 0, 0, 0.5);
	background-color: var(--bgcV1);
	-webkit-border-radius: 4px;
	border-radius: 4px;
	padding: 9px;
	font-size: 2vw;
	color: var(--cV1);
	font-weight: bolder;
	transition: background-color ease 1s;
	transition-property: background-color, color;
}

.warnimg{
	transform: translate(0%, -5%);
	vertical-align: middle;
	width: 2vw;
}

.title{

}

.time{
	position: absolute;
	right: 1vw;
	bottom: 1vh;
	font-size: 1vw;
	color: var(--bcV1);
}

.text{
	margin-block: 1vh;
}

.imgCl{
	width: 1vw;
	cursor: pointer;
	position: absolute;
	right: 1vw;
	top: 1vw;
}
import React, {useEffect, useRef} from "react";
import eventsCSS from './events.module.css';
import {useDispatch, useSelector} from "react-redux";
import {events} from "../../../store/selector";
import warn from '../../../media/warning.png';
import {CHANGE_EVENT_DEL, CHANGE_EVENT_TIMER, CHANGE_EVENTS_RL, changeEvents} from "../../../store/actions";
import no from "../../../media/no.png";

let dispatch, eventsInfo, evHeader;

function f(e) {
    dispatch(changeEvents(CHANGE_EVENTS_RL, !eventsInfo.right));
}

function onDel(e) {
    let par, id;
    par = e.target;
    if (par.hasAttribute("data-id")) {
        id = par.getAttribute("data-id");
        dispatch(changeEvents(CHANGE_EVENT_DEL, undefined, id));
    }
}

function delT(id) {
    dispatch(changeEvents(CHANGE_EVENT_DEL, true, id));
}

export function Events() {
    eventsInfo = useSelector(events);
    // if(!dispatch) setActNew(0);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount Events.jsx");
        for(let id of Object.getOwnPropertyNames(eventsInfo.time)){
            if(eventsInfo.time[id].init) continue;
            setTimeout(()=>(delT(id)),eventsInfo.time[id].long*1000);
            dispatch(changeEvents(CHANGE_EVENT_TIMER, true, id));
        }
        return function() {
            dispatch = undefined;
            console.log("I was triggered during componentWillUnmount Events.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        for(let id of Object.getOwnPropertyNames(eventsInfo.time)){
            if(eventsInfo.time[id].init) continue;
            setTimeout(()=>(delT(id)),eventsInfo.time[id].long*1000);
            dispatch(changeEvents(CHANGE_EVENT_TIMER, true, id));
        }
        console.log('componentDidUpdate Events.jsx');
    });
    return (
        <div className={eventsCSS.evHeader} style={{top: (7*eventsInfo.steps) + "vh", left: eventsInfo.right ? "" : "1vw", right: eventsInfo.right ? "1vw" : ""}} ref={(el)=>(evHeader = el)}>
            {Object.getOwnPropertyNames(eventsInfo.evs).reverse().map(param =>
                <div className={eventsCSS.warne} key={param}>
                    <img src={warn} className={eventsCSS.warnimg} alt=""/>
                    <span className={eventsCSS.title}>
                        {eventsInfo.evs[param].title}
                    </span>
                    <img className={eventsCSS.imgCl} data-id={param} src={no} onClick={onDel} title="Удалить" alt=""/>
                    <div className={eventsCSS.text}>
                        {eventsInfo.evs[param].text}
                    </div>
                    <div className={eventsCSS.time}>
                        {eventsInfo.evs[param].dtime}
                    </div>
                </div>
            )}
        </div>
    )
}
export default Events;
import React, {useEffect, useRef} from "react";
import {Helmet} from "react-helmet-async";
import errCSS from './error.module.css';
import warn from '../../../media/warn_big.png';
import {states} from "../../../store/selector";
import {useSelector} from "react-redux";

export function ErrFound(props) {
    const cState = useSelector(states);
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount ErrFound.jsx");
        return function() {
            console.log("I was triggered during componentWillUnmount ErrFound.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate ErrNotFound.jsx');
    });
    return props.text ?
            <div className={errCSS.block}>
                <img alt="banner" src={warn}/>
                <div className={errCSS.block_text}>
                    {props.text}
                </div>
            </div>
        :
            <div className={errCSS.AppHeader}>
                <Helmet>
                    <title>Ошибка</title>
                </Helmet>
                <div className={errCSS.block}>
                    <img alt="banner" src={warn}/>
                    {!cState.auth &&
                        <div className={errCSS.block_text}>
                            К сожалению, страница не найдена... Предлагаем изучить страницы на выбор ("Школам", "Педагогам", "Родителям", "Учащимся"). <br/>Также можете авторизоваться, тогда система предложит вам подходящую страницу по изучению портала.
                        </div>
                    }
                    {(cState.auth && cState.role == 3) &&
                        <div className={errCSS.block_text}>
                            К сожалению, страница не найдена... Предлагаем изучить страницу "Школам".
                        </div>
                    }
                    {(cState.auth && cState.role == 2) &&
                        <div className={errCSS.block_text}>
                            К сожалению, страница не найдена... Предлагаем изучить страницу "Педагогам".
                        </div>
                    }
                    {(cState.auth && cState.role == 1) &&
                        <div className={errCSS.block_text}>
                            К сожалению, страница не найдена... Предлагаем изучить страницу "Родителям".
                        </div>
                    }
                    {(cState.auth && cState.role == 0) &&
                        <div className={errCSS.block_text}>
                            К сожалению, страница не найдена... Предлагаем изучить страницу "Обучающимся".
                        </div>
                    }
                </div>
            </div>
}
export default ErrFound;
.AppHeader {
	width: 100%;
	height: 86vh;
	display: flex;
	position: relative;
	top: 7vh;
}

.block{
	margin: auto;
	text-align: center;
}

.block > img{
	width: 30vmin;
	height: 30vmin;
}

.block_text{
	width: 70vmin;
	color:var(--cV2);
	font-weight: bold;
	font-size: 1.5vw;
	text-shadow: 2px 2px 2px #000;
	transition: color 1s ease;
	text-align: left;
}
import React, {useEffect, useRef} from "react";
import dialogCSS from './dialog.module.css';
import {dialog, states} from "../../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import start from "../../start/start.module.css";
import button from "../../button.module.css";
import {CHANGE_DIALOG_DEL, changeDialog} from "../../../store/actions";

export function Dialog() {
    const cState = useSelector(states);
    const dialogInfo = useSelector(dialog);
    const isFirstUpdate = useRef(true);
    const dispatch = useDispatch();
    useEffect(() => {
        console.log("I was triggered during componentDidMount Dialog.jsx");
        return function() {
            console.log("I was triggered during componentWillUnmount Dialog.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate ErrNotFound.jsx');
    });
    return dialogInfo.obj &&
        <div className={dialogCSS.over}>
            <div className={dialogCSS.block}>
                {dialogInfo.obj}
                {dialogInfo.buts && Object.getOwnPropertyNames(dialogInfo.buts).map(param =>
                    <div className={button.button+" "+start.button+" "+start.butz} onClick={() => dispatch(changeDialog(CHANGE_DIALOG_DEL))}>
                        {dialogInfo.buts[param].text}
                    </div>
                )}
            </div>
        </div>
}
export default Dialog;
.over{
	width: 100%;
	height: 100%;
	background: #00000055;
	position: fixed;
	display: flex;
	top: 0;
	justify-content: center;
	align-items: center;
}

.block{
	background-color: var(--bgcV1);
	-webkit-border-radius: 4px;
	border-radius: 4px;
	padding-block: 9px;
	padding-right: 12px;
	width: 50%;
	height: 75%;
	text-align: center;
	color: var(--shdV2);
}
import React, {useEffect} from "react";
import {useDispatch, useSelector} from "react-redux";
import checkBoxCSS from './checkBox.module.css';
import {checkbox} from "../../../store/selector";
import {changeCB} from "../../../store/actions";


const CheckBox = (props) => {
    const checkBoxState = useSelector(checkbox);
    const dispatch = useDispatch();
    useEffect(() => {
        console.log("I was triggered during componentDidMount CheckBox.jsx");
        if(checkBoxState[props.checkbox_id] == undefined) {
            dispatch(changeCB(props.checkbox_id, props.state ? false : true));
        }
        return function() {
            console.log("I was triggered during componentWillUnmount CheckBox.jsx");
        }
    }, []);
    return (
        <div className={checkBoxCSS.block}>
            <input className={checkBoxCSS.inp}
                type="checkbox"
                {...props}
                checked={checkBoxState[props.checkbox_id] ? "checked" : ""}
                onChange={() => {dispatch(changeCB(props.checkbox_id, checkBoxState[props.checkbox_id]))}}
            />
            <div className={checkBoxCSS.tex}>
                {props.text}
            </div>
        </div>
    );
};
export default CheckBox;
.block{
    display: inline-block;
    vertical-align: middle;
}

.tex{
    display: inline-block;
    vertical-align: middle;
}

.inp{
    vertical-align: middle;
}
import React, {useEffect, useRef} from "react";
import newsCSS from './newsMain.module.css';
import {Outlet} from "react-router-dom";
import {useDispatch, useSelector} from "react-redux";
import {states} from "../../store/selector";
import Pane from "../other/pane/Pane";
import {eventSource, prefSite, send, setActived} from "../main/Main";
import {CHANGE_NEWS, CHANGE_NEWS_DEL, CHANGE_NEWS_GL, CHANGE_NEWS_PARAM, changeNews} from "../../store/actions";
import ed from "../../media/edit.png";
import yes from "../../media/yes.png";
import no from "../../media/no.png";

let gr, cState, dispatch, type;
type = "Por";
gr = {
    group: 0
}

export function getEdField(edFi, titleEd, x, inf, inp, info, inps, forceUpdate, placeholder, pattern) {
    return (<>
        <div className={newsCSS.fi}>
            {edFi}
            {titleEd != "Ссылка:" && <img className={newsCSS.imgfield} src={ed} onClick={(e)=>onEdit(e, inps, forceUpdate, info)} title="Редактировать" alt=""/>}
        </div>
        <div className={newsCSS.ed}>
            <div className={newsCSS.preinf}>
                {titleEd}
            </div>
            {edFi.type == "pre" ?
                    <textarea className={newsCSS.inp+" "+newsCSS.inparea} id={inp} placeholder={placeholder} defaultValue={inf} data-id={x} onChange={(e)=>chStatB(e, inps)}/>
                :
                    <input className={newsCSS.inp} id={inp} placeholder={placeholder} pattern={pattern} defaultValue={inf} data-id={x} onChange={(e)=>chStatB(e, inps)}/>
            }
            {ele(false, inp, inps)}
            <img className={newsCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate)} title="Подтвердить" alt=""/>
            <img className={newsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={(e)=>onClose(e, inps, forceUpdate)} title="Отменить изменения и выйти из режима редактирования" alt=""/>
        </div>
    </>)
}

export function getAdd(info, inps, forceUpdate, x) {
    let edFi, dat, datFi, zag, zagFi, imiFi, im, tex, texFi;
    zag = x ? info[type][x].title : inps.inpnzt;
    zagFi = <h2 className={newsCSS.zag}>
        {zag}
    </h2>;
    dat = x ? info[type][x].date : inps.inpndt;
    datFi = <span className={newsCSS.date}>
        {dat}
    </span>;
    im = x ? info[type][x].img_url : inps.addIm;
    imiFi = <div className={newsCSS.banner}>
        <div>
            Изображение
        </div>
        <img className={newsCSS.imgfield} src={ed} onClick={(e)=>onEdit(e, inps, forceUpdate, info)} title="Редактировать" alt=""/>
    </div>;
    tex = x ? info[type][x].text : inps.inpntt;
    texFi = <pre className={newsCSS.field}>
        {tex}
    </pre>;
    edFi = (
        <div className={newsCSS.ns}>
            <div className={newsCSS.za} data-st="0">
                {getEdField(zagFi, "Заголовок:", x, zag, "inpnzt_" + (x?x:""), info, inps, forceUpdate)}
            </div>
            <div className={newsCSS.da} data-st="0">
                {getEdField(datFi, "Дата:", x, dat, "inpndt_" + (x?x:""), info, inps, forceUpdate, "ДД.ММ.ГГГГ", "^[0-9.]+$")}
            </div>
            <div className={newsCSS.te} data-st="0">
                {im ?
                        <span className={newsCSS.banner}>
                            <img alt="banner" data-id={x} src={prefSite+im} onError={(e)=>errLoadAddIm(e, inps, forceUpdate)}/>
                            <div className={newsCSS.upr}>
                                <img className={newsCSS.imgfield} src={ed} onClick={(e)=>onEdit(e, inps, forceUpdate, info)} title="Редактировать" alt=""/>
                                <img className={newsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={(e)=>onDel(e, inps, forceUpdate)} title="Удалить изображение" alt=""/>
                            </div>
                        </span>
                    :
                        <div className={newsCSS.im} data-st={inps.edAddIm ? "1" : "0"}>
                            {getEdField(imiFi, "Ссылка:", x, inps.edAddIm, "inpnit_" + (x?x:""), info, inps, forceUpdate, "/media/tuman.jpg")}
                        </div>
                }
                {getEdField(texFi, "Текст:", x, tex, "inpntt_" + (x?x:""), info, inps, forceUpdate)}
            </div>
            <div className={newsCSS.upr} data-id={x}>
                {!x && <img className={newsCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate)} title="Подтвердить" alt=""/>}
                <img className={newsCSS.imginp+" "} style={{marginRight: "1vw"}} src={no} onClick={(e)=>onClose(e, inps, forceUpdate)} title={x ? "Удалить новость" : "Отменить изменения и выйти из режима редактирования"} alt=""/>
            </div>
        </div>
    );
    return x ? (edFi) : (
        <div className={newsCSS.news_line} data-st="0">
            <div className={newsCSS.nav_i+" "+newsCSS.link} id={newsCSS.nav_i} onClick={(e)=>onEdit(e, inps, forceUpdate, info)}>
                Добавить новость
            </div>
            {edFi}
        </div>
    )
}

export function errorLoad(e) {
    e.target.style.display = 'none';
}

export function errLoadAddIm(e, inps, forceUpdate) {
    if (e.target.hasAttribute("data-id")) {
        dispatch(changeNews(CHANGE_NEWS_PARAM, type, e.target.getAttribute("data-id"), "", "img_url"));
    } else {
        inps.addIm = undefined;
        forceUpdate();
    }
}

export function onDel(e, inps, forceUpdate) {
    let par, ima;
    par = e.target.parentElement.parentElement;
    if(par.classList.contains(newsCSS.banner)){
        ima = par.querySelector("img");
        if (ima.hasAttribute("data-id")) {
            chNews(ima.getAttribute("data-id"), "", "img_url");
            // dispatch(changeNews(CHANGE_NEWS_PARAM, type, ima.getAttribute("data-id"), "", "img_url"));
        } else {
            inps.addIm = undefined;
            forceUpdate();
        }
    }
}

export function onEdit(e, inps, forceUpdate, info) {
    let par, ima;
    par = e.target.parentElement;
    if(par.classList.contains(newsCSS.news_line)){
        par.setAttribute('data-st', '1');
    }
    if(par.parentElement.classList.contains(newsCSS.im) || par.parentElement.classList.contains(newsCSS.te) || par.parentElement.classList.contains(newsCSS.da) || par.parentElement.classList.contains(newsCSS.za)){
        par = par.parentElement;
        par.setAttribute('data-st', '1');
    }
    if(par.parentElement.parentElement.classList.contains(newsCSS.im)){
        par = par.parentElement.parentElement;
        par.setAttribute('data-st', '1');
    }
    if(par.classList.contains(newsCSS.upr)){
        ima = par.parentElement.querySelector("img");
        if (ima.hasAttribute("data-id")) {
            inps.edAddIm = info[type][ima.getAttribute("data-id")].img_url;
            dispatch(changeNews(CHANGE_NEWS_PARAM, type, ima.getAttribute("data-id"), "", "img_url"));
        } else {
            inps.edAddIm = inps.addIm;
            inps.addIm = undefined;
            forceUpdate();
        }
    }
}

export function onFin(e, inps, forceUpdate) {
    let par, inp, bul;
    par = e.target.parentElement;
    bul = par.parentElement.classList.contains(newsCSS.te);
    inp = par.querySelector(bul ? "textarea" : "input");
    if(par.classList.contains(newsCSS.upr)){
        // dispatch(changeNews(CHANGE_NEWS, type, news.length == 0 ? 0 : parseInt(news[news.length-1]) + 1, obj));
        addNews(inps);
        return;
    }
    if (inps[inp.id]) {
        inp.setAttribute("data-mod", '0');
        if(par.parentElement.classList.contains(newsCSS.im)) {
            if (inps.edAddIm) inps.edAddIm = undefined;
            if (inp.hasAttribute("data-id")) {
                chNews(inp.getAttribute("data-id"), inp.value, "img_url");
                // dispatch(changeNews(CHANGE_NEWS_PARAM, type, inp.getAttribute("data-id"), inp.value, "img_url"));
            } else {
                inps.addIm = inp.value;
                forceUpdate();
            }
        }
        if(bul) {
            par = par.parentElement;
            if(inp.hasAttribute("data-id")){
                chNews(inp.getAttribute("data-id"), inp.value, "text");
                // dispatch(changeNews(CHANGE_NEWS_PARAM, type, inp.getAttribute("data-id"), inp.value,"text"));
            }else {
                inps.inpntt = inp.value;
                forceUpdate();
            }
        }
        if(par.parentElement.classList.contains(newsCSS.da)){
            par = par.parentElement;
            if(inp.hasAttribute("data-id")){
                chNews(inp.getAttribute("data-id"), inp.value, "date");
                // dispatch(changeNews(CHANGE_NEWS_PARAM, type, inp.getAttribute("data-id"), inp.value,"date"));
            }else {
                inps.inpndt = inp.value;
                forceUpdate();
            }
        }
        if(par.parentElement.classList.contains(newsCSS.za)){
            par = par.parentElement;
            if(inp.hasAttribute("data-id")){
                chNews(inp.getAttribute("data-id"), inp.value, "title");
                // dispatch(changeNews(CHANGE_NEWS_PARAM, type, inp.getAttribute("data-id"), inp.value,"title"));
            }else{
                inps.inpnzt = inp.value;
                forceUpdate();
            }
        }
        par.setAttribute('data-st', '0');
    } else {
        inp.setAttribute("data-mod", '1');
    }
}

export function onClose(e, inps, forceUpdate) {
    let par = e.target.parentElement;
    if(par.parentElement.classList.contains(newsCSS.im) || par.parentElement.classList.contains(newsCSS.te) || par.parentElement.classList.contains(newsCSS.da) || par.parentElement.classList.contains(newsCSS.za)){
        par = par.parentElement;
        if(inps.edAddIm) {
            inps.addIm = inps.edAddIm;
            inps.edAddIm = undefined;
            forceUpdate();
        } else {
            par.setAttribute('data-st', '0');
        }
    }
    if(par.classList.contains(newsCSS.upr)){
        if (par.hasAttribute("data-id")) {
            delNews(par.getAttribute("data-id"));
            // dispatch(changeNews(CHANGE_NEWS_DEL, type, par.getAttribute("data-id")));
        }else {
            par = par.parentElement.parentElement;
            par.setAttribute('data-st', '0');
        }
    }
}

export function chStatB(e, inps) {
    let el = e.target;
    inps[el.id] = !el.validity.patternMismatch && el.value.length != 0;
    if (inps[el.id]) {
        el.setAttribute("data-mod", '0');
    } else {
        el.setAttribute("data-mod", '1');
    }
    el.parentElement.querySelector(".yes").setAttribute("data-enable", +inps[el.id]);
}

export function ele (x, par, inps) {
    if(!inps[par]) inps[par] = x;
}

export function setTyp(x) {
    type = x;
    if(eventSource.readyState == EventSource.OPEN) setInfo();
    eventSource.addEventListener('connect', onCon, false);
    eventSource.addEventListener('addNewsC', addNewsC, false);
    eventSource.addEventListener('delNewsC', delNewsC, false);
    eventSource.addEventListener('chNewsC', chNewsC, false);
}

function onCon() {
    setInfo();
}

function setInfo() {
    send({
        type: type,
        uuid: cState.uuid
    }, 'POST', "news/getNews")
        .then(data => {
            console.log(data);
            if(data.error == false){
                dispatch(changeNews(CHANGE_NEWS_GL, type, undefined, data.body));
            }
        });
}

function delNewsC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changeNews(CHANGE_NEWS_DEL, type, msg.id));
}

function chNewsC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changeNews(CHANGE_NEWS_PARAM, type, msg.id, msg.val, msg.type));
}

function addNewsC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changeNews(CHANGE_NEWS, type, msg.id, msg.body));
}

function delNews (id) {
    console.log("delNews");
    send({
        uuid: cState.uuid,
        id: id
    }, 'POST', "news/delNews")
}

function chNews (id, inps, typ) {
    console.log("chNews");
    send({
        uuid: cState.uuid,
        type: typ,
        val: inps,
        id: id
    }, 'POST', "news/chNews")
}

function addNews (inps) {
    console.log("addNews");
    send({
        uuid: cState.uuid,
        title: inps.inpnzt,
        date: inps.inpndt,
        img_url: inps.addIm,
        text: inps.inpntt
    }, 'POST', "news/addNews")
}

export function setActNew(name) {
    gr.group = name;
}

export function NewsMain() {
    cState = useSelector(states);
    gr.groups = {
        0: {
            nam: "Объявления портала",
            linke: "por"
        },
        1: {
            nam: "Объявления учебного центра",
            linke: "yo"
        }
    };
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount NewsMain.jsx");
        setActived(1);
        return function() {
            dispatch = undefined;
            eventSource.removeEventListener('connect', onCon);
            eventSource.removeEventListener('addNewsC', addNewsC);
            eventSource.removeEventListener('delNewsC', delNewsC);
            eventSource.removeEventListener('chNewsC', chNewsC);
            console.log("I was triggered during componentWillUnmount NewsMain.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate NewsMain.jsx');
    });
    return (
        <div className={newsCSS.AppHeader}>
            {(cState.auth && cState.role != 4) &&
                <div className={newsCSS.pane}>
                    <Pane gro={gr}/>
                </div>
            }
            <Outlet />
        </div>
    )
}
export default NewsMain;
.AppHeader {
	width: 100%;
	height: 93vh;
	display: flex;
	position: relative;
	top: 7vh;
}

.pane{
	width: inherit;
	height: 7vh;
	position: fixed;
	z-index: 1;
}

.header {
	width: 100%;
	height: 86vh;
	display: flex;
	position: relative;
	top: 7vh;
}

.block {
	width: 50vw;
	margin: auto;
}

.center_colum {
	margin-block: 5vh;
}

.nav_i{
	text-decoration: none;
	border: 1px solid var(--bcV1);
	cursor: pointer;
	color: var(--cV1);
	font-size: 1.25vw;
	font-weight: bold;
	margin: -1px -0.5px;
	display: flex;
	align-items: center;
	justify-content: center;
	align-self: stretch;
	-webkit-transition: color 1s ease;
	-o-transition: color 1s ease;
	transition: color 1s ease;
	transition-property: color, text-shadow, border-color, background-color;
	background-color: var(--bgcV1);
	border-radius: 5px;
	text-shadow: 1px 1px 3px var(--shdV1);
	backface-visibility: hidden;
	perspective: 1000px;
}

#nav_i:hover{
	color: #00ff00 !important;
	text-shadow: 0 0 2vw #66ff66;
}

#nav_i:active, #nav_i[data-act="1"]{
	-webkit-transition: color 0.1s ease;
	-o-transition: color 0.1s ease;
	transition: color 0.1s ease;
	color: #004d00 !important;
}

.news_line {
	width:100%;
	overflow:hidden;
	background-color: var(--bgcV1);
	padding: 10px;
	border-radius: 5px;
	margin-bottom: 10px;
	transition: background-color 1s ease;
	border: none;
}

.zag {
	color:var(--cV1);
	margin: 0;
	text-shadow: 2px 2px 2px #000;
	transition: color 1s ease;
}

.date {
	font-size:10px;
	font-style:italic;
	color:var(--cV3);
	text-shadow: 1px 1px 3px #000;
	transition: color 1s ease;
	font-weight: normal;
}

.te {
	color: var(--cV1);
	margin-bottom:5px;
	text-shadow: 1px 1px 3px #000;
	transition: color 1s ease;
	font-size: initial;
	font-weight: normal;
	margin-block: 1em;
}

.banner {
	margin: 0 10px;
	width: 114px;
	float: left;
	position: relative;
}

span.banner > img{
	width: 100%;
}

.banner > .upr{
	margin: 5px;
	background-color: var(--bgcV1);
	border-radius: 5px;
	padding: 5px;
}

div.banner {
	border: var(--cV3) dashed;
	height: 114px;
	display: flex;
	flex-wrap: wrap;
	align-content: center;
	justify-content: center;
	position: relative;
}

div.banner > .imgfield{
	margin: 0;
}

div.banner > div{
	color: var(--cV3);
}

.link{
	text-decoration: underline;
	cursor: pointer;
	transition-delay: unset;
	border: none;
	background-color: unset;
	display: none;
}

.field{
	display: none;
	vertical-align: middle;
	margin-left: 5px;
}

.ns{
	display: none;
	transition-delay: unset;
	border: none;
	background-color: unset;
	position: relative;
}

.im{
	width: 50%;
}

.fi, .ed{
	display: none;
}

.news_line[data-st='1'] > .ns, .im[data-st='1'] > .ed, .te[data-st='1'] > .ed, .da[data-st='1'] > .ed, .za[data-st='1'] > .ed{
	display: block;
}

.news_line[data-st='0'] > .link, .im[data-st='0'] > .fi, .te[data-st='0'] > .fi, .da[data-st='0'] > .fi, .za[data-st='0'] > .fi{
	display: flex;
}

.im > .fi {
	float: left;
}

.imginp, .imgfield{
	width: 1vw;
	vertical-align: middle;
	cursor: pointer;
	margin-left: 1vw;
	display: inline-block;
	margin-block: auto;
}

.inp {
	border-radius: 0.5vmax;
	background-color: #4d4d4d;
	user-select: none;
	box-shadow: 0 1px #FFFFFFAA, inset 0 2px 2px #000000AA;
	border: 1px solid var(--bcV2);
	height: 90%;
	position:relative;
	transition: background-color 1s ease;
	transition-property: background-color, border-color;
	vertical-align: middle;
	display: inline-block;
	width: 50%;
	font-size: 1.25vw;
	padding: 0 0 0 1vw;
	margin-left: 1vw;
}

.inp[data-mod='1']{
	animation: but ease 1s;
	outline: solid red;
}

@keyframes but {
	0%{transform: rotateZ(-2deg);}
	50%{transform: rotateZ(2deg);}
	100%{transform: rotateZ(0deg);}
}

.inparea{
	font-size: 1.25vmax;
	padding-left: 1vmax;
	min-height: 10vh;
	width: 50%;
}

pre.field{
	white-space: pre-wrap;
	word-break: break-all;
	text-align: left;
	max-width: 90%;
}

img[data-enable="0"] {
	pointer-events: none;
	opacity: 0.4;
}

.upr{
	position: absolute;
	top: 0;
	right: 0;
	margin-inline: -1vw;
}

.field, .preinf{
	display: inline-block;
	vertical-align: middle;
	margin-left: 0.2vw;
	color: var(--cV1);
	text-shadow: 1px 1px 3px #000;
}

.field{
	margin-left: 5px;
}
import React, {useEffect, useReducer, useRef} from "react";
import {Helmet} from "react-helmet-async";
import newsCSS from '../newsMain.module.css';
import {news, states} from "../../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import {chStatB, errorLoad, getAdd, setActNew, setTyp} from "../NewsMain";
import ErrFound from "../../other/error/ErrFound";
import {CHANGE_EVENTS_CLEAR, changeEvents} from "../../../store/actions";
import {prefSite} from "../../main/Main";

let dispatch, newsInfo, type, inps, cState, errText;
type = "Yo";
inps = {inpntt : "Текст", inpnzt : "Заголовок", inpndt: new Date().toLocaleString("ru", {day:"2-digit", month: "2-digit", year:"numeric"})};
errText = "Новостей нет... Кажется, что новостная лента пустует не заслужено? Попробуйте попросить завуча заполнить информацию."

let [_, forceUpdate] = [];

export function NewsYo() {
    newsInfo = useSelector(news);
    cState = useSelector(states);
    if(!dispatch) {
        setActNew(1);
        setTyp(type);
    }
    [_, forceUpdate] = useReducer((x) => x + 1, 0);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount NewsYo.jsx");
        for(let el of document.querySelectorAll("." + newsCSS.ed + " > *[id^='inpn']")){
            chStatB({target: el}, inps);
        }
        return function() {
            dispatch(changeEvents(CHANGE_EVENTS_CLEAR));
            dispatch = undefined;
            console.log("I was triggered during componentWillUnmount NewsYo.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate NewsYo.jsx');
    });
    return (
        <div className={newsCSS.header}>
            <Helmet>
                <title>Объявления учебного центра</title>
            </Helmet>
            {Object.getOwnPropertyNames(newsInfo[type]).length == 0 && !(cState.auth && cState.role == 3) ?
                    <ErrFound text={errText}/>
                :
                    <div className={newsCSS.block}>
                        <section className={newsCSS.center_colum}>
                            {(cState.auth && cState.role == 3) && getAdd(newsInfo, inps, forceUpdate)}
                            {Object.getOwnPropertyNames(newsInfo[type]).reverse().map(param =>
                                <div className={newsCSS.news_line} data-st="1" key={param}>
                                    {(cState.auth && cState.role == 3) ?
                                            getAdd(newsInfo, inps, forceUpdate, param)
                                        : <>
                                            <h2 className={newsCSS.zag}>{newsInfo[type][param].title}</h2>
                                            <span className={newsCSS.date}>{newsInfo[type][param].date}</span>
                                            <div className={newsCSS.te}>
                                                <span className={newsCSS.banner}>
                                                    <img alt="banner" src={prefSite+newsInfo[type][param].img_url + ''} onError={errorLoad}/>
                                                </span>
                                                <pre className={newsCSS.field}>
                                                    {newsInfo[type][param].text}
                                                </pre>
                                            </div>
                                    </>}
                                </div>
                            )}
                        </section>
                    </div>
            }
        </div>
    )
}
export default NewsYo;
import React, {useEffect, useReducer, useRef} from "react";
import {Helmet} from "react-helmet-async";
import newsCSS from '../newsMain.module.css';
import {news, states} from "../../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import {chStatB, errorLoad, getAdd, setActNew, setTyp} from "../NewsMain";
import ErrFound from "../../other/error/ErrFound";
import {CHANGE_EVENTS_CLEAR, changeEvents} from "../../../store/actions";
import {prefSite} from "../../main/Main";

let dispatch, newsInfo, type, errText, inps, cState;
type = "Por";
errText = "Новостей нет... Ждите новой информации.";
inps = {inpntt : "Текст", inpnzt : "Заголовок", inpndt: new Date().toLocaleString("ru", {day:"2-digit", month: "2-digit", year:"numeric"})};
let [_, forceUpdate] = [];

export function NewsPor() {
    newsInfo = useSelector(news);
    cState = useSelector(states);
    if(!dispatch) {
        setActNew(0);
        setTyp(type);
    }
    [_, forceUpdate] = useReducer((x) => x + 1, 0);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount NewsPor.jsx");
        for(let el of document.querySelectorAll("." + newsCSS.ed + " > *[id^='inpn']")){
            chStatB({target: el}, inps);
        }
        return function() {
            dispatch(changeEvents(CHANGE_EVENTS_CLEAR));
            dispatch = undefined;
            console.log("I was triggered during componentWillUnmount NewsPor.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate NewsPor.jsx');
    });
    return (
        <div className={newsCSS.header}>
            <Helmet>
                <title>Объявления портала</title>
            </Helmet>
            {Object.getOwnPropertyNames(newsInfo[type]).length == 0 && !(cState.auth && cState.role == 4) ?
                    <ErrFound text={errText}/>
                :
                    <div className={newsCSS.block}>
                        <section className={newsCSS.center_colum}>
                            {(cState.auth && cState.role == 4) && getAdd(newsInfo, inps, forceUpdate)}
                            {Object.getOwnPropertyNames(newsInfo[type]).reverse().map(param =>
                                <div className={newsCSS.news_line} data-st="1" key={param}>
                                    {(cState.auth && cState.role == 4) ?
                                            getAdd(newsInfo, inps, forceUpdate, param)
                                        : <>
                                            <h2 className={newsCSS.zag}>{newsInfo[type][param].title}</h2>
                                            <span className={newsCSS.date}>{newsInfo[type][param].date}</span>
                                            <div className={newsCSS.te}>
                                                <span className={newsCSS.banner}>
                                                    <img alt="banner" src={prefSite+newsInfo[type][param].img_url + ''} onError={errorLoad}/>
                                                </span>
                                                <pre className={newsCSS.field}>
                                                    {newsInfo[type][param].text}
                                                </pre>
                                            </div>
                                    </>}
                                </div>
                            )}
                        </section>
                    </div>
            }
        </div>
    )
}
export default NewsPor;
.fon{
	background-image: url("../../media/fon.jpg");
	background-size: cover;
	width: 100%;
	height: 100%;
	position: fixed;
}

.fon div:nth-child(2){
	animation: flashlight 20000ms infinite linear;
	width: 100%;
	height: 100%;
	position: fixed;
	top: 0;
	left: 0;
}

.fon div:nth-child(2):before{
	content: ' ';
	background: #FFFFFF25;
	border-radius: 50%;
	width: 1px;
	height: 1px;
	transform: scale(300);
	position: absolute;
	top: 0;
	left: 0;
}

.fon div:nth-child(1){
	height: 100%;
	background-color: var(--bgcV3);
	transition: background-color 1s ease;
}

@keyframes flashlight {
	0% {
		opacity: 0;
	}
	5% {
		opacity: 1;
		transform: translate(5%, 20%);
	}
	40% {
		transform: translate(95%, 40%);
	}
	60% {
		transform: translate(5%, 60%);
	}
	95% {
		opacity: 0;
	}
	99% {
		transform: translate(95%, 10%);
	}
	100% {
		opacity: 0;
	}
}

.panel{
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	position:fixed;
	width: inherit;
	height: 7vh;
	display: grid;
	place-items: center;
	justify-items: stretch;
	gap: 1vmin;
	grid-template: auto/repeat(auto-fit,minmax(10px, auto));
	z-index: 2;
}

.pane{
	width: 100%;
	height: 7vh;
	z-index: 1;
}

.nav_i{
	text-decoration: none;
	border: 1px solid var(--bcV1);
	cursor: pointer;
	color: var(--cV1);
	font-size: 1.25vw;
	font-weight: bold;
	display: flex;
	align-items: center;
	justify-content: center;
	align-self: stretch;
	transition: color 1s ease;
	transition-property: color, text-shadow, border-color, background-color;
	background-color: var(--bgcV1);
	border-radius: 5px;
	text-shadow: 1px 1px 3px var(--shdV1);
	backface-visibility: hidden;
	perspective: 1000px;
}

#nav_i:hover, #nav_i:hover *{
	color: #00ff00 !important;
	text-shadow: 0 0 2vw #66ff66;
}

#nav_i:active, #nav_i:active *, #nav_i[data-act="1"]{
	-webkit-transition: color 0.1s ease;
	-o-transition: color 0.1s ease;
	transition: color 0.1s ease;
	color: #004d00 !important;
}

.log{
	display: grid;
	justify-items: center;
	grid-template: auto auto / auto auto;
	z-index: 1;
	margin-bottom: -1px;
}

.log img{
	width: 2vw;
	grid-row: 1/3;
	margin-right: 0.25vw;
}

.logLog{
	align-self: end;
}

.logText{
	font-size: 0.75vw;
	align-self: baseline;
}

.logBlock{
	position: relative;
	margin-inline: -0.5px;
	display: flex;
	align-items: center;
	justify-content: center;
	align-self: stretch;
	width: inherit;
	height: inherit;
	white-space: nowrap;
}

.logMenu{
	position: absolute;
	width: 100%;
	height: 100%;
	top: -300%;
	transition: top 1s ease;
	transition-property: top, opacity;
	opacity: 0;
}

.log:hover + .logMenu, .logMenu:hover{
	opacity: 1;
	top: 100%;
}

.logMenuBlock{
	height: 100%;
	margin-block: -0.5px;
}

.switcher
{
	position: fixed;
	bottom: 7vh;
	left: 6vw;
	text-align: center;
}

.switch
{
	display: inline-block;
	width: 60px;
	height: 30px;
	margin: 4px;
	position: relative;
	text-align: initial;
}

.switch .inp_sw
{
	display: none;
}

.slider
{
	position: absolute;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
	border-radius: 30px;
	box-shadow: 0 0 0 2px #777, 0 0 4px #777;
	cursor: pointer;
	border: 4px solid transparent;
	overflow: hidden;
	transition: 0.2s;
}

.slider:before
{
	position: absolute;
	content: "";
	width: 100%;
	height: 100%;
	background-color: #777;
	border-radius: 30px;
	transform: translateX(-30px);
	transition: 0.2s;
}

.inp_sw:checked + .slider:before
{
	transform: translateX(30px);
	background-color: #ff9900;
}

.inp_sw:checked + .slider
{
	box-shadow: 0 0 0 2px #ff9900, 0 0 8px #ff9900;
}

.lab_sw{
	color: var(--cV2);
	font-size: 2vmax;
	font-weight: bold;
	text-shadow: 2px 2px 2px #000;
	transition: color 1s ease;
}

.kidImg{
	width: 2vw;
	vertical-align: middle;
	cursor: pointer;
	margin-left: 1vw;
}

.kidInf{
	align-self: end;
	font-size: 0.75vw;
}

.kidText{
	align-self: baseline;
	font-size: 1vw;
}

.kidBlock{
	height: 100%;
}

.kidEl{
	display: grid;
	justify-items: center;
	grid-template: auto auto / auto auto auto;
	width: 100%;
	z-index: 1;
	margin-bottom: -1px;
}

.kidEl img{
	width: 2vw;
	grid-row: 1/3;
	margin-right: 0.25vw;
}

.kidEl:hover + .logMenu, .logMenu:hover{
	opacity: 1;
	top: 100%;
}

.mapImg{
	width: 2vw;
	vertical-align: middle;
	cursor: pointer;
	margin: 0 0.1vw;
	grid-column: 3;
}

.d{
	position: fixed;
	right: 12.5vw;
	font-size: 2vw;
	color: var(--cV2);
	bottom: 0;
	font-weight: bold;
	text-shadow: 2px 2px 2px #000;
}

.d1{
	user-select: none;
	cursor: pointer;
	position: fixed;
	width: 4vw;
	bottom: 50px;
	right: 6.25vw;
	display: none;
	box-shadow: rgb(0 0 0) 2px 2px 5px 3px;
	border-radius: 50%;
}
import React, {useEffect, useRef} from "react";
import {useNavigate} from "react-router-dom"

export function Redirect() {
    const isFirstUpdate = useRef(true);
    const navigate = useNavigate();
    useEffect(() => {
        console.log("I was triggered during componentDidMount Redirect.jsx");
        navigate("/DipvLom/");
        return function() {
            console.log("I was triggered during componentWillUnmount Redirect.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate Redirect.jsx');
    });
    return <></>
}
export default Redirect;
import React, {useEffect, useRef} from "react";
import mainCSS from './main.module.css';
import {Link, Outlet} from "react-router-dom";
import {useDispatch, useSelector} from "react-redux";
import {pane, states, themes} from "../../store/selector";
import {
    CHANGE_EVENT,
    CHANGE_EVENT_DEL,
    CHANGE_PANE_GR,
    CHANGE_STATE,
    CHANGE_STATE_GL,
    CHANGE_STATE_RESET,
    changeEvents,
    changeGroups,
    changeState,
    changeTheme
} from "../../store/actions";
import profd from "../../media/profd.png";
import profl from "../../media/profl.png";
import mapd from "../../media/Map_symbolD.png";
import mapl from "../../media/Map_symbolL.png";
import up from "../../media/up.png";
import Events from "../other/events/Events";
import Dialog from "../other/dialog/Dialog";
import Pane from "../other/pane/Pane";

let act, ke, gr, cState, dispatch, paneInfo, themeInfo, scrolling, timid, timidP, d1, warnErrNet, server;
scrolling = false;
server = "http://localhost:8080";
export let prefSite = "/DipvLom";
gr = {
    group: 4
};

export let eventSource;

function getPan(name, namecl, link, dopClass, fun) {
    let cl = "pan" + namecl;
    return fun ?
        <div className={mainCSS.nav_i+" "+cl+" "+(dopClass ? dopClass : "")} id={mainCSS.nav_i} onClick={fun}>
            {name}
        </div>
    :
        <Link className={mainCSS.nav_i+" "+cl+" "+(dopClass ? dopClass : "")} id={mainCSS.nav_i} to={link} onClick={() => {setActived("."+cl)}}>
            {name}
        </Link>;
}

function getLogin() {
    return (
        <div className={mainCSS.logBlock}>
            <div className={mainCSS.nav_i+' '+mainCSS.log} style={{width:"100%"}} id={mainCSS.nav_i}>
                <img alt="ico" src={prefSite + '/static/media/ls-icon'+ cState.ico +'.png'}/>
                <div className={mainCSS.logLog}>{cState.login}</div>
                <div className={mainCSS.logText}>Я - {cState.roleDesc}</div>
            </div>
            <div className={mainCSS.logMenu}>
                {getPan("Профиль", "Pro", "profiles", mainCSS.logMenuBlock)}
                {cState.roles && getPan("Сменить роль", "Rol", "", mainCSS.logMenuBlock,chRoles)}
                {getPan("Настройки", "Set", "settings", mainCSS.logMenuBlock)}
                {getPan("Выход", "Exi", "", mainCSS.logMenuBlock,onExit)}
            </div>
        </div>
    )
}

function getKids() {
    return cState.kids &&
        <div className={mainCSS.logBlock}>
            <div className={mainCSS.nav_i+' '+mainCSS.kidEl} id={mainCSS.nav_i}>
                <img className={mainCSS.kidImg} src={themeInfo.theme_ch ? profd : profl} title="Перейти в профиль" alt=""/>
                <div className={mainCSS.kidInf}>Информация о:</div>
                <div className={mainCSS.kidText}>{cState.kids[cState.kid]}</div>
                <img className={mainCSS.mapImg} src={themeInfo.theme_ch ? mapd : mapl} title="Перейти в профиль" alt=""/>
            </div>
            <div className={mainCSS.logMenu}>
                {Object.getOwnPropertyNames(cState.kids).map(param1 =>
                    <div className={mainCSS.nav_i+' '+mainCSS.log+' '+mainCSS.kidBlock} id={mainCSS.nav_i} onClick={e => selKid(param1)}>
                        <img className={mainCSS.kidImg} src={themeInfo.theme_ch ? profd : profl} title="Перейти в профиль" alt=""/>
                        <div className={mainCSS.kidInf}>Информация о:</div>
                        <div className={mainCSS.kidText}>{cState.kids[param1]}</div>
                    </div>
                )}
            </div>
        </div>
}

function selKid(kid) {
    send({
        uuid: cState.uuid,
        idL: kid
    }, 'POST', "auth/chKid")
        .then(data => {
            if(data.error == false) {
                console.log(data);
                dispatch(changeState(CHANGE_STATE, "kid", data.kid));
            }
        });
}

export function send(bod, typeC, url, type) {
    let sed = {method: typeC};
    if(bod){
        sed.headers = {'Content-Type': 'application/json'};
        if(!type) {
            sed.body = JSON.stringify(bod);
        } else {
            sed.body = JSON.stringify({
                type: type,
                body: bod
            });
        }
    }
    return fetch(server + "/"+(url ? url : ""), sed)
        .then(res => {
            if (!res.ok) {
                throw new Error(`This is an HTTP error: The status is ${res.status}`);
            }
            return res.json();
        })
        .catch(data => data);
}

function chRoles() {
    send({
        uuid: cState.uuid,
        role: cState.role
    }, 'POST', "auth/chRole")
        .then(data => {
            if(data.error == false && data.body.role != undefined){
                dispatch(changeState(CHANGE_STATE_GL, undefined, data.body));
            }
        });
}

function onExit() {
    dispatch(changeState(CHANGE_STATE_RESET));
    send({
        uuid: cState.uuid,
        notifToken: localStorage.getItem("notifToken")
    }, 'POST', "auth/exit");
}

export function setActived(name) {
    if(document.querySelector(act)) {
        document.querySelector(act).setAttribute('data-act', '0');
    }
    if(typeof name != "number"){
        if(document.querySelector(name)) {
            act = name;
            document.querySelector(name).setAttribute('data-act', '1');
        }
    }
    if(ke != undefined && paneInfo.els[ke]) {
        dispatch(changeGroups(CHANGE_PANE_GR, ke, name, undefined, false));
    } else {
        gr.group = name;
    }
}

function iniTheme(stat) {
    document.body.setAttribute(themeInfo.thP[stat].c, '');
    if(document.body.hasAttribute(themeInfo.thP[stat].p)) {
        document.body.removeAttribute(themeInfo.thP[stat].p)
    }
    Object.getOwnPropertyNames(themeInfo.thP[stat].params).map(param =>
        document.documentElement.style.setProperty(param, themeInfo.thP[stat].params[param])
    );
}

function scr() {
    if (window.pageYOffset >= window.innerHeight * 0.5)
        d1.style.display = "block";
    else
        d1.style.display = "none";
}

function tim() {
    if (scrolling) {
        scrolling = false;
        scr();
    }
}

export function addEvent(text, time, cons) {
    let title = "Внимание!";
    return dispatch(changeEvents(CHANGE_EVENT, undefined, undefined, title, text, time, cons)).payload.id;
}

export function remEvent(id) {
    dispatch(changeEvents(CHANGE_EVENT_DEL, undefined, id));
}

function badPing() {
    if(warnErrNet == undefined){
        warnErrNet = addEvent("Отсутствует подключение к серверу", undefined, true);
    }
}

function iniNet() {
    eventSource = new EventSource(server + '/auth/open-stream');
    eventSource.onopen = e => console.log('open');
    eventSource.onerror = e => {
        if (e.readyState == EventSource.CLOSED) {
            console.log('close');
            closeStream();
        } else {
            console.log('try to reconnect...');
        }
    };
    eventSource.addEventListener('chck', e => {
        const msg = JSON.parse(e.data);
        console.log(msg);
        dispatch(changeState(CHANGE_STATE, "uuid", msg));
        if(cState.login){
            send({
                login: cState.login,
                uuid: msg,
                notifToken: localStorage.getItem("notifToken"),
                permis: Notification.permission == "granted"
            }, 'POST', "auth/infCon")
                .then(data => {
                    if(data.error == false){
                        dispatch(changeState(CHANGE_STATE_GL, undefined, data.body));
                    }
                });
        }
    }, false);
    eventSource.addEventListener('ping', e => {
        if(warnErrNet != undefined){
            remEvent(warnErrNet);
            warnErrNet = undefined;
        }
        clearTimeout(timidP);
        timidP = setTimeout(badPing,15000);
    }, false);
}

function closeStream() {
    if(!eventSource) return;
    if(eventSource.readyState != EventSource.CLOSED) {
        send({
            uuid: cState.uuid
        }, 'POST', "auth/remCon");
        eventSource.close();
        // dispatch(changeState(CHANGE_STATE, "uuid", undefined));
    }
}

function openStream() {
    if (eventSource != undefined && eventSource.readyState != EventSource.CLOSED) {
        console.log("stream already opened");
        return;
    }

    iniNet();
}

function onTop(e){
    window.scroll({
        left: 0,
        top: 0,
        behavior: "smooth"
    });
}

export function Main() {
    dispatch = useDispatch();
    if(!themeInfo) openStream();
    themeInfo = useSelector(themes);
    cState = useSelector(states);
    paneInfo = useSelector(pane);
    const isFirstUpdate = useRef(true);
    const unMount = () => {
        window.onwheel = undefined;
        closeStream();
        clearTimeout(timid);
        themeInfo = undefined;
        clearInterval(timidP);
        console.log("I was triggered during componentWillUnmount Main.jsx")
    };
    gr.groups = {
        0: !cState.auth ? {
            nam: "Главная",
            linke: "/"
        } : undefined,
        1: {
            nam: "Объявления",
            linke: "news"
        },
        2: {
            nam: "Контакты",
            linke: "contacts"
        },
        3: {
            nam: "Люди",
            linke: "people"
        },
        4: !cState.auth || (cState.auth && cState.role == 3) ? {
            nam: "Школам",
            linke: "tutor/sch"
        } : undefined,
        5: !cState.auth || (cState.auth && cState.role == 2) ? {
            nam: "Педагогам",
            linke: "tutor/tea"
        } : undefined,
        6: !cState.auth || (cState.auth && cState.role == 1) ? {
            nam: "Родителям",
            linke: "tutor/par"
        } : undefined,
        7: !cState.auth || (cState.auth && cState.role == 0) ? {
            nam: "Обучающимся",
            linke: "tutor/kid"
        } : undefined,
        8: cState.auth && cState.role == 2 ? {
            nam: "Расписание",
            linke: "/"
        } : undefined,
        9: cState.auth && cState.role == 2 ? {
            nam: "Журнал",
            linke: "journal"
        } : undefined,
        10: cState.auth && cState.role == 3 ? {
            nam: "Администрирование УО",
            linke: "/"
        } : undefined,
        11: cState.auth && cState.role == 4 ? {
            nam: "Заявки",
            linke: "/"
        } : undefined,
        12: cState.auth && cState.role < 2 ? {
            nam: "Дневник",
            linke: "/"
        } : undefined,
        13: cState.auth && cState.role < 2 ? {
            nam: "Аналитика",
            linke: "analytics"
        } : undefined
    };
    useEffect(() => {
        console.log("I was triggered during componentDidMount Main.jsx");
        scr();
        iniTheme(themeInfo.theme_ch);
        window.onpagehide = unMount;
        window.onbeforeunload = unMount;
        window.onscroll = () => {
            if(!scrolling) {
                scrolling = true;
                timid = setTimeout(tim,300);
            }
        };
        timidP = setTimeout(badPing,15000);
        return unMount;
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate Main.jsx');
    });
    return (
        <>
            <div className={mainCSS.fon}>
                <div/>
                <div/>
            </div>
            <nav className={mainCSS.panel} id="her">
                <div className={mainCSS.pane} ref={()=>ke = ke == undefined ? paneInfo.els.length : ke}>
                    <Pane gro={gr} main={true}/>
                </div>
                {cState.auth && getLogin()}
                {(cState.auth && cState.role == 1) && getKids()}
            </nav>
            <Outlet/>
            <Dialog/>
            <Events/>
            <div className={mainCSS.switcher}>
                <label className={mainCSS.switch}>
                    <input className={mainCSS.inp_sw} type="checkbox" checked={themeInfo.theme_ch ? "checked" : ""} onChange={() => {dispatch(changeTheme(themeInfo.theme_ch, themeInfo.thP))}}/>
                    <span className={mainCSS.slider}/>
                </label>
                <div className={mainCSS.lab_sw}>
                    Тема: {themeInfo.theme}
                </div>
            </div>
            <div className={mainCSS.d}>
                © 2023 ООО "Рога и Копыта" Все права защищены. Project on <a href="https://github.com/Ddudde/DipvLom" style={{color: "var(--cV2)"}}>github</a>.
            </div>
            <img className={mainCSS.d1} src={up} title="Вверх" alt="" onClick={onTop} ref={el=>d1 = el}/>
        </>
    )
}
export default Main;
import React, {useEffect, useRef} from "react";
import {Helmet} from "react-helmet-async";
import settingsCSS from './settings.module.css';
import {checkbox, states} from "../../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import {CHANGE_EVENTS_CLEAR, CHANGE_STATE, changeEvents, changeState} from "../../../store/actions";
import ran from "../../../media/random.png";
import button from "../../button.module.css";
import CheckBox from "../../other/checkBox/CheckBox";
import ls1 from "../../../media/ls-icon1.png";
import ls2 from "../../../media/ls-icon2.png";
import ls3 from "../../../media/ls-icon3.png";
import {addEvent, eventSource, remEvent, send, setActived} from "../Main";

let dispatch, elem, cState, oldPasSt, els;
oldPasSt = true;
elem = {npasinp : undefined, powpasinp : undefined, zambut : undefined, zambut1 : undefined, oldinp : undefined, secinp : undefined};
els = {oldinp: undefined, secinp: undefined, npasinp: undefined, powpasinp: undefined};

function inpchr(event) {
    var el = event.target;
    if (el.validity.patternMismatch || el.value.length == 0) {
        el.setAttribute("data-mod", '1');
        // warner.style.display = "inline";
    } else {
        el.setAttribute("data-mod", '0');
        // warner.style.display = "none";
    }
}

function onEditPass(e) {
    let par = e.target.parentElement;
    par.setAttribute('data-mod', '1');
}

function onChSt(e) {
    let par = e.target.parentElement.parentElement;
    oldPasSt = !oldPasSt;
    chStatB({target:oldPasSt ? elem.oldinp:elem.secinp});
    if(!oldPasSt && !cState.secFr){
        if (els.warnUnsetSecFr == undefined) {
            els.warnUnsetSecFr = addEvent("Секретная фраза не установлена");
        }
    } else if(els.warnUnsetSecFr != undefined) {
        remEvent(els.warnUnsetSecFr);
        els.warnUnsetSecFr = undefined;
    }
    if(els.warnErrSecFr != undefined) {
        remEvent(els.warnErrSecFr);
        els.warnErrSecFr = undefined;
    }
    if(els.warnErrPar != undefined) {
        remEvent(els.warnErrPar);
        els.warnErrPar = undefined;
    }
    par.setAttribute('data-mod', oldPasSt ? '0' : '1');
}

function onClosePas(e) {
    let par = e.target.classList.contains("clA") ? e.target.parentElement.parentElement : e.target.parentElement.parentElement.parentElement;
    par.setAttribute('data-mod', '0');
}

function onChSF(e) {
    let par, inp;
    par = e.target.parentElement.parentElement;
    inp = par.querySelector("input");
    send({
        login: cState.login,
        secFR: inp.value
    }, 'POST', "settings", "chSecFR")
        .then(data => {
            if(data.error == false){
                onClosePas(e);
                inp.value = "";
                dispatch(changeState(CHANGE_STATE, "secFr", true));
                if(els.warnUnsetSecFr != undefined) {
                    remEvent(els.warnUnsetSecFr);
                    els.warnUnsetSecFr = undefined;
                }
                chStatB({target:oldPasSt ? elem.oldinp:elem.secinp});
            }
        });
}

function chStatB(e) {
    let el = e.target, bool;
    els[el.id] = (!el.validity.patternMismatch && el.value.length != 0) ? el.value : undefined;
    bool = ((oldPasSt ? els.oldinp != undefined : (els.secinp != undefined & cState.secFr)) & els.npasinp != undefined & els.powpasinp != undefined & (els.npasinp == els.powpasinp));
    elem.zambut.setAttribute("data-enable", +bool);
    if(els.npasinp == els.powpasinp) {
        if(els.warnPow != undefined) {
            remEvent(els.warnPow);
            els.warnPow = undefined;
        }
    } else if (els.warnPow == undefined) {
        els.warnPow = addEvent("Повторите новый пароль верно");
    }
}

function chStatAv(e) {
    send({
        login: cState.login,
        ico: e.target.firstChild.value
    }, 'POST', "settings", "chIco")
        .then(data => {
            if(data.error == false){
                e.target.firstChild.checked = true;
                dispatch(changeState(CHANGE_STATE, "ico", e.target.firstChild.value));
            }
        });
}

function onCloseChPar(e) {
    if(els.warnPow != undefined) {
        remEvent(els.warnPow);
        els.warnPow = undefined;
    }
    onClosePas(e);
}

function onFinChPar(e) {
    send({
        login: cState.login,
        oPar: oldPasSt ? els.oldinp : undefined,
        secFr: oldPasSt ? undefined : els.secinp,
        nPar : els.npasinp
    }, 'POST', "settings", "chPass")
        .then(data => {
            if(data.error == false){
                onClosePas(e);
                if(els.warnErrSecFr != undefined) {
                    remEvent(els.warnErrSecFr);
                    els.warnErrSecFr = undefined;
                }
                if(els.warnErrPar != undefined) {
                    remEvent(els.warnErrPar);
                    els.warnErrPar = undefined;
                }
            } else if(data.error == 2 && els.warnErrPar == undefined){
                els.warnErrPar = addEvent("Старый пароль неверен, попробуйте воспользоваться секретной фразой");
            } else if(data.error == 3 && els.warnErrSecFr == undefined){
                els.warnErrSecFr = addEvent("Секретная фраза неверна, попробуйте воспользоваться старым паролем");
            }
        });
}

function chStatSb1(e) {
    let el = e.target;
    elem.zambut1.setAttribute("data-enable", +(el ? el.value.length != 0 : false));
}

function onCon(e) {
    send({
        type: "SETTINGS",
        uuid: cState.uuid
    }, 'POST', "auth", "infCon");
}

export function gen_pas(e){
    let password, symbols;
    password = "";
    symbols = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    for (var i = 0; i < 15; i++){
        password += symbols.charAt(Math.floor(Math.random() * symbols.length));
    }
    for(let el of [elem.npasinp, elem.powpasinp]){
        el.value = password;
        inpchr({target:el});
        chStatB({target:el});
    }
    navigator.clipboard.writeText(password);
    addEvent(`Сгенерирован пароль: ${password}. Он скопирован в буфер обмена`, 10);
}

export function Settings() {
    const checkBoxInfo = useSelector(checkbox);
    dispatch = useDispatch();
    cState = useSelector(states);
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        setActived(".panSet");
        console.log("I was triggered during componentDidMount Settings.jsx");
        document.querySelector("#ch" + cState.ico).checked = true;
        eventSource.addEventListener('connect', onCon, false);
        return function() {
            dispatch(changeEvents(CHANGE_EVENTS_CLEAR));
            eventSource.removeEventListener('connect', onCon);
            console.log("I was triggered during componentWillUnmount Settings.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate Settings.jsx');
    });
    return (
        <div className={settingsCSS.AppHeader}>
            <Helmet>
                <title>Настройки</title>
            </Helmet>
            <div className={settingsCSS.blockPro}>
                <div className={settingsCSS.pro}>
                    <div className={settingsCSS.nav_i} id={settingsCSS.nav_i}>
                        <CheckBox text={"Включить уведомления"} checkbox_id={"checkbox_notify"}/>
                    </div>
                    <div className={settingsCSS.nav_iZag+" "+settingsCSS.blockNotif} data-act={(checkBoxInfo.checkbox_notify || false) ? '1' : '0'}>
                        {(cState.role < 3) && <div className={settingsCSS.nav_i} id={settingsCSS.nav_i}>
                            <CheckBox state={+true} text={"Уведомления о изменении в расписании"} checkbox_id={"checkbox_notify_sched"}/>
                        </div>}
                        {(cState.role < 2) && <div className={settingsCSS.nav_i} id={settingsCSS.nav_i}>
                            <CheckBox state={+true} text={"Уведомления о новых оценках"} checkbox_id={"checkbox_notify_marks"}/>
                        </div>}
                        {(cState.role < 3) && <div className={settingsCSS.nav_i} id={settingsCSS.nav_i}>
                            <CheckBox state={+true} text={"Присылать новые объявления учебного центра"} checkbox_id={"checkbox_notify_yo"}/>
                        </div>}
                        {(cState.role < 4) && <div className={settingsCSS.nav_i} id={settingsCSS.nav_i}>
                            <CheckBox state={+true} text={"Присылать новые объявления портала"} checkbox_id={"checkbox_notify_por"}/>
                        </div>}
                        {(cState.role == 4) && <div className={settingsCSS.nav_i} id={settingsCSS.nav_i}>
                            <CheckBox state={+true} text={"Присылать уведомления о новых заявках школ"} checkbox_id={"checkbox_notify_new_sch"}/>
                        </div>}
                    </div>
                    <div className={settingsCSS.nav_iZag} data-mod="0">
                        <div className={settingsCSS.nav_i+" "+settingsCSS.link} id={settingsCSS.nav_i} data-act='1' onClick={onEditPass}>
                            Сменить пароль
                        </div>
                        <div className={settingsCSS.block} data-mod='0'>
                            <div className={settingsCSS.pasBlock+" "+settingsCSS.oldp}>
                                <input className={settingsCSS.inp} onChange={chStatB} onInput={inpchr} ref={el=>elem.oldinp = el} id="oldinp" placeholder="Старый пароль" type="password" pattern="^[a-zA-Z0-9]+$"/>
                                <div className={button.button+" "+settingsCSS.marg} data-mod="2" onClick={onChSt}>
                                    Забыл пароль?
                                </div>
                            </div>
                            <div className={settingsCSS.pasBlock+" "+settingsCSS.frp}>
                                <input className={settingsCSS.inp} onChange={chStatB} onInput={inpchr} ref={el=>elem.secinp = el} id="secinp" placeholder="Секретная фраза" type="password" pattern="^[a-zA-Z0-9]+$"/>
                                <div className={button.button+" "+settingsCSS.marg} data-mod="2" onClick={onChSt}>
                                    Вспомнил пароль
                                </div>
                            </div>
                            <div className={settingsCSS.pasBlock}>
                                <input className={settingsCSS.inp} ref={el=>elem.npasinp = el} onChange={chStatB} onInput={inpchr} id="npasinp" placeholder="Новый пароль" type="password" autoComplete="new-password" pattern="^[a-zA-Z0-9]+$"/>
                                <div className={button.button+" "+settingsCSS.marg} data-mod="2" onClick={gen_pas}>
                                    <img src={ran} className={settingsCSS.randimg} alt=""/>
                                    Случайный пароль
                                </div>
                            </div>
                            <input className={settingsCSS.inp+" "+settingsCSS.inpPass} ref={el=>elem.powpasinp = el} id="powpasinp" onChange={chStatB} onInput={inpchr} placeholder="Повторите пароль" type="password" autoComplete="new-password" pattern="^[a-zA-Z0-9]+$"/>
                            <div className={settingsCSS.blockKnops}>
                                <div className={button.button} ref={el=>elem.zambut = el} data-mod="2" data-enable="0" onClick={onFinChPar}>
                                    Замена!
                                </div>
                                <div className={button.button} data-mod="2" onClick={onCloseChPar}>
                                    Отменить
                                </div>
                            </div>
                        </div>
                    </div>
                    <div className={settingsCSS.nav_iZag} data-mod="0">
                        <div className={settingsCSS.nav_i+" "+settingsCSS.link} id={settingsCSS.nav_i} onClick={onEditPass}>
                            Сменить аватар
                        </div>
                        <div className={settingsCSS.block}>
                            <div className={settingsCSS.logo}>
                                <p style={{marginBlock: "0.5vw"}}>Выберите аватар для профиля:</p>
                                <div className={settingsCSS.blockAva} onClick={chStatAv}>
                                    <input id="ch1" name="ico" type="radio" value="1"/>
                                    <img className={settingsCSS.logoi} src={ls1} alt=""/>
                                </div>
                                <div className={settingsCSS.blockAva} onClick={chStatAv}>
                                    <input id="ch2" name="ico" type="radio" value="2"/>
                                    <img className={settingsCSS.logoi} src={ls2} alt=""/>
                                </div>
                                <div className={settingsCSS.blockAva} onClick={chStatAv}>
                                    <input id="ch3" name="ico" type="radio" value="3"/>
                                    <img className={settingsCSS.logoi} src={ls3} alt=""/>
                                </div>
                            </div>
                            <div className={button.button+' clA '+settingsCSS.marg} data-mod="2" style={{width:"fit-content"}} onClick={onClosePas}>
                                Закрыть меню выбора
                            </div>
                        </div>
                    </div>
                    <div className={settingsCSS.nav_iZag} data-mod="0">
                        <div className={settingsCSS.nav_i+" "+settingsCSS.link} id={settingsCSS.nav_i} onClick={onEditPass}>
                            {cState.secFr? "Изменить" : "Добавить"} секретную фразу
                        </div>
                        <div className={settingsCSS.block}>
                            <input className={settingsCSS.inp+" "+settingsCSS.inpPass} onChange={chStatSb1} onInput={inpchr} placeholder="Секретная фраза" type="password" pattern="^[a-zA-Z0-9]+$"/>
                            <div className={settingsCSS.blockKnops}>
                                <div className={button.button} data-mod="2" ref={el=>elem.zambut1 = el} data-enable="0" onClick={onChSF}>
                                    Подтвердить
                                </div>
                                <div className={button.button} data-mod="2" onClick={onClosePas}>
                                    Отменить
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}
export default Settings;
.AppHeader {
	width: 100%;
	display: flex;
	position: relative;
	top: 7vh;
	height: 93vh;
}

.blockNotif[data-act='0']{
	opacity: 0.5;
	pointer-events: none;
}

.blockNotif[data-act='1']{
	opacity: 1;
	pointer-events: initial;
}

.blockPro{
	margin: auto;
	width: 75%;
}

.pro{
	background-color: var(--bgcV1);
	padding: 10px;
	margin-block: 5vh;
	border-radius: 5px;
	transition: background-color 1s ease;
}

.nav_i{
	cursor: default;
	color: var(--cV1);
	font-size: 1.25vw;
	font-weight: 500;
	margin-block: 0.2vw;
	transition: color 1s ease;
	transition-property: color, text-shadow, border-color;
	text-shadow: 1px 1px 3px var(--shdV1);
	backface-visibility: hidden;
	perspective: 1000px;
}

#nav_i:hover{
	color: #00ff00 !important;
	text-shadow: 0 0 2vw #66ff66;
}

.nav_iZag{
	border: 1px solid var(--bcV1);
	border-radius: 5px;
	margin-left: 0.5vw;
	margin-block: 0.5vw;
	padding-left: 0.5vw;
	padding-block: 0.5vw;
}

.link{
	text-decoration: underline;
	cursor: pointer;
	margin-block: 1vw;
	display: inline-block;
	vertical-align: middle;
	margin-left: 5px;
}

.nav_iZag[data-mod='0'] > .block, .nav_iZag[data-mod='1'] > .link,
.block[data-mod='0'] > .frp, .block[data-mod='1'] > .oldp{
	display: none;
}

.pasBlock{
	display: flex;
	margin-bottom: 1vw;
	align-items: center;
}

.marg{
	margin-left: 9px;
}

.inp {
	border-radius: 0.5vmax;
	background-color: #4d4d4d;
	user-select: none;
	box-shadow: 0 1px #FFFFFFAA, inset 0 2px 2px #000000AA;
	border: 1px solid var(--bcV2);
	font-size: 2.2vmax;
	height: 7vh;
	margin-left: 1.5vmax;
	padding-left: 1.5vmax;
	width: 20vw;
	position:relative;
	transition: background-color 1s ease;
	transition-property: background-color, border-color;
	vertical-align: middle;
}

.inp[data-mod='1']{
	animation: but ease 1s;
	outline: solid red;
}

@keyframes but {
	0%{transform: rotateZ(-2deg);}
	50%{transform: rotateZ(2deg);}
	100%{transform: rotateZ(0deg);}
}

.inpPass{
	margin-bottom: 1vw;
}

.randimg{
	width: 4vmin;
	height: 4vmin;
	pointer-events: none;
}

.blockKnops{
	margin-left: 1.5vmax;
	width: 21.5vw;
	display: flex;
	justify-content: space-between;
}

.logo{
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	color: var(--cV1);
	font-size: 3vw;
	font-weight: bolder;
	margin-left: 9px;
	margin-bottom: 9px;
	transition: color 1s ease;
}

.logoi{
	width: 8vw;
	height: 8vw;
}

.blockAva{
	display: inline-block;
	cursor: pointer;
}

.blockAva *{
	pointer-events: none;
}
import React, {useEffect, useRef} from "react";
import {useNavigate, useParams} from "react-router-dom"
import {Helmet} from "react-helmet-async";
import profileCSS from './profile.module.css';
import {profiles, states, themes} from "../../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import yes from "../../../media/yes.png";
import no from "../../../media/no.png";
import ed from "../../../media/edit.png";
import profd from "../../../media/profd.png";
import profl from "../../../media/profl.png";
import {
    CHANGE_EVENTS_CLEAR,
    CHANGE_PROFILE,
    CHANGE_PROFILE_GL,
    CHANGE_PROFILE_ROLES,
    CHANGE_STATE,
    changeEvents,
    changeProfile,
    changeState
} from "../../../store/actions";
import {addEvent, eventSource, prefSite, send, setActived} from "../Main";
import ErrFound from "../../other/error/ErrFound";

let profilesInfo, dispatch, moore, errText, cState, navigate;
errText = "К сожалению, информация не найдена...";

moore = `/*
Можете что-то рассказать о себе
Дополнительные контакты:
	Телефон: 8 800 555 35 35
	ВК: https://vk.com/id
	Телеграмм: https://t.me/id
	e-mail1: fsdfdsfd@ya.ru
	e-mail2: fsdfdsfd2@ya.ru
*/`;

function inpchr(event){
    var el = event.target;
    if (el.validity.patternMismatch || el.validity.typeMismatch || el.value.length == 0) {
        el.setAttribute("data-mod", '1');
        // warner.style.display = "inline";
    } else {
        el.setAttribute("data-mod", '0');
        // warner.style.display = "none";
    }
    el.parentElement.querySelector(".yes").setAttribute("data-enable", +(!el.validity.typeMismatch && !el.validity.patternMismatch && el.value.length != 0));
}

function onEdit(e) {
    let par = e.target.parentElement;
    par.setAttribute('data-mod', '1');
}

function onFin(e, param) {
    let par, inp;
    par = e.target.parentElement;
    inp = par.querySelector("." + profileCSS.inp);
    if(inp.tagName == "TEXTAREA")
    {
        send({
            login: cState.login,
            info: inp.value
        }, 'POST', "profiles", "chInfo")
            .then(data => {
                if(data.error == false){
                    dispatch(changeProfile(CHANGE_PROFILE, "more", inp.value));
                    par.setAttribute('data-mod', '0');
                }
            });
    } else if (inp.validity.typeMismatch || inp.validity.patternMismatch || inp.value.length == 0) {
        inp.setAttribute("data-mod", '1');
        // warner.style.display = "inline";
    } else {
        inp.setAttribute("data-mod", '0');
        // warner.style.display = "none";
        if (inp.type == "email") {
            send({
                login: cState.login,
                email: inp.value,
                role: param
            }, 'POST', "profiles", "chEmail")
                .then(data => {
                    if(data.error == false){
                        dispatch(changeProfile(CHANGE_PROFILE_ROLES, "email", inp.value, param));
                        par.setAttribute('data-mod', '0');
                    }
                });
        } else {
            send({
                oLogin: cState.login,
                nLogin: inp.value
            }, 'POST', "profiles", "chLogin")
                .then(data => {
                    if(data.error == false){
                        dispatch(changeState(CHANGE_STATE, "login", inp.value));
                        dispatch(changeProfile(CHANGE_PROFILE, "login", inp.value));
                        par.setAttribute('data-mod', '0');
                        navigate("/profiles");
                    } else {
                        addEvent("Логин занят, попробуйте изменить", 10);
                    }
                });
        }
    }
}

function onClose(e) {
    let par = e.target.parentElement;
    par.setAttribute('data-mod', '0');
    // warner.style.display = "none";
}

function chInfo(e) {
    const msg = JSON.parse(e.data);
    dispatch(changeProfile(CHANGE_PROFILE, "more", msg.more));
}

function chLogin(e) {
    const msg = JSON.parse(e.data);
    dispatch(changeProfile(CHANGE_PROFILE, "login", msg.login));
}

function chEmail(e) {
    const msg = JSON.parse(e.data);
    dispatch(changeProfile(CHANGE_PROFILE_ROLES, "email", msg.email, msg.role));
}

function onCon(e, log) {
    setInfo(log ? log : cState.login);
}

function setInfo(log) {
    send({
        type: "PROFILES",
        uuid: cState.uuid,
        podType: log
    }, 'POST', "auth", "infCon");
    send({
        login: log
    }, 'POST', "profiles", "getProfile")
        .then(data => {
            if(data.error == false && data.body.login){
                dispatch(changeProfile(CHANGE_PROFILE_GL, undefined, data.body));
            }
        });
}

export function Profile() {
    profilesInfo = useSelector(profiles);
    const { log } = useParams();
    navigate = useNavigate();
    cState = useSelector(states);
    const themeState = useSelector(themes);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        setActived(".panPro");
        setInfo(log ? log : cState.login);
        console.log("I was triggered during1 componentDidMount Profile.jsx");
        eventSource.addEventListener('connect', e=>onCon(e, log), false);
        eventSource.addEventListener('chEmail', chEmail, false);
        eventSource.addEventListener('chLogin', chLogin, false);
        eventSource.addEventListener('chInfo', chInfo, false);
        return function() {
            dispatch(changeEvents(CHANGE_EVENTS_CLEAR));
            eventSource.removeEventListener('connect', e=>onCon(e, log));
            eventSource.removeEventListener('chLogin', chLogin);
            eventSource.removeEventListener('chInfo', chInfo);
            console.log("I was triggered during componentWillUnmount Profile.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        if(log && log != profilesInfo.login) setInfo(log);
        console.log('componentDidUpdate Profile.jsx');
    });
    return (
        <div className={profileCSS.AppHeader}>
            <Helmet>
                <title>Профиль</title>
            </Helmet>
            {Object.getOwnPropertyNames(profilesInfo).length == 0 ?
                    <ErrFound text={errText}/>
                :
                    <div className={profileCSS.blockPro}>
                        <div className={profileCSS.pro}>
                            <img alt="ico" src={prefSite + '/static/media/ls-icon'+ profilesInfo.ico +'.png'}/>
                            <div className={profileCSS.nav_i} id={profileCSS.nav_i} data-mod='0'>
                                <div className={profileCSS.preinf}>
                                    Логин:
                                </div>
                                <div className={profileCSS.field}>
                                    {profilesInfo.login}
                                </div>
                                {(!log || log == cState.login) && <>
                                    <input className={profileCSS.inp} id="loginp" placeholder="nickname" onInput={inpchr} defaultValue={profilesInfo.login} type="text" pattern="^[a-zA-Z0-9]+$"/>
                                    <img className={profileCSS.imginp+" yes"} src={yes} onClick={onFin} title="Подтвердить изменения" alt=""/>
                                    <img className={profileCSS.imginp} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                                    <img className={profileCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                                </>}
                            </div>
                            <div className={profileCSS.nav_i} id={profileCSS.nav_i}>
                                ФИО: {profilesInfo.fio}
                            </div>
                            <div className={profileCSS.nav_i} id={profileCSS.nav_i} data-mod='0'>
                                <div className={profileCSS.preinf}>
                                    Дополнительная информация:
                                </div>
                                <pre className={profileCSS.field}>
                                    {profilesInfo.more}
                                </pre>
                                {(!log || log == cState.login) && <>
                                    <textarea className={profileCSS.inp+" "+profileCSS.inparea} placeholder="Информация о вас" onInput={inpchr} defaultValue={profilesInfo.more ? profilesInfo.more : moore}/>
                                    <img className={profileCSS.imginp+" yes"} src={yes} onClick={onFin} title="Подтвердить изменения" alt=""/>
                                    <img className={profileCSS.imginp} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                                    <img className={profileCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                                </>}
                            </div>
                            {profilesInfo.roles && Object.getOwnPropertyNames(profilesInfo.roles).map((param, i, x, role = profilesInfo.roles[param]) =>
                                <div className={profileCSS.nav_iZag} key={param}>
                                    <div className={profileCSS.nav_i} id={profileCSS.nav_i}>
                                        Роль: {cState.rolesDescrs[param]}
                                    </div>
                                    {role.yo && <div className={profileCSS.nav_i} id={profileCSS.nav_i}>
                                        Учебная организация: {role.yo}
                                    </div>}
                                    <div className={profileCSS.nav_i} id={profileCSS.nav_i} data-mod='0'>
                                        <div className={profileCSS.preinf}>
                                            Почта:
                                        </div>
                                        <div className={profileCSS.field}>
                                            {role.email}
                                        </div>
                                        {(!log || log == cState.login) && <>
                                            <input className={profileCSS.inp} onInput={inpchr} placeholder="ex@gmail.com" defaultValue={role.email} type="email"/>
                                            <img className={profileCSS.imginp+" yes"} src={yes} onClick={e => onFin(e, param)} title="Подтвердить изменения" alt=""/>
                                            <img className={profileCSS.imginp} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                                            <img className={profileCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                                        </>}
                                    </div>
                                    {role.group && <div className={profileCSS.nav_i} id={profileCSS.nav_i}>
                                        Класс: {role.group}
                                    </div>}
                                    {role.parents && <>
                                        <div className={profileCSS.nav_i} id={profileCSS.nav_i}>
                                            Родители:
                                        </div>
                                        <div className={profileCSS.nav_iZag}>
                                            {Object.getOwnPropertyNames(role.parents).map(param1 => <div key={param1}>
                                                <div className={profileCSS.nav_i+" "+profileCSS.preinf} id={profileCSS.nav_i}>
                                                    {role.parents[param1].name}
                                                </div>
                                                <img className={profileCSS.proImg} src={themeState.theme_ch ? profd : profl} onClick={e=>navigate("/profiles/" + role.parents[param1].login)} title="Перейти в профиль" alt=""/>
                                            </div>)}
                                        </div>
                                    </>}
                                    {role.kids && <>
                                        <div className={profileCSS.nav_i} id={profileCSS.nav_i}>
                                            Дети:
                                        </div>
                                        <div className={profileCSS.nav_iZag}>
                                            {Object.getOwnPropertyNames(role.kids).map(param1 => <div key={param1}>
                                                <div className={profileCSS.nav_i+" "+profileCSS.preinf} id={profileCSS.nav_i}>
                                                    {role.kids[param1].name}
                                                </div>
                                                <img className={profileCSS.proImg} src={themeState.theme_ch ? profd : profl} onClick={e=>navigate("/profiles/" + role.kids[param1].login)} title="Перейти в профиль" alt=""/>
                                            </div>)}
                                        </div>
                                    </>}
                                    {role.lessons && <>
                                        <div className={profileCSS.nav_i} id={profileCSS.nav_i}>
                                            Дисциплины:
                                        </div>
                                        <div className={profileCSS.nav_iZag}>
                                            {role.lessons.map(param1 =>
                                                <div className={profileCSS.nav_i} id={profileCSS.nav_i} key={param1}>
                                                    {param1}
                                                </div>
                                            )}
                                        </div>
                                    </>}
                                </div>
                            )}
                        </div>
                    </div>
            }
        </div>
    )
}
export default Profile;
.AppHeader {
	width: 100%;
	display: flex;
	position: relative;
	top: 7vh;
	height: 93vh;
}

.nav_iZag{
	border: 1px solid var(--bcV1);
	border-radius: 5px;
	margin-left: 0.5vw;
	margin-block: 0.5vw;
	padding-left: 0.5vw;
	padding-block: 0.5vw;
}

.proImg{
	width: 2vw;
	vertical-align: middle;
	cursor: pointer;
	margin-left: 1vw;
}

.blockPro{
	margin: auto;
	width: 75%;
}

.pro{
	background-color: var(--bgcV1);
	padding: 20px;
	margin-block: 5vh;
	border-radius: 5px;
	transition: background-color 1s ease;
}

.pro > img{
	width: 8vw;
	float: right;
	opacity: 0.5;
}

.nav_i{
	cursor: default;
	color: var(--cV1);
	font-size: 1.25vw;
	font-weight: 500;
    margin-block: 0.2vw;
	text-shadow: 1px 1px 3px var(--shdV1);
	-webkit-transition: color 1s ease;
	-o-transition: color 1s ease;
	transition: color 1s ease;
	transition-property: color, text-shadow, border-color;
	backface-visibility: hidden;
	perspective: 1000px;
}

#nav_i:hover{
	color: #00ff00 !important;
	text-shadow: 0 0 2vw #66ff66;
}

.inp{
	border-radius: 0.5vmax;
	background-color: #4d4d4d;
	user-select: none;
	box-shadow: 0 1px #FFFFFFAA, inset 0 2px 2px #000000AA;
	border: 1px solid var(--bcV2);
	font-size: 2.2vmax;
	height: 7vh;
	margin-left: 1.5vmax;
	padding-left: 1.5vmax;
	width: 20vw;
	position:relative;
	transition: background-color 1s ease;
	transition-property: background-color, border-color;
    vertical-align: middle;
	display: inline-block;
}

.inp[data-mod='1']{
	animation: but ease 1s;
	outline: solid red;
}

@keyframes but {
	0%{transform: rotateZ(-2deg);}
	50%{transform: rotateZ(2deg);}
	100%{transform: rotateZ(0deg);}
}

.inparea{
    font-size: 1.25vmax;
    padding-left: 1vmax;
    height: 20vh;
	width: 50%;
}

.imginp, .imgfield{
	width: 1vw;
	vertical-align: middle;
	cursor: pointer;
	margin-left: 1vw;
	display: inline-block;
}

.imginp[data-enable="0"] {
	pointer-events: none;
	opacity: 0.4;
}

.nav_i[data-mod='0'] > .inp, .nav_i[data-mod='0'] > .imginp,
.nav_i[data-mod='1'] > .field, .nav_i[data-mod='1'] > .imgfield{
	display: none;
}

.field, .preinf{
    display: inline-block;
    vertical-align: middle;
}

.field{
    margin-left: 5px;
}

pre.field{
    vertical-align: top;
    margin-top: 0.3em;
}
import React, {useEffect, useRef} from "react";
import {Helmet} from "react-helmet-async";
import dnevCSS from './dnevnik.module.css';
import warn from '../../media/warn_big.png';
import {dnevnik, states} from "../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import {CHANGE_DNEVNIK_DAY_DOWN, CHANGE_DNEVNIK_DAY_UP, changeDnevnik} from "../../store/actions";
import knopka from "../../media/dnevnik/knopka.png";
import {setActived} from "../main/Main";

let DoW = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"], incDow = 0, shd = 0, scrolling = false, elem = {lessons: []};

let ev, dnev, dispatch, timid, cState;

function fun1(x, x1) {
    console.log("dsfsfddsf12" + x);
    console.log("dsfsfddsf123" + x1);
    return x1;
}

function getDoW() {
    if(incDow > 6) incDow = 0;
    let s = incDow;
    incDow++;
    shd = 0;
    return DoW[s];
}

function setDoW(inte) {
    incDow = inte;
    return "";
}

function tim() {
    if (scrolling) {
        scrolling = false;
        let par = Object.getOwnPropertyNames(dnev.days);
        if(ev.deltaY < 0 && window.pageYOffset == 0)
        {
            let date = getDate(par[0]);
            for(let i = 0; i < 7; i++)
            {
                date.setDate(date.getDate() - 1);
                dispatch(changeDnevnik(date.toLocaleString("ru", {day:"2-digit", month: "2-digit", year:"2-digit"}), elem, CHANGE_DNEVNIK_DAY_UP));
            }
        }
        if(ev.deltaY > 0 && window.pageYOffset >= (document.body.scrollHeight-document.body.clientHeight))
        {
            let date = getDate(par[par.length-1]);
            for(let i = 0; i < 7; i++)
            {
                date.setDate(date.getDate() + 1);
                dispatch(changeDnevnik(date.toLocaleString("ru", {day:"2-digit", month: "2-digit", year:"2-digit"}), elem, CHANGE_DNEVNIK_DAY_DOWN));
            }
        }
        knop();
    }
}

function knop() {
    let x = document.querySelector("#CW1").getBoundingClientRect().top + Math.round(window.innerHeight / 100) * 7 - window.innerHeight;
    let x1 = document.querySelector("#CW").getBoundingClientRect().top + Math.round(window.innerHeight / 100) * 7 - window.innerHeight;
    document.querySelector("#CWSEL").style.display = x > 0 && x1 < 0 ? "none" : "flex";
}

function getDate(dat) {
    let d = dat.split('.');
    return new Date("20" + [d[2], d[1], d[0]].join("-"));
}

function getDiff(dat, dat1, bol, bol1) {
    let diff = (((getDate(dat) - getDate(dat1)) / 8.64e7)-(bol ? 6 : 0)) / 7
    if(!bol1 && diff > -1 && diff < 1) return undefined;
    if(diff < 0) return diff + "";
    if(diff > 0) return "+" + diff;
}

function getName(d, n, n1) {
    let x = n1 ? n1 : n;
    return (getDiff(dnev.min, d, false, true) > 0 || getDiff(d, dnev.max, false, true) > 0) ? "" : x;
}

function goTo() {
    document.querySelector("#CW").scrollIntoView(true);
    let sinc = window.scrollY - Math.round(window.innerHeight / 100) * 7;
    window.scrollTo(0, sinc);
    knop();
}

export function Dnevnik() {
    dnev = useSelector(dnevnik);
    cState = useSelector(states);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount Dnevnik.jsx");
        window.onwheel = (e) => {
            if(!scrolling) {
                scrolling = true;
                ev = e;
                timid = setTimeout(tim,1000);
            }
        };
        knop();
        setActived(12);
        return function() {
            dispatch = undefined;
            window.onwheel = undefined;
            clearTimeout(timid);
            console.log("I was triggered during componentWillUnmount Dnevnik1.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate Dnevnik.jsx');
    });
    return (
        <>
            <Helmet>
                <title>Дневник</title>
            </Helmet>
            <div className={dnevCSS.AppHeader}>
                {Object.getOwnPropertyNames(dnev.days).length == 0 ?
                    <div className={dnevCSS.block}>
                        <img alt="banner" src={warn}/>
                        <div className={dnevCSS.block_text}>
                            К сожалению, информация не найдена... Можете попробовать попросить завуча заполнить информацию.
                        </div>
                    </div> :
                    <div className={dnevCSS.blockDay}>
                        {setDoW(0)}
                        {Object.getOwnPropertyNames(dnev.days).map(param =>
                            <>
                                {(incDow == 0 || incDow == 7) && <div className={dnevCSS.blockL+" "+dnevCSS.blockLU}>
                                    <div className={dnevCSS.blockLine} id={dnev.currWeek == param ? "CW" : ""}/>
                                    <div className={dnevCSS.blockLText}>
                                        {getDiff(param, dnev.currWeek) ? "Неделя " + getDiff(param, dnev.currWeek) : "Текущая неделя"}
                                    </div>
                                </div>}
                                <div className={dnevCSS.day}>
                                    <div className={dnevCSS.nav_i} id={dnevCSS.nav_i}>
                                        {getDoW()} / {param}
                                    </div>
                                    <div className={dnevCSS.nav_i} id={dnevCSS.nav_i}>
                                        Домашнее задание
                                    </div>
                                    <div className={dnevCSS.nav_i} id={dnevCSS.nav_i}>
                                        Оценка
                                    </div>
                                    {dnev.days[param].lessons.map(param1 =>
                                        <>
                                            <div className={dnevCSS.nav_i} id={dnevCSS.nav_i}>
                                                {getName(param, dnev.schedule[incDow-1][shd++], param1.name)}
                                            </div>
                                            <div className={dnevCSS.nav_i+" "+dnevCSS.dayHomework} id={dnevCSS.nav_i}>
                                                {param1.homework}
                                            </div>
                                            <div className={dnevCSS.nav_i} id={dnevCSS.nav_i}>
                                                {param1.mark}
                                                {param1.weight > 1 && (<div className={dnevCSS.nav_i+" "+dnevCSS.nav_iWeight} id={dnevCSS.nav_i}>
                                                    {param1.weight}
                                                </div>)}
                                                {param1.type && (<div className={dnevCSS.nav_i+" "+dnevCSS.nav_iType} id={dnevCSS.nav_i}>
                                                    {param1.type}
                                                </div>)}
                                            </div>
                                        </>
                                    )}
                                    {dnev.days[param].lessons.length < 5 && Array(5-dnev.days[param].lessons.length).fill('').map(param1 =>
                                        <>
                                            <div className={dnevCSS.nav_i} id={dnevCSS.nav_i}>
                                                {getName(param, dnev.schedule[incDow-1][shd++])}
                                            </div>
                                            <div className={dnevCSS.nav_i+" "+dnevCSS.dayHomework} id={dnevCSS.nav_i}>
                                                <br />
                                            </div>
                                            <div className={dnevCSS.nav_i} id={dnevCSS.nav_i}>
                                                <br />
                                            </div>
                                        </>
                                    )}
                                </div>
                                {incDow == 7 && <div className={dnevCSS.blockL+" "+dnevCSS.blockLD}>
                                    <div className={dnevCSS.blockLText+" "+dnevCSS.blockLTextD}>
                                        {getDiff(param, dnev.currWeek, true) ? "Неделя " + getDiff(param, dnev.currWeek, true) : "Текущая неделя"}
                                    </div>
                                    <div className={dnevCSS.blockLine} id={!getDiff(param, dnev.currWeek, true) ? "CW1" : ""}/>
                                </div>}
                            </>)}
                        <div className={dnevCSS.GotCW} id={"CWSEL"}>
                            <div>
                                <img src={knopka} alt="" onClick={() => {goTo()}}/>
                                <div className={dnevCSS.GotCWText}>
                                    Перейти к текущей неделе
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </>
    )
}
export default Dnevnik;
.AppHeader {
	width: 100%;
	display: flex;
	position: relative;
	top: 7vh;
}

.blockDay{
	text-align: center;
	margin-bottom: 5vh;
}

.day{
	background-color: var(--bgcV1);
	padding: 10px;
	border-radius: 5px;
	margin-bottom: 10px;
	transition: background-color 1s ease;
	display: grid;
	grid-template: repeat(5, auto)/20% 1fr 10%;
	margin-inline: auto;
	width: 75%;
}

.day .dayHomework{
	justify-content: initial;
	text-align: left;
}

.nav_i{
	text-decoration: none;
	border: 1px solid var(--bcV1);
	cursor: pointer;
	color: var(--cV1);
	font-size: 1.25vw;
	font-weight: bold;
	display: flex;
	align-items: center;
	justify-content: center;
	align-self: stretch;
	-webkit-transition: color 1s ease;
	-o-transition: color 1s ease;
	transition: color 1s ease;
	transition-property: color, text-shadow, border-color;
	margin: -0.5px;
	padding: 5px;
	position: relative;
}

#nav_i:hover, #nav_i:hover *{
	color: #00ff00 !important;
	text-shadow: 0 0 2vw #66ff66;
}

.nav_iWeight{
	border: none;
	font-size: 0.75vw;
	margin: initial;
	padding: initial;
	align-items: center;
	top: 0.75vw;
	position: relative;
	margin-block: 0.75vw;
}

.nav_iType{
	margin: initial;
	border-color: #b3b3b3;
	border-radius: 5px;
	position: absolute;
	left: 110%;
	padding: 5px 10px;
	align-self: center;
	justify-content: stretch;
	background-color: var(--bgcV2);
	opacity: 0;
	transition-property: opacity;
}

.blockL{
	width: 100%;
	position: relative;
	left: 0;
	overflow: hidden;
}

.blockLU{
	margin-bottom: 1vh;
}

.blockLD{
	margin-top: 1vh;
	margin-bottom: -5px;
}

.blockLText{
	text-align: center;
	color:var(--cV2);
	font-weight: bold;
	font-size: 1.5vw;
	text-shadow: 2px 2px 2px #000;
	transition: color 1s ease;
}

.blockLTextD{
	margin-bottom: 0.9vh;
}

.blockLine{
	border-top: #F00 dashed 5px;
	transform: scaleX(20);
}

.nav_i:hover .nav_iType{
	opacity: 1;
}

.GotCW{
	position: fixed;
	width: 12vw;
	top: 0;
	bottom: 0;
	display: flex;
	align-items: center;
}

.GotCW img{
	width: 8vw;
	cursor: pointer;
}

.GotCWText{
	color: var(--cV2);
	font-size: 2vmax;
	font-weight: bold;
	text-shadow: 2px 2px 2px #000;
	transition: color 1s ease;
}

.block{
	margin: auto;
	text-align: center;
}

.block > img{
	width: 30vmin;
	height: 30vmin;
}

.block_text{
	width: 70vmin;
	color:var(--cV2);
	font-weight: bold;
	font-size: 1.5vw;
	text-shadow: 2px 2px 2px #000;
	transition: color 1s ease;
	text-align: left;
}
.AppHeader {
	width: 100%;
	height: 93vh;
	display: flex;
	position: relative;
	top: 7vh;
}

.pane{
	width: inherit;
	height: 7vh;
	position: fixed;
	z-index: 1;
}

.header {
	width: 100%;
	height: 86vh;
	display: flex;
	position: relative;
	top: 7vh;
}

.blockTel{
	background-color: var(--bgcV1);
	padding: 10px;
	border-radius: 5px;
	margin-bottom: 10px;
	transition: background-color 1s ease;
}

.block {
	width: 50vw;
	margin: auto;
}

.center_colum {
	margin-block: 5vh;
}

.center_colum p a{
	border:0;
	color:var(--cV1);
	text-shadow: 2px 2px 2px #000;
	transition: color 1s ease;
}

.map {
	margin:25px 0;
}

.zag {
	color:var(--cV1);
	margin: 0;
	text-shadow: 2px 2px 2px #000;
	transition: color 1s ease;
}

.nav_i{
	text-decoration: none;
	border: 1px solid var(--bcV1);
	cursor: pointer;
	color: var(--cV1);
	font-size: 1.25vw;
	font-weight: bold;
	margin: -1px -0.5px;
	display: flex;
	align-items: center;
	justify-content: center;
	align-self: stretch;
	-webkit-transition: color 1s ease;
	-o-transition: color 1s ease;
	transition: color 1s ease;
	transition-property: color, text-shadow, border-color, background-color;
	background-color: var(--bgcV1);
	border-radius: 5px;
	text-shadow: 1px 1px 3px var(--shdV1);
	backface-visibility: hidden;
	perspective: 1000px;
}

#nav_i:hover{
	color: #00ff00 !important;
	text-shadow: 0 0 2vw #66ff66;
}

#nav_i:active, #nav_i[data-act="1"]{
	-webkit-transition: color 0.1s ease;
	-o-transition: color 0.1s ease;
	transition: color 0.1s ease;
	color: #004d00 !important;
}

.link{
	text-decoration: underline;
	cursor: pointer;
	transition-delay: unset;
	border: none;
	background-color: unset;
	display: none;
}

.field{
	display: none;
	vertical-align: middle;
	margin-left: 5px;
}

.ns{
	display: none;
	transition-delay: unset;
	border: none;
	background-color: unset;
	position: relative;
}

.im{
	width: 50%;
}

.fi, .ed{
	display: none;
}

.news_line[data-st='1'] > .ns, .im[data-st='1'] > .ed, .te[data-st='1'] > .ed, .da[data-st='1'] > .ed, .za[data-st='1'] > .ed{
	display: block;
}

.news_line[data-st='0'] > .link, .im[data-st='0'] > .fi, .te[data-st='0'] > .fi, .da[data-st='0'] > .fi, .za[data-st='0'] > .fi{
	display: flex;
}

.imginp, .imgfield{
	width: 1vw;
	vertical-align: middle;
	cursor: pointer;
	margin-left: 1vw;
	display: inline-block;
	margin-block: auto;
}

.inp {
	border-radius: 0.5vmax;
	background-color: #4d4d4d;
	user-select: none;
	box-shadow: 0 1px #FFFFFFAA, inset 0 2px 2px #000000AA;
	border: 1px solid var(--bcV2);
	height: 90%;
	position:relative;
	transition: background-color 1s ease;
	transition-property: background-color, border-color;
	vertical-align: middle;
	display: inline-block;
	width: 50%;
	font-size: 1.25vw;
	padding: 0 0 0 1vw;
	margin-left: 1vw;
}

.inp[data-mod='1']{
	animation: but ease 1s;
	outline: solid red;
}

@keyframes but {
	0%{transform: rotateZ(-2deg);}
	50%{transform: rotateZ(2deg);}
	100%{transform: rotateZ(0deg);}
}

.inparea{
	font-size: 1.25vmax;
	padding-left: 1vmax;
	min-height: 10vh;
	width: 50%;
}

pre.field{
	white-space: pre-wrap;
	word-break: break-all;
	text-align: left;
	max-width: 90%;
}

img[data-enable="0"] {
	pointer-events: none;
	opacity: 0.4;
}

.upr{
	position: absolute;
	top: 0;
	right: 0;
	margin-inline: -1vw;
}

.field, .preinf{
	display: inline-block;
	vertical-align: middle;
	margin-left: 0.2vw;
	color: var(--cV1);
	text-shadow: 1px 1px 3px #000;
}

.field{
	margin-left: 5px;
}

.banner {
	width: 40vw;
	display: block;
	height: 20vw;
	position: relative;
}

span.banner > img{
	width: 100%;
	height: 100%;
}

.banner > .upr{
	margin: 5px;
	background-color: var(--bgcV1);
	border-radius: 5px;
	padding: 5px;
}

div.banner {
	border: var(--cV3) dashed;
	flex-wrap: wrap;
	align-content: center;
	justify-content: center;
	position: relative;
	display: flex;
}

div.banner .imgfield{
	margin: 0;
}

div.banner > div{
	color: var(--cV3);
	text-align: center;
}
import React, {useEffect, useRef} from "react";
import contactCSS from './contactMain.module.css';
import {Outlet} from "react-router-dom";
import {useDispatch, useSelector} from "react-redux";
import {states} from "../../store/selector";
import Pane from "../other/pane/Pane";
import {eventSource, prefSite, send, setActived} from "../main/Main";
import {CHANGE_CONTACT_GL, CHANGE_CONTACT_PARAM, changeContacts} from "../../store/actions";
import ed from "../../media/edit.png";
import yes from "../../media/yes.png";
import no from "../../media/no.png";

let gr, cState, dispatch, type;
type = "Por";

gr = {
    group: 0
}

export function getEdField(edFi, titleEd, inf, inp, info, inps, forceUpdate, placeholder, pattern) {
    return (<>
        <div className={contactCSS.fi}>
            {edFi}
            {titleEd != "Ссылка:" && <img className={contactCSS.imgfield} src={ed} onClick={(e)=>onEdit(e, inps, info)} title="Редактировать" alt=""/>}
        </div>
        <div className={contactCSS.ed}>
            <div className={contactCSS.preinf}>
                {titleEd}
            </div>
            {edFi.type == "pre" ?
                    <textarea className={contactCSS.inp+" "+contactCSS.inparea} id={inp} placeholder={placeholder} defaultValue={inf} onChange={(e)=>chStatB(e, inps)}/>
                :
                    <input className={contactCSS.inp} id={inp} placeholder={placeholder} pattern={pattern} defaultValue={inf} onChange={(e)=>chStatB(e, inps)}/>
            }
            {ele(false, inp, inps)}
            <img className={contactCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps)} title="Подтвердить" alt=""/>
            <img className={contactCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={(e)=>onClose(e, inps, forceUpdate)} title="Отменить изменения и выйти из режима редактирования" alt=""/>
        </div>
    </>)
}

export function getEdCon(info, inps, forceUpdate) {
    let telFi, tel, telM, telMFi, im, imFi;
    tel = info[type].contact;
    telFi = <pre className={contactCSS.field}>
        {tel}
    </pre>;
    telM = info[type].mapPr ? info[type].mapPr.text : undefined;
    telMFi = <pre className={contactCSS.field}>
        {telM}
    </pre>;
    im = inps.edAddIm;
    imFi = <div className={contactCSS.banner}>
        <div>
            <div>
                Изображение
            </div>
            <img className={contactCSS.imgfield} src={ed} onClick={(e)=>onEdit(e, inps, info)} title="Редактировать" alt=""/>
        </div>
    </div>;
    return (
        <section className={contactCSS.center_colum}>
            <div className={contactCSS.blockTel}>
                <h1 className={contactCSS.zag}>Телефоны для связи</h1>
                <div className={contactCSS.te} data-st="0">
                    {getEdField(telFi, "Текст:", tel, "inpntt_c", info, inps, forceUpdate)}
                </div>
            </div>
            <div className={contactCSS.map+" "+contactCSS.blockTel}>
                <h1 className={contactCSS.zag}>Карта проезда</h1>
                <div className={contactCSS.te+" mapt"} data-st="0">
                    {getEdField(telMFi, "Текст:", telM, "inpntt_m", info, inps, forceUpdate)}
                    {info[type].mapPr && info[type].mapPr.imgUrl ?
                            <span className={contactCSS.banner}>
                                <img alt="banner" src={prefSite+info[type].mapPr.imgUrl} onError={errLoadAddIm}/>
                                <div className={contactCSS.upr}>
                                    <img className={contactCSS.imgfield} src={ed} onClick={(e)=>onEdit(e, inps, info)} title="Редактировать" alt=""/>
                                    <img className={contactCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onDel} title="Удалить изображение" alt=""/>
                                </div>
                            </span>
                        :
                            <div className={contactCSS.im} data-st={inps.edAddIm ? "1" : "0"}>
                                {getEdField(imFi, "Ссылка:", im, "inpnit_m", info, inps, forceUpdate, "/media/tuman.jpg")}
                            </div>
                    }
                </div>
            </div>
        </section>
    );
}

export function errorLoad(e) {
    e.target.style.display = 'none';
}

export function errLoadAddIm(e) {
    chContact("", "mapPr", "imgUrl");
    // dispatch(changeContacts(CHANGE_CONTACT_PARAM, type, "", "mapPr", "imgUrl"));
}

export function onDel(e) {
    let par;
    par = e.target.parentElement.parentElement;
    if(par.classList.contains(contactCSS.banner)){
        chContact("", "mapPr", "imgUrl");
        // dispatch(changeContacts(CHANGE_CONTACT_PARAM, type, "", "mapPr", "imgUrl"));
    }
}

export function onEdit(e, inps, info) {
    let par;
    par = e.target.parentElement;
    if(par.parentElement.classList.contains(contactCSS.im) || par.parentElement.classList.contains(contactCSS.te)){
        par = par.parentElement;
        par.setAttribute('data-st', '1');
    }
    if(par.parentElement.parentElement.parentElement.classList.contains(contactCSS.im)){
        par = par.parentElement.parentElement.parentElement;
        par.setAttribute('data-st', '1');
    }
    if(par.classList.contains(contactCSS.upr)){
        inps.edAddIm = info[type].mapPr.imgUrl;
        chContact("", "mapPr", "imgUrl");
        // dispatch(changeContacts(CHANGE_CONTACT_PARAM, type, "", "mapPr", "imgUrl"));
    }
}

export function onFin(e, inps) {
    let par, inp, bul;
    par = e.target.parentElement;
    bul = par.parentElement.classList.contains(contactCSS.te);
    inp = par.querySelector(bul ? "textarea" : "input");
    if (inps[inp.id]) {
        inp.setAttribute("data-mod", '0');
        if(par.parentElement.classList.contains(contactCSS.im)) {
            if (inps.edAddIm) inps.edAddIm = undefined;
            chContact(inp.value, "mapPr", "imgUrl");
            // dispatch(changeContacts(CHANGE_CONTACT_PARAM, type, inp.value, "mapPr", "imgUrl"));
        }
        if(bul) {
            par = par.parentElement;
            if(par.classList.contains("mapt")){
                chContact(inp.value, "mapPr", "text");
                // dispatch(changeContacts(CHANGE_CONTACT_PARAM, type, inp.value, "mapPr", "text"));
            } else {
                chContact(inp.value, "contact");
                // dispatch(changeContacts(CHANGE_CONTACT_PARAM, type, inp.value, "contact"));
            }
        }
        par.setAttribute('data-st', '0');
    } else {
        inp.setAttribute("data-mod", '1');
    }
}

export function onClose(e, inps, forceUpdate) {
    let par = e.target.parentElement;
    if(par.parentElement.classList.contains(contactCSS.im) || par.parentElement.classList.contains(contactCSS.te)){
        par = par.parentElement;
        if(inps.edAddIm) {
            inps.addIm = inps.edAddIm;
            inps.edAddIm = undefined;
            forceUpdate();
        } else {
            par.setAttribute('data-st', '0');
        }
    }
}

export function chStatB(e, inps) {
    let el = e.target;
    inps[el.id] = !el.validity.patternMismatch && el.value.length != 0;
    if (inps[el.id]) {
        el.setAttribute("data-mod", '0');
    } else {
        el.setAttribute("data-mod", '1');
    }
    el.parentElement.querySelector(".yes").setAttribute("data-enable", +inps[el.id]);
}

export function ele (x, par, inps) {
    if(!inps[par]) inps[par] = x;
}

export function setTyp(x) {
    type = x;
    if(eventSource.readyState == EventSource.OPEN) setInfo();
    eventSource.addEventListener('connect', onCon, false);
    eventSource.addEventListener('chContactC', chContactC, false);
}

function onCon() {
    setInfo();
}

function setInfo() {
    send({
        type: type,
        role: cState.role,
        uuid: cState.uuid
    }, 'POST', "contacts", "getContacts")
        .then(data => {
            console.log(data);
            if(data.error == false){
                dispatch(changeContacts(CHANGE_CONTACT_GL, type, data.body));
            }
        });
}

function chContact (inp, p, p1) {
    console.log("chContact");
    send({
        uuid: cState.uuid,
        p: p,
        p1: p1,
        val: inp,
        role: cState.role
    }, 'POST', "contacts", "chContact");
}

function chContactC(e) {
    const msg = JSON.parse(e.data);
    dispatch(changeContacts(CHANGE_CONTACT_PARAM, type, msg.val, msg.p, msg.p1));
}

export function setActNew(name) {
    gr.group = name;
}

export function ContactMain() {
    cState = useSelector(states);
    dispatch = useDispatch();
    gr.groups = {
        0: {
            nam: "Контакты портала",
            linke: "por"
        },
        1: {
            nam: "Контакты учебного центра",
            linke: "yo"
        }
    };
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount ContactMain.jsx");
        setActived(2);
        return function() {
            dispatch = undefined;
            eventSource.removeEventListener('connect', onCon);
            eventSource.removeEventListener('chContactC', chContactC);
            console.log("I was triggered during componentWillUnmount ContactMain.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate ContactMain.jsx');
    });
    return (
        <div className={contactCSS.AppHeader}>
            {(cState.auth && cState.role != 4) &&
                <div className={contactCSS.pane}>
                    <Pane gro={gr}/>
                </div>
            }
            <Outlet />
        </div>
    )
}
export default ContactMain;
import React, {useEffect, useReducer, useRef} from "react";
import {Helmet} from "react-helmet-async";
import contactCSS from '../contactMain.module.css';
import {contacts, states} from "../../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import {chStatB, errorLoad, getEdCon, setActNew, setTyp} from "../ContactMain";
import ErrFound from "../../other/error/ErrFound";
import {CHANGE_EVENTS_CLEAR, changeEvents} from "../../../store/actions";
import {prefSite} from "../../main/Main";

let dispatch, contactsInfo, type, cState, inps, errText;
type = "Yo";
inps = {};
errText = "К сожалению, информация не найдена... Можете попробовать попросить завуча заполнить информацию.";
let [_, forceUpdate] = [];

export function ContactYo() {
    contactsInfo = useSelector(contacts);
    cState = useSelector(states);
    if(!dispatch) {
        setActNew(1);
        setTyp(type);
    }
    [_, forceUpdate] = useReducer((x) => x + 1, 0);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount ContactYo.jsx");
        setTyp(type);
        for(let el of document.querySelectorAll("." + contactCSS.ed + " > *[id^='inpn']")){
            chStatB({target: el}, inps);
        }
        return function() {
            dispatch(changeEvents(CHANGE_EVENTS_CLEAR));
            dispatch = undefined;
            console.log("I was triggered during componentWillUnmount ContactYo.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate ContactYo.jsx');
    });
    return (
        <div className={contactCSS.header}>
            <Helmet>
                <title>Контакты учебного центра</title>
            </Helmet>
            {(!contactsInfo[type].contact && !contactsInfo[type].mapPr && !(cState.auth && cState.role == 3)) ?
                    <ErrFound text={errText}/>
                :
                    <div className={contactCSS.block}>
                        {(cState.auth && cState.role == 3) ?
                                getEdCon(contactsInfo, inps, forceUpdate)
                            :
                                <section className={contactCSS.center_colum}>
                                    <div className={contactCSS.blockTel}>
                                        <h1 className={contactCSS.zag}>Телефоны для связи</h1>
                                        <pre className={contactCSS.field}>
                                            {contactsInfo[type].contact}
                                        </pre>
                                    </div>
                                    <div className={contactCSS.map+" "+contactCSS.blockTel}>
                                        <h1 className={contactCSS.zag}>Карта проезда</h1>
                                        <pre className={contactCSS.field}>
                                            {contactsInfo[type].mapPr.text}
                                        </pre>
                                        <span className={contactCSS.banner}>
                                            <img alt="banner" src={prefSite+contactsInfo[type].mapPr.imgUrl+''} onError={errorLoad}/>
                                        </span>
                                    </div>
                                </section>
                        }
                    </div>
            }
        </div>
    )
}
export default ContactYo;
import React, {useEffect, useReducer, useRef} from "react";
import {Helmet} from "react-helmet-async";
import contactCSS from '../contactMain.module.css';
import {contacts, states} from "../../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import {chStatB, errorLoad, getEdCon, setActNew, setTyp} from "../ContactMain";
import ErrFound from "../../other/error/ErrFound";
import {CHANGE_EVENTS_CLEAR, changeEvents} from "../../../store/actions";
import {prefSite} from "../../main/Main";

let dispatch, contactsInfo, type, errText, cState, inps;
type = "Por";
inps = {};
errText = "К сожалению, информация не найдена... Ждите новой информации.";
let [_, forceUpdate] = [];

export function ContactPor() {
    contactsInfo = useSelector(contacts);
    cState = useSelector(states);
    if(!dispatch) {
        setActNew(0);
        setTyp(type);
    }
    [_, forceUpdate] = useReducer((x) => x + 1, 0);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount ContactPor.jsx");
        setTyp(type);
        for(let el of document.querySelectorAll("." + contactCSS.ed + " > *[id^='inpn']")){
            chStatB({target: el}, inps);
        }
        return function() {
            dispatch(changeEvents(CHANGE_EVENTS_CLEAR));
            dispatch = undefined;
            console.log("I was triggered during componentWillUnmount ContactPor.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate ContactPor.jsx');
    });
    return (
        <div className={contactCSS.header}>
            <Helmet>
                <title>Контакты портала</title>
            </Helmet>
            {(!contactsInfo[type].contact && !contactsInfo[type].mapPr && !(cState.auth && cState.role == 4)) ?
                    <ErrFound text={errText}/>
                :
                    <div className={contactCSS.block}>
                        {(cState.auth && cState.role == 4) ?
                                getEdCon(contactsInfo, inps, forceUpdate)
                            :
                                <section className={contactCSS.center_colum}>
                                    <div className={contactCSS.blockTel}>
                                        <h1 className={contactCSS.zag}>Телефоны для связи</h1>
                                        <pre className={contactCSS.field}>
                                            {contactsInfo[type].contact}
                                        </pre>
                                    </div>
                                    <div className={contactCSS.map+" "+contactCSS.blockTel}>
                                        <h1 className={contactCSS.zag}>Карта проезда</h1>
                                        <pre className={contactCSS.field}>
                                            {contactsInfo[type].mapPr.text}
                                        </pre>
                                        <span className={contactCSS.banner}>
                                            <img alt="banner" src={prefSite+contactsInfo[type].mapPr.imgUrl+''} onError={errorLoad}/>
                                        </span>
                                    </div>
                                </section>
                        }
                    </div>
            }
        </div>
    )
}
export default ContactPor;
import React, {useEffect, useRef} from "react";
import analyticsCSS from './analyticsMain.module.css';
import {Outlet} from "react-router-dom";
import {pane, states} from "../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import Pane from "../other/pane/Pane";
import {setActived} from "../main/Main";
import {
    CHANGE_PERIODS,
    CHANGE_PERIODS_DEL,
    CHANGE_PERIODS_L1,
    CHANGE_ZVONKI,
    CHANGE_ZVONKI_DEL,
    CHANGE_ZVONKI_DEL_L0,
    CHANGE_ZVONKI_L1,
    CHANGE_ZVONKI_SMENA,
    changeAnalytics
} from "../../store/actions";

let gr, cState, ke, dispatch;

gr = {
    group: 0
}

export function onDel(e, type) {
    let par, inp, id;
    par = e.target.parentElement.parentElement;
    if(par.classList.contains(analyticsCSS.edbl)){
        inp = par.querySelector("input");
        if (inp.hasAttribute("data-id")) {
            id = inp.getAttribute("data-id").split("_");
            if(type == CHANGE_ZVONKI_DEL) {
                dispatch(changeAnalytics(type, id[0], "lessons", id[1]));
            } else if(type == CHANGE_PERIODS_DEL) {
                dispatch(changeAnalytics(type, "prs", id[0]));
            }
        } else if(inp.hasAttribute("data-id1")){
            let id = inp.getAttribute("data-id1");
            if(type == CHANGE_ZVONKI_DEL_L0) {
                dispatch(changeAnalytics(type, id));
            }
        }
    }
}

export function onEdit(e) {
    let par = e.target.parentElement;
    if(par.classList.contains(analyticsCSS.add)){
        par.setAttribute('data-st', '1');
    }
    if(par.parentElement.classList.contains(analyticsCSS.edbl)){
        par = par.parentElement;
        par.setAttribute('data-st', '1');
    }
}

export function onFin(e, inps, forceUpdate, type, info) {
    let par, inp;
    par = e.target.parentElement;
    inp = par.querySelector("input");
    if(par.classList.contains(analyticsCSS.edbl)){
        if(type == CHANGE_PERIODS_L1){
            let inpm = ["inpnnt_", "inpnit_"];
            if(inps.inpnnt_ && inps.inpnit_)
            {
                let grop, id, obj;
                grop = Object.getOwnPropertyNames(info.prs);
                id = grop.length == 0 ? 0 : (parseInt(grop[grop.length-1]) + 1);
                obj = {
                    name: inps.inpnnt_,
                    per: inps.inpnit_
                }
                dispatch(changeAnalytics(type, "prs", id, undefined, obj));
            } else {
                for(let i = 0, inpf; i < inpm.length; i++) {
                    inpf = document.querySelector("." + analyticsCSS.edbl + " *[id='" + inpm[i] + "']")
                    inpf.setAttribute("data-mod", '1');
                }
            }
            return;
        }
    }
    if (inps[inp.id]) {
        inp.setAttribute("data-mod", '0');
        if(par.parentElement.classList.contains(analyticsCSS.edbl)) {
            par = par.parentElement;
            if(type){
                if(inp.hasAttribute("data-id")){
                    let id = inp.getAttribute("data-id").split("_");
                    if(type == CHANGE_ZVONKI) {
                        dispatch(changeAnalytics(type, id[0], "lessons", id[1], inp.value));
                    } else if(type == CHANGE_PERIODS) {
                        dispatch(changeAnalytics(type, "prs", id[0], id[1], inp.value));
                    }
                } else if(inp.hasAttribute("data-id1")){
                    let id = inp.getAttribute("data-id1");
                    if(type == CHANGE_ZVONKI_L1) {
                        dispatch(changeAnalytics(type, id, "name", undefined, inp.value));
                    }
                }
            } else {
                inps.inpnpt = inp.value;
                forceUpdate();
            }
        } else if(par.classList.contains(analyticsCSS.edbl)) {
            if(inp.hasAttribute("data-id1")) {
                let id = inp.getAttribute("data-id1");
                if (type == CHANGE_ZVONKI) {
                    let grop, id1;
                    grop = info[id] && info[id].lessons ? Object.getOwnPropertyNames(info[id].lessons) : [];
                    id1 = grop.length == 0 ? 0 : (parseInt(grop[grop.length-1]) + 1);
                    dispatch(changeAnalytics(type, id, "lessons", id1, inp.value));
                }
            } else if(type == CHANGE_ZVONKI_SMENA){
                let grop, id, obj;
                grop = Object.getOwnPropertyNames(info);
                id = grop.length == 0 ? 0 : (parseInt(grop[grop.length-1]) + 1);
                obj = {
                    name: inp.value
                }
                dispatch(changeAnalytics(type, id, undefined, undefined, obj));
            }
        }
        par.setAttribute('data-st', '0');
    } else {
        inp.setAttribute("data-mod", '1');
    }
}

export function onClose(e, type) {
    let par = e.target.parentElement;
    if(par.parentElement.classList.contains(analyticsCSS.edbl)){
        if(par.classList.contains(analyticsCSS.fi) || type) {
            par = par.parentElement.parentElement;
        } else {
            par = par.parentElement;
        }
        par.setAttribute('data-st', '0');
    } else if(par.classList.contains(analyticsCSS.edbl)) {
        par = par.parentElement;
        par.setAttribute('data-st', '0');
    }
}

export function chStatB(e, inps, upd) {
    let el = e.target;
    inps[el.id] = !el.validity.patternMismatch ? el.value : false;
    if (inps[el.id]) {
        el.setAttribute("data-mod", '0');
    } else {
        el.setAttribute("data-mod", '1');
    }
    if(upd) upd();
    let ye = el.parentElement.querySelector(".yes");
    if(ye) {
        ye.setAttribute("data-enable", +inps[el.id]);
    }
}

export function ele (x, par, inps) {
    if(!inps[par]) inps[par] = x;
}

export function setActNew(name) {
    gr.group = name;
}

export function AnalyticsMain(props) {
    cState = useSelector(states);
    const paneInfo = useSelector(pane);
    dispatch = useDispatch();
    gr.groups = {
        0: {
            nam: "Расписание звонков",
            linke: "zvonki"
        },
        1: {
            nam: (cState.auth && cState.role < 2) ? "Расписание периодов" : "Периоды обучения",
            linke: "periods"
        },
        2: {
            nam: (cState.auth && cState.role < 2) ? "Расписание" : "Дисциплины",
            linke: "schedule"
        },
        3: cState.auth && cState.role < 2 ? {
            nam: "Журнал",
            linke: "journal"
        } : undefined,
        4: cState.auth && cState.role < 2 ? {
            nam: "Итоговые оценки",
            linke: "marks"
        } : undefined
    };
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount AnalyticsMain.jsx");
        setActived(cState.role == 3 ? 10 : 13);
        return function() {
            dispatch = undefined;
            console.log("I was triggered during componentWillUnmount AnalyticsMain.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate AnalyticsMain.jsx');
    });
    return (
        <div className={analyticsCSS.AppHeader}>
            <div style={{width:"inherit", height: "7vh", position: "fixed", zIndex:"1"}} ref={()=>(ke = !ke ? paneInfo.els.length : ke)}>
                <Pane gro={gr}/>
            </div>
            <Outlet />
            {props.comp && props.comp}
        </div>
    )
}
export default AnalyticsMain;
.AppHeader {
	width: 100%;
	height: 93vh;
	display: flex;
	position: relative;
	top: 7vh;
}

.header {
	width: 100%;
	height: 86vh;
	display: flex;
	position: relative;
	top: 7vh;
}

.block{
	text-align: center;
	margin: auto;
	max-width: 75vw;
}

.l1{
	background-color: var(--bgcV1);
	padding: 10px;
	border-radius: 5px;
	transition: background-color 1s ease;
	display: flex;
	overflow-x: auto;
	margin-block: 5vh;
}

.nav_i{
	text-decoration: none;
	border: 1px solid var(--bcV1);
	cursor: pointer;
	color: var(--cV1);
	font-size: 1.25vw;
	font-weight: bold;
	text-shadow: 1px 1px 3px var(--shdV1);
	display: flex;
	align-items: center;
	justify-content: center;
	align-self: stretch;
	-webkit-transition: color 1s ease;
	-o-transition: color 1s ease;
	transition: color 1s ease;
	transition-property: color, text-shadow, border-color;
	margin: -0.5px;
	padding: 5px;
	position: relative;
	backface-visibility: hidden;
	perspective: 1000px;
}

#nav_i:hover{
	color: #00ff00;
	text-shadow: 0 0 2vw #66ff66;
}

.nav_iZag{
	border: 1px solid var(--bcV1);
	text-align: initial;
	margin-block: 1vw;
	border-radius: 5px;
	position: relative;
}

.nav_iZag2{
	text-align: initial;
	border: none;
	display: inline-block;
	vertical-align: middle;
	white-space: nowrap;
}

.nav_iZag1{
	margin-left: 1vw;
}

.profIm{
	width: 2vw;
	vertical-align: middle;
	cursor: pointer;
	margin-block: auto;
}

.add{
	display: flex;
}

.edbl {
	color: var(--cV1);
	transition: color 1s ease;
	font-size: initial;
	font-weight: normal;
	display: block;
	transition-delay: unset;
	border: none;
	background-color: unset;
	position: relative;
	align-items: center;
}

.nav_iZag3{
	border: 1px solid var(--bcV1);
	text-align: initial;
	position: relative;
	margin: -0.5px;
	/*width: 100%;*/
}

.link{
	text-decoration: underline;
	cursor: pointer;
	transition-delay: unset;
	background-color: unset;
	display: none;
	justify-content: center;
	width: 100%;
}

.field{
	display: none;
	vertical-align: middle;
	margin-left: 5px;
}

.ed{
	align-items: center;
	height: 100%;
}

.fi, .ed, .add[data-st='0'] > .edbl{
	display: none;
}

.add[data-st='0'] > .link, .edbl[data-st='0'] > .fi, .add[data-st='1'] > .edbl, .edbl[data-st='1'] > .ed{
	display: flex;
}

.imginp, .imgfield{
	width: 1vw;
	vertical-align: middle;
	cursor: pointer;
	margin-left: 1vw;
	display: inline-block;
	margin-block: auto;
}

.inp {
	border-radius: 0.5vmax;
	background-color: #4d4d4d;
	user-select: none;
	box-shadow: 0 1px #FFFFFFAA, inset 0 2px 2px #000000AA;
	border: 1px solid var(--bcV2);
	height: 90%;
	position:relative;
	transition: background-color 1s ease;
	transition-property: background-color, border-color;
	vertical-align: middle;
	display: inline-block;
	width: 50%;
	font-size: 1.25vw;
	padding: 0 0 0 1vw;
	margin-left: 1vw;
}

.inp[data-mod='1']{
	animation: but ease 1s;
	outline: solid red;
}

@keyframes but {
	0%{transform: rotateZ(-2deg);}
	50%{transform: rotateZ(2deg);}
	100%{transform: rotateZ(0deg);}
}

*[data-enable="0"] {
	pointer-events: none;
	opacity: 0.4;
}

.field, .preinf{
	display: inline-block;
	vertical-align: middle;
	margin-inline: 0.2vw;
	color: var(--cV1);
	text-shadow: 1px 1px 3px var(--shdV1);
	white-space: nowrap;
}

.field{
	margin-left: 5px;
}
.smenaGrid{
	display: grid;
	grid-template: repeat(5, auto)/auto;
	height: 100%;
}
import React, {useEffect, useReducer, useRef} from "react";
import {Helmet} from "react-helmet-async";
import analyticsCSS from '../analyticsMain.module.css';
import zvonkiCSS from './zvonki.module.css';
import {states, zvonki} from "../../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import {chStatB, ele, onClose, onDel, onEdit, onFin, setActNew} from "../AnalyticsMain";
import ErrFound from "../../other/error/ErrFound";
import yes from "../../../media/yes.png";
import {
    CHANGE_ZVONKI,
    CHANGE_ZVONKI_DEL,
    CHANGE_ZVONKI_DEL_L0,
    CHANGE_ZVONKI_L1,
    CHANGE_ZVONKI_SMENA
} from "../../../store/actions";
import no from "../../../media/no.png";
import ed from "../../../media/edit.png";

let dispatch, zvonkiInfo, errText, inps, cState;
errText = "К сожалению, информация не найдена... Можете попробовать попросить завуча заполнить информацию.";
inps = {inpnpt : "8.00-8.45", inpnst: "1 смена"};
let [_, forceUpdate] = [];

function getZvonki(b) {
    return b ?
            <>
                {Object.getOwnPropertyNames(zvonkiInfo).map(param =>
                    <div className={zvonkiCSS.smenaGrid} key={param}>
                        <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                            №
                        </div>
                        <div className={analyticsCSS.edbl+" "+analyticsCSS.nav_iZag3} style={{gridColumn: "2"}} data-st="0">
                            <div className={analyticsCSS.fi}>
                                <div className={analyticsCSS.nav_i+" "+analyticsCSS.nav_iZag2} id={analyticsCSS.nav_i}>
                                    {zvonkiInfo[param].name}
                                </div>
                                <img className={analyticsCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                                <img className={analyticsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={(e)=>onDel(e, CHANGE_ZVONKI_DEL_L0)} title="Удалить" alt=""/>
                            </div>
                            <div className={analyticsCSS.ed}>
                                <div className={analyticsCSS.preinf}>
                                    Смена:
                                </div>
                                <input className={analyticsCSS.inp} data-id1={param} id={"inpnst_" + param} placeholder={"1 смена"} defaultValue={zvonkiInfo[param].name} onChange={(e)=>chStatB(e, inps)} type="text"/>
                                {ele(false, "inpnst_" + param, inps)}
                                <img className={analyticsCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate, CHANGE_ZVONKI_L1)} title="Подтвердить" alt=""/>
                                <img className={analyticsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                            </div>
                        </div>
                        {zvonkiInfo[param].lessons && Object.getOwnPropertyNames(zvonkiInfo[param].lessons).map((param1, i) =>
                            <>
                                <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                                    {i + 1}
                                </div>
                                <div className={analyticsCSS.edbl+" "+analyticsCSS.nav_iZag3} key={param1} data-st="0">
                                    <div className={analyticsCSS.fi}>
                                        <div className={analyticsCSS.nav_i+" "+analyticsCSS.nav_iZag2} id={analyticsCSS.nav_i}>
                                            {zvonkiInfo[param].lessons[param1]}
                                        </div>
                                        <img className={analyticsCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                                        <img className={analyticsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={(e)=>onDel(e, CHANGE_ZVONKI_DEL)} title="Удалить" alt=""/>
                                    </div>
                                    <div className={analyticsCSS.ed}>
                                        <div className={analyticsCSS.preinf}>
                                            Интервал:
                                        </div>
                                        <input className={analyticsCSS.inp} data-id={param + "_" + param1} id={"inpnpt_" + param + "_" + param1} placeholder={"8.00-8.45"} defaultValue={zvonkiInfo[param].lessons[param1]} onChange={(e)=>chStatB(e, inps)} type="text"/>
                                        {ele(false, "inpnpt_" + param + "_" + param1, inps)}
                                        <img className={analyticsCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate, CHANGE_ZVONKI)} title="Подтвердить" alt=""/>
                                        <img className={analyticsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                                    </div>
                                </div>
                            </>
                        )}
                        <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                            X
                        </div>
                        <div className={analyticsCSS.add} data-st="0">
                            <div className={analyticsCSS.nav_i+" "+analyticsCSS.link} id={analyticsCSS.nav_i} onClick={onEdit}>
                                Добавить интервал
                            </div>
                            <div className={analyticsCSS.edbl+" "+analyticsCSS.nav_iZag3} data-st="0">
                                <div className={analyticsCSS.preinf}>
                                    Интервал:
                                </div>
                                <input className={analyticsCSS.inp} data-id1={param} id={"inpnpt_"} placeholder={"8.00-8.45"} defaultValue={inps.inpnpt} onChange={(e)=>chStatB(e, inps)} type="text"/>
                                {ele(false, "inpnpt_", inps)}
                                <img className={analyticsCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate, CHANGE_ZVONKI, zvonkiInfo)} title="Подтвердить" alt=""/>
                                <img className={analyticsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                            </div>
                        </div>
                    </div>
                )}
                <div className={zvonkiCSS.smenaGrid}>
                    <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                        X
                    </div>
                    <div className={analyticsCSS.add} data-st="0" style={{gridColumn: "2"}}>
                        <div className={analyticsCSS.nav_i+" "+analyticsCSS.link} id={analyticsCSS.nav_i} onClick={onEdit}>
                            Добавить смену
                        </div>
                        <div className={analyticsCSS.edbl+" "+analyticsCSS.nav_iZag3} data-st="0">
                            <div className={analyticsCSS.preinf}>
                                Смена:
                            </div>
                            <input className={analyticsCSS.inp} id={"inpnst_"} placeholder={"X Смена"} defaultValue={inps.inpnst} onChange={(e)=>chStatB(e, inps)} type="text"/>
                            {ele(false, "inpnst_", inps)}
                            <img className={analyticsCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate, CHANGE_ZVONKI_SMENA, zvonkiInfo)} title="Подтвердить" alt=""/>
                            <img className={analyticsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                        </div>
                    </div>
                </div>
            </>
        :
            Object.getOwnPropertyNames(zvonkiInfo).map(param =>
                <div className={zvonkiCSS.smenaGrid} key={param}>
                    <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                        №
                    </div>
                    <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i} style={{gridColumn: "2"}}>
                        {zvonkiInfo[param].name}
                    </div>
                    {Object.getOwnPropertyNames(zvonkiInfo[param].lessons).map((param1, i) =>
                        <>
                            <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                                {i + 1}
                            </div>
                            <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                                {zvonkiInfo[param].lessons[param1]}
                            </div>
                        </>
                    )}
                </div>
            )
}

export function Zvonki() {
    zvonkiInfo = useSelector(zvonki);
    cState = useSelector(states);
    if(!dispatch) setActNew(0);
    [_, forceUpdate] = useReducer((x) => x + 1, 0);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount Zvonki.jsx");
        for(let el of document.querySelectorAll("." + analyticsCSS.edbl + " *[id^='inpn']")){
            chStatB({target: el}, inps);
        }
        return function() {
            dispatch = undefined;
            console.log("I was triggered during componentWillUnmount Zvonki.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate Zvonki.jsx');
    });
    return (
        <div className={analyticsCSS.header}>
            <Helmet>
                <title>Расписание звонков</title>
            </Helmet>
            {Object.getOwnPropertyNames(zvonkiInfo).length == 0 && cState.role != 3 ?
                    <ErrFound text={errText}/>
                :
                    <div className={analyticsCSS.block}>
                        <div className={analyticsCSS.l1}>
                            {getZvonki(cState.role == 3)}
                        </div>
                    </div>
            }
        </div>
    )
}
export default Zvonki;
import React, {useEffect, useReducer, useRef} from "react";
import {Helmet} from "react-helmet-async";
import analyticsCSS from '../analyticsMain.module.css';
import scheduleCSS from './schedule.module.css';
import {groups, schedules, states, teachers, themes} from "../../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import {eventSource, send, setActived} from "../../main/Main";
import {chStatB, ele, onClose, onEdit, setActNew} from "../AnalyticsMain";
import Pane from "../../other/pane/Pane";
import yes from "../../../media/yes.png";
import {
    CHANGE_EVENTS_CLEAR,
    CHANGE_GROUPS_GL,
    CHANGE_GROUPS_GR,
    CHANGE_SCHEDULE,
    CHANGE_SCHEDULE_DEL,
    CHANGE_SCHEDULE_GL,
    CHANGE_SCHEDULE_PARAM,
    CHANGE_TEACHERS_GL,
    changeAnalytics,
    changeEvents,
    changeGroups,
    changePeople
} from "../../../store/actions";
import no from "../../../media/no.png";
import mapd from "../../../media/Map_symbolD.png";
import mapl from "../../../media/Map_symbolL.png";
import ed from "../../../media/edit.png";
import {setEvGr} from "../../people/PeopleMain";

let dispatch, cState, selGr, schedulesInfo, groupsInfo, errText, inps, teachersInfo, themeState, DoW, selKid;
DoW = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"];
inps = {sinpnpt : "Математика", sinpnkt: "300"};
selGr = 0;
let [_, forceUpdate] = [];
errText = "К сожалению, информация не найдена... Можете попробовать попросить завуча заполнить информацию.";

function onDel(e, info) {
    let par, inp;
    par = e.target.parentElement.parentElement;
    if(par.classList.contains(analyticsCSS.edbl)){
        inp = par.querySelector("input");
        if(!inp){
            dispatch(changeAnalytics(CHANGE_SCHEDULE_DEL, info.id, info.id1));
        }
    }
}

function onFin(e, type, info) {
    let par, inp;
    par = e.target.parentElement;
    inp = par.querySelector("input");
    if(par.classList.contains(analyticsCSS.edbl)){
        if(type == CHANGE_SCHEDULE){
            let inpm = ["sinpnpt_", "sinpnkt_"];
            if(inps.sinpnpt_ && inps.sinpnkt_ && inps.nyid)
            {
                let obj;
                obj = {
                    name: inps.sinpnpt_,
                    cabinet: inps.sinpnkt_,
                    prepod: {
                        name: inps.nw.prepod,
                        id: inps.nyid
                    }
                }
                addLesson(info.id, info.id1, obj);
                // dispatch(changeAnalytics(type, param, id, undefined, obj));
            } else {
                for(let i = 0, inpf; i < inpm.length; i++) {
                    inpf = document.querySelector("." + analyticsCSS.edbl + " *[id='" + inpm[i] + "']")
                    inpf.dataset.mod = '1';
                }
            }
            return;
        }
    }
    if(!inp){
        if(type == CHANGE_SCHEDULE_PARAM) {
            let obj = {
                name: inps.nw.prepod,
                id: inps.nyid
            }
            dispatch(changeAnalytics(type, info.id, info.id1, info.par, obj));
        }
        par = par.parentElement;
        par.dataset.st = '0';
        return;
    }
    if (inps[inp.id]) {
        inp.dataset.mod = '0';
        if(par.parentElement.classList.contains(analyticsCSS.edbl)) {
            par = par.parentElement;
            if(type){
                if(inp.dataset.id){
                    if(type == CHANGE_SCHEDULE_PARAM) {
                        dispatch(changeAnalytics(type, info.id, info.id1, info.par, inp.value));
                    }
                }
            }
        }
        par.dataset.st = '0';
    } else {
        inp.dataset.mod = '1';
    }
}

function getSched(b) {
    let dI, preps;
    dI = [0, 1, 2, 3, 4, 5, 6];
    preps = getPrep();
    return b ?
        dI.map((param, i, x, dai = schedulesInfo[param], dLI = (dai && dai.lessons ? Object.getOwnPropertyNames(dai.lessons):[])) =>
            <div className={analyticsCSS.l1+" "+scheduleCSS.day}>
                <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                    №
                </div>
                <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i} style={{gridColumn: "2"}}>
                    {DoW[i]}
                </div>
                <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i} style={{gridColumn: "3"}}>
                    Кабинет
                </div>
                <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i} style={{gridColumn: "4"}}>
                    Преподаватель
                </div>
                {dLI.map((param1, i1, x, les = dai.lessons[param1]) =>
                    <>
                        <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                            {i1 + 1}
                        </div>
                        <div className={analyticsCSS.edbl+" "+analyticsCSS.nav_iZag3} data-st="0">
                            <div className={analyticsCSS.fi}>
                                <div className={analyticsCSS.nav_i+" "+analyticsCSS.nav_iZag2} id={analyticsCSS.nav_i}>
                                    {les.name}
                                </div>
                                <img className={analyticsCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                            </div>
                            <div className={analyticsCSS.ed}>
                                <div className={analyticsCSS.preinf}>
                                    Предмет:
                                </div>
                                <input className={analyticsCSS.inp} id={"sinpnpt_" + param + "_" + param1} placeholder={"Математика"} defaultValue={les.name} onChange={e=>chStatB(e, inps)} type="text"/>
                                {ele(false, "sinpnpt_" + param + "_" + param1, inps)}
                                <img className={analyticsCSS.imginp+" yes "} src={yes} onClick={e=>onFin(e, CHANGE_SCHEDULE_PARAM, {par: "name", id: param, id1: param1})} title="Подтвердить" alt=""/>
                                <img className={analyticsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                            </div>
                        </div>
                        <div className={analyticsCSS.edbl+" "+analyticsCSS.nav_iZag3} data-st="0">
                            <div className={analyticsCSS.fi}>
                                <div className={analyticsCSS.nav_i+" "+analyticsCSS.nav_iZag2} id={analyticsCSS.nav_i}>
                                    {les.cabinet}
                                </div>
                                <img className={analyticsCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                            </div>
                            <div className={analyticsCSS.ed}>
                                <div className={analyticsCSS.preinf}>
                                    Кабинет:
                                </div>
                                <input className={analyticsCSS.inp} id={"sinpnkt_" + param + "_" + param1} placeholder={"300"} defaultValue={les.cabinet} onChange={e=>chStatB(e, inps)} type="text"/>
                                {ele(false, "sinpnkt_" + param + "_" + param1, inps)}
                                <img className={analyticsCSS.imginp+" yes "} src={yes} onClick={e=>onFin(e, CHANGE_SCHEDULE_PARAM, {par: "cabinet", id: param, id1: param1})} title="Подтвердить" alt=""/>
                                <img className={analyticsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                            </div>
                        </div>
                        <div className={analyticsCSS.edbl+" "+analyticsCSS.nav_iZag3} data-st="0">
                            <div className={analyticsCSS.fi}>
                                <div className={analyticsCSS.nav_i+" "+analyticsCSS.nav_iZag2} id={analyticsCSS.nav_i}>
                                    {les.prepod.name}
                                </div>
                                <img className={analyticsCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                                <img className={analyticsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={e=>onDel(e, {id: param, id1: param1})} title="Удалить" alt=""/>
                            </div>
                            <div className={analyticsCSS.ed}>
                                <div className={analyticsCSS.preinf}>
                                    Педагог:
                                </div>
                                {preps}
                                <img className={analyticsCSS.imginp} data-enable={inps.nw && inps.nw.prepod ? "1" : "0"} src={yes} onClick={e=>onFin(e, CHANGE_SCHEDULE_PARAM, {par: "prepod", id: param, id1: param1})} title="Подтвердить" alt=""/>
                                <img className={analyticsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                            </div>
                        </div>
                    </>
                )}
                <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                    X
                </div>
                <div className={analyticsCSS.add} data-st="0" style={{gridColumn: "2/5"}}>
                    <div className={analyticsCSS.nav_i+" "+analyticsCSS.link} id={analyticsCSS.nav_i} onClick={onEdit}>
                        Добавить урок
                    </div>
                    <div className={analyticsCSS.edbl+" "+analyticsCSS.nav_iZag3} data-st="0">
                        <div className={analyticsCSS.preinf}>
                            Предмет:
                        </div>
                        <input className={analyticsCSS.inp} id={"sinpnpt_"} placeholder={"Математика"} defaultValue={inps.sinpnpt} onChange={e=>chStatB(e, inps, forceUpdate)} type="text"/>
                        {ele(false, "sinpnpt_", inps)}
                        <div className={analyticsCSS.preinf}>
                            , Кабинет:
                        </div>
                        <input className={analyticsCSS.inp} id={"sinpnkt_"} placeholder={"300"} defaultValue={inps.sinpnkt} onChange={e=>chStatB(e, inps, forceUpdate)} type="text"/>
                        {ele(false, "sinpnkt_", inps)}
                        <div className={analyticsCSS.preinf}>
                            , Педагог:
                        </div>
                        {preps}
                        <img className={analyticsCSS.imginp} data-enable={inps.sinpnpt_ && inps.sinpnkt_ && inps && inps.nw && inps.nw.prepod ? "1" : "0"} src={yes} onClick={e=>onFin(e, CHANGE_SCHEDULE, {id: i, id1: dai ? dai.dayId : undefined})} title="Подтвердить" alt=""/>
                        <img className={analyticsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                    </div>
                </div>
                {dLI.length < 4 && Array(4-dLI.length).fill('').map(param =>
                    <>
                        <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                            <br />
                        </div>
                        <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                            <br />
                        </div>
                        <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                            <br />
                        </div>
                        <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                            <br />
                        </div>
                    </>
                )}
            </div>
        )
    :
        dI.map((param, i, x, dai = schedulesInfo[param], dLI = (dai && dai.lessons ? Object.getOwnPropertyNames(dai.lessons):[])) =>
            <div className={analyticsCSS.l1+" "+scheduleCSS.day}>
                <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                    №
                </div>
                <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i} style={{gridColumn: "2"}}>
                    {DoW[i]}
                </div>
                <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i} style={{gridColumn: "3"}}>
                    Кабинет
                </div>
                <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i} style={{gridColumn: "4"}}>
                    {cState.role == 2 ? "Группа" : "Преподаватель"}
                </div>
                {dLI.map((param1, i1, x, les = dai.lessons[param1]) =>
                    <>
                        <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                            {i1 + 1}
                        </div>
                        <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                            {les.name}
                        </div>
                        <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                            {les.cabinet}
                        </div>
                        <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                            {cState.role == 2 ? les.group : les.prepod.name}
                        </div>
                    </>
                )}
                {dLI.length < 5 && Array(5-dLI.length).fill('').map(param =>
                    <>
                        <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                            <br />
                        </div>
                        <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                            <br />
                        </div>
                        <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                            <br />
                        </div>
                        <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                            <br />
                        </div>
                    </>
                )}
            </div>
        )
}

function selecPrep(e, id, obj) {
    inps.nyid = id;
    if(!inps.nw) inps.nw = {};
    inps.nw.prepod = obj.name;
    forceUpdate();
}

function getPrep() {
    let ltI0 = Object.getOwnPropertyNames(teachersInfo);
    return (
        <div className={scheduleCSS.blockList}>
            <div className={analyticsCSS.nav_i+' '+scheduleCSS.selEl} id={analyticsCSS.nav_i}>
                <div className={scheduleCSS.elInf}>Педагог:</div>
                <div className={scheduleCSS.elText}>{inps && inps.nw && inps.nw.prepod ? inps.nw.prepod : "Не выбран"}</div>
                <img className={scheduleCSS.mapImg} data-enablem={ltI0.length < 2 ? "0" : "1"} src={themeState.theme_ch ? mapd : mapl} alt=""/>
            </div>
            <div className={scheduleCSS.list}>
                {ltI0.map((param1, i, x, info = teachersInfo[param1], lltI = (info && info.tea ? Object.getOwnPropertyNames(info.tea) : [])) =>
                    <>
                        {lltI.length > 0 &&
                            <div className={analyticsCSS.nav_i+' '+scheduleCSS.listZag} id={analyticsCSS.nav_i}>
                                <div className={scheduleCSS.elInf}>{param1 == "nt" ? "Нераспределённые" : info.name}:</div>
                            </div>
                        }
                        {lltI.map((param2, i, x, tO = info.tea[param2]) =>
                            <div className={analyticsCSS.nav_i+' '+scheduleCSS.listEl} key={param2} id={analyticsCSS.nav_i} onClick={e => (selecPrep(e, param2, tO))}>
                                <div className={scheduleCSS.elInf}>Педагог:</div>
                                <div className={scheduleCSS.elText}>{tO.name}</div>
                            </div>
                        )}
                    </>
                )}
            </div>
        </div>
    )
}

function onCon(e) {
    setInfo();
}

function addLessonC(e) {
    const msg = JSON.parse(e.data);
    console.log("dsf3", msg);
    dispatch(changeAnalytics(CHANGE_SCHEDULE, msg.day, msg.les, msg.dayId, msg.body));
    dispatch(changePeople(CHANGE_TEACHERS_GL, 0, 0, 0, msg.bodyT));
}

function addLesson(day, dayId, obj) {
    send({
        uuid: cState.uuid,
        group: groupsInfo.els.group,
        day: day,
        dayId: dayId,
        obj: obj
    }, 'POST', "schedule/addLesson");
}

function setInfo() {
    send({
        uuid: cState.uuid
    }, 'POST', "schedule/getInfo")
        .then(data => {
            console.log(data);
            if(data.error == false){
                if(!data.role) {
                    setEvGr(cState, dispatch);
                    dispatch(changeGroups(CHANGE_GROUPS_GL, undefined, data.bodyG));
                    if (!data.bodyG[groupsInfo.els.group]) {
                        selGr = data.firstG;
                        dispatch(changeGroups(CHANGE_GROUPS_GR, undefined, parseInt(data.firstG)));
                    }
                    dispatch(changePeople(CHANGE_TEACHERS_GL, 0, 0, 0, data.bodyT));
                }
                setSchedule();
            }
        });
}

function setSchedule() {
    send({
        uuid: cState.uuid,
        group: groupsInfo.els.group,
        role: cState.role
    }, 'POST', "schedule/getSchedule")
        .then(data => {
            console.log(data);
            selGr = groupsInfo.els.group;
            if(cState.role == 1 && cState.kid) selKid = cState.kid;
            dispatch(changeAnalytics(CHANGE_SCHEDULE_GL, 0, 0, 0, data.body));
        });
}

export function Schedule() {
    schedulesInfo = useSelector(schedules);
    teachersInfo = useSelector(teachers);
    groupsInfo = useSelector(groups);
    themeState = useSelector(themes);
    cState = useSelector(states);
    if(!dispatch && cState.role != 2) {
        setActNew(2);
        if(eventSource.readyState == EventSource.OPEN) setInfo();
        eventSource.addEventListener('connect', onCon, false);
        eventSource.addEventListener('addLessonC', addLessonC, false);
    }
    if(!dispatch && cState.role == 2) setActived(8);
    [_, forceUpdate] = useReducer((x) => x + 1, 0);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount Schedule.jsx");
        for(let el of document.querySelectorAll(" *[id^='sinpn']")){
            chStatB({target: el}, inps);
        }
        return function() {
            dispatch(changeEvents(CHANGE_EVENTS_CLEAR));
            dispatch = undefined;
            eventSource.removeEventListener('connect', onCon);
            eventSource.removeEventListener('addLessonC', addLessonC);
            console.log("I was triggered during 1componentWillUnmount Schedule.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        if(cState.role == 1 && cState.kid && selKid != cState.kid) {
            selKid = cState.kid;
            setSchedule();
        }
        if(groupsInfo.els.group && selGr != groupsInfo.els.group){
            if(eventSource.readyState == EventSource.OPEN) setSchedule();
        }
        console.log('componentDidUpdate Schedule.jsx');
    });
    return (
        <div className={analyticsCSS.header}>
            <Helmet>
                <title>Расписание</title>
            </Helmet>
            {(cState.auth && cState.role == 3) &&
                <div className={scheduleCSS.pane}>
                    <Pane cla={true}/>
                </div>
            }
            <div className={analyticsCSS.block} style={{marginTop: (cState.auth && cState.role == 3) ? "7vh" : undefined}}>
                {getSched(cState.role == 3)}
            </div>
        </div>
    )
}
export default Schedule;
.day{
	display: grid;
	grid-template: repeat(5, auto)/auto;
	overflow: visible;
}

.pane{
	width: inherit;
	height: 7vh;
	position: fixed;
	z-index: 1;
}

.blockList{
	position: relative;
	margin-inline: -0.5px;
	display: inline-block;
	margin-left: 1vw;
	vertical-align: middle;
}

.selEl, .listEl{
	display: grid !important;
	justify-items: center;
	margin-inline: 0;
	font-weight: 500;
	background-color: var(--bgcV1);
}

.selEl{
	grid-template: auto auto / auto auto;
	margin-block: -0.5px;
}

.listEl{
	grid-template: auto / auto;
	padding: 0;
	height: 33%;
	margin-bottom: -2px;
}

.selEl img, .listEl img{
	width: 2vw;
	grid-row: 1/3;
	margin-right: 0.25vw;
}

.selEl:hover + .list, .list:hover, .listEl:hover + .list{
	opacity: 1;
	top: 100%;
}

.listZag{
    margin: 0;
    border: none;
    justify-content: start;
    padding: 0;
    font-weight: 500;
    background-color: var(--bgcV1);
    word-break: break-all;
}

.list{
	position: absolute;
	width: 100%;
	height: 300%;
	top: -300%;
	transition: top 1s ease;
	transition-property: top, opacity;
	opacity: 0;
	z-index: 1;
	overflow: auto;
}

.elText{
	align-self: baseline;
	font-size: 0.75vw;
}

.elInf{
	align-self: end;
	font-size: 1.25vw;
}

.mapImg{
	width: 2vw;
	vertical-align: middle;
	cursor: pointer;
	margin: 0 0.1vw;
	grid-column: 2;
}

*[data-enablem="0"] {
	visibility: hidden;
}
.per{
	display: grid;
	grid-template: repeat(5, auto)/auto;
}
import React, {useEffect, useReducer, useRef} from "react";
import {Helmet} from "react-helmet-async";
import analyticsCSS from '../analyticsMain.module.css';
import periodsCSS from './periods.module.css';
import {useDispatch, useSelector} from "react-redux";
import {chStatB, ele, onClose, onDel, onEdit, onFin, setActNew} from "../AnalyticsMain";
import {periods, states} from "../../../store/selector";
import ErrFound from "../../other/error/ErrFound";
import yes from "../../../media/yes.png";
import {CHANGE_PERIODS, CHANGE_PERIODS_DEL, CHANGE_PERIODS_L1} from "../../../store/actions";
import no from "../../../media/no.png";
import ed from "../../../media/edit.png";

let dispatch, periodsInfo, errText, cState, inps;
errText = "К сожалению, информация не найдена... Можете попробовать попросить завуча заполнить информацию.";
inps = {inpnnt : "V четверть", inpnit: "01.09.22-03.11.22"};
let [_, forceUpdate] = [];

export function Periods() {
    periodsInfo = useSelector(periods);
    cState = useSelector(states);
    if(!dispatch) setActNew(1);
    [_, forceUpdate] = useReducer((x) => x + 1, 0);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount Periods.jsx");
        for(let el of document.querySelectorAll(" *[id^='inpn']")){
            chStatB({target: el}, inps, forceUpdate);
        }
        return function() {
            dispatch = undefined;
            console.log("I was triggered during componentWillUnmount Periods.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate Periods.jsx');
    });
    return (
        <div className={analyticsCSS.header}>
            <Helmet>
                <title>Расписание периодов</title>
            </Helmet>
            {Object.getOwnPropertyNames(periodsInfo).length == 0 ?
                    <ErrFound text={errText}/>
                :
                    <div className={analyticsCSS.block}>
                        <div className={analyticsCSS.l1+" "+periodsCSS.per}>
                            <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                                №
                            </div>
                            <div className={analyticsCSS.nav_i} style={{gridColumn: "2"}} id={analyticsCSS.nav_i}>
                                Название учебного периода
                            </div>
                            <div className={analyticsCSS.nav_i} style={{gridColumn: "3"}} id={analyticsCSS.nav_i}>
                                Период
                            </div>
                            {Object.getOwnPropertyNames(periodsInfo.prs).map((param, i) =>
                                <>
                                    <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                                        {i + 1}
                                    </div>
                                    <div className={analyticsCSS.edbl+" "+analyticsCSS.nav_iZag3} data-st="0">
                                        <div className={analyticsCSS.fi}>
                                            <div className={analyticsCSS.nav_i+" "+analyticsCSS.nav_iZag2} id={analyticsCSS.nav_i}>
                                                {periodsInfo.prs[param].name}
                                            </div>
                                            <img className={analyticsCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                                        </div>
                                        <div className={analyticsCSS.ed}>
                                            <div className={analyticsCSS.preinf}>
                                                Название:
                                            </div>
                                            <input className={analyticsCSS.inp} data-id={param + "_name"} id={"inpnnt_" + param + "_name"} placeholder={"X Смена"} defaultValue={periodsInfo.prs[param].name} onChange={(e)=>chStatB(e, inps)} type="text"/>
                                            {ele(false, "inpnnt_" + param + "_name", inps)}
                                            <img className={analyticsCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate, CHANGE_PERIODS)} title="Подтвердить" alt=""/>
                                            <img className={analyticsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                                        </div>
                                    </div>
                                    <div className={analyticsCSS.edbl+" "+analyticsCSS.nav_iZag3} data-st="0">
                                        <div className={analyticsCSS.fi}>
                                            <div className={analyticsCSS.nav_i+" "+analyticsCSS.nav_iZag2} id={analyticsCSS.nav_i}>
                                                {periodsInfo.prs[param].per}
                                            </div>
                                            <img className={analyticsCSS.imgfield} src={ed} onClick={onEdit} title="Редактировать" alt=""/>
                                            <img className={analyticsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={(e)=>onDel(e, CHANGE_PERIODS_DEL)} title="Удалить" alt=""/>
                                        </div>
                                        <div className={analyticsCSS.ed}>
                                            <div className={analyticsCSS.preinf}>
                                                Интервал:
                                            </div>
                                            <input className={analyticsCSS.inp} data-id={param + "_per"} id={"inpnit_" + param + "_per"} placeholder={"01.09.22-03.11.22"} defaultValue={periodsInfo.prs[param].per} onChange={(e)=>chStatB(e, inps)} type="text"/>
                                            {ele(false, "inpnit_" + param + "_per", inps)}
                                            <img className={analyticsCSS.imginp+" yes "} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate, CHANGE_PERIODS)} title="Подтвердить" alt=""/>
                                            <img className={analyticsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                                        </div>
                                    </div>
                                </>
                            )}
                            <div className={analyticsCSS.nav_i} id={analyticsCSS.nav_i}>
                                X
                            </div>
                            <div className={analyticsCSS.add} data-st={"0"} style={{gridColumn: "2/4"}}>
                                <div className={analyticsCSS.nav_i+" "+analyticsCSS.link} id={analyticsCSS.nav_i} onClick={onEdit}>
                                    Добавить период
                                </div>
                                <div className={analyticsCSS.edbl+" "+analyticsCSS.nav_iZag3} data-st="0">
                                    <div className={analyticsCSS.preinf}>
                                        Название:
                                    </div>
                                    <input className={analyticsCSS.inp} id={"inpnnt_"} placeholder={"X Смена"} defaultValue={inps.inpnnt} onChange={(e)=>chStatB(e, inps, forceUpdate)} type="text"/>
                                    {ele(false, "inpnnt_", inps)}
                                    <div className={analyticsCSS.preinf}>
                                        , Интервал:
                                    </div>
                                    <input className={analyticsCSS.inp} id={"inpnit_"} placeholder={"01.09.22-03.11.22"} defaultValue={inps.inpnit} onChange={(e)=>chStatB(e, inps, forceUpdate)} type="text"/>
                                    {ele(false, "inpnit_", inps)}
                                    <img className={analyticsCSS.imginp} data-enable={inps.inpnnt_ && inps.inpnit_ ? "1" : "0"} src={yes} onClick={(e)=>onFin(e, inps, forceUpdate, CHANGE_PERIODS_L1, periodsInfo)} title="Подтвердить" alt=""/>
                                    <img className={analyticsCSS.imginp} style={{marginRight: "1vw"}} src={no} onClick={onClose} title="Отменить изменения и выйти из режима редактирования" alt=""/>
                                </div>
                            </div>
                        </div>
                    </div>
            }
        </div>
    )
}
export default Periods;
import React, {useEffect, useRef} from "react";
import {Helmet} from "react-helmet-async";
import marksCSS from './marks.module.css';
import {marks} from "../../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import {setActNew} from "../AnalyticsMain";
import ErrFound from "../../other/error/ErrFound";

let dispatch, marksInfo, maxEl, errText;
errText = "К сожалению, информация не найдена... Можете попробовать попросить завуча заполнить информацию.";
maxEl = 0;

export function Marks() {
    marksInfo = useSelector(marks);
    for(let el of Object.getOwnPropertyNames(marksInfo.pers)){
        let len = Object.getOwnPropertyNames(marksInfo.pers[el].per).length;
        if(len > maxEl )maxEl = len;
    }
    if(!dispatch) setActNew(4);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount Marks.jsx");
        let scr = document.querySelector("." + marksCSS.predm);
        scr.scrollTo(scr.scrollWidth, 0);
        return function() {
            dispatch = undefined;
            console.log("I was triggered during componentWillUnmount Marks.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate Marks.jsx');
    });
    return (
        <div className={marksCSS.AppHeader}>
            <Helmet>
                <title>Итоговые оценки</title>
            </Helmet>
            {Object.getOwnPropertyNames(marksInfo.pers).length == 0 ?
                    <ErrFound text={errText}/>
                :
                    <div className={marksCSS.blockPredm}>
                        <div className={marksCSS.predm}>
                            <div className={marksCSS.persGrid} style={{gridTemplate: "15vh /22vw repeat(" + (maxEl + 2) + ", 2vw)"}}>
                                <div className={marksCSS.nav_i} id={marksCSS.nav_i}>
                                    <br/>
                                </div>
                                {marksInfo.namePers.map(param =>
                                    <div className={marksCSS.nav_i+" "+marksCSS.nav_iTextD} id={marksCSS.nav_i}>
                                        {param}
                                    </div>
                                )}
                                <div className={marksCSS.nav_i}>
                                    <div className={marksCSS.nav_iText}>
                                        Годовая
                                    </div>
                                </div>
                                <div className={marksCSS.nav_i}>
                                    <div className={marksCSS.nav_iText}>
                                        Итоговая
                                    </div>
                                </div>
                            </div>
                            {Object.getOwnPropertyNames(marksInfo.pers).map(param => <div className={marksCSS.predmGrid} style={{gridTemplate: "5vh /20vw repeat(" + (maxEl + 3) + ", 2vw)"}} id={param}>
                                    <div className={marksCSS.nav_i+" nam " + marksCSS.nam} id={marksCSS.nav_i}>
                                        {param}
                                    </div>
                                    <div className={marksCSS.nav_i+" "+marksCSS.nav_iBr} id={marksCSS.nav_i}>
                                        <br/>
                                    </div>
                                    <div className={marksCSS.nav_i+" "+marksCSS.nav_iBr} id={marksCSS.nav_i}>
                                        <br/>
                                    </div>
                                    {Object.getOwnPropertyNames(marksInfo.pers[param].per).map(param1 =>
                                        <div className={marksCSS.nav_i} id={marksCSS.nav_i}>
                                            {marksInfo.pers[param].per[param1]}
                                        </div>
                                    )}
                                    {Object.getOwnPropertyNames(marksInfo.pers[param].per).length < maxEl && Array(maxEl-Object.getOwnPropertyNames(marksInfo.pers[param].per).length).fill('').map(param =>
                                        <div className={marksCSS.nav_i} id={marksCSS.nav_i}>
                                            <br/>
                                        </div>
                                    )}
                                    <div className={marksCSS.nav_i + " " + marksCSS.nav_iTextM}>
                                        {marksInfo.pers[param].year}
                                    </div>
                                    <div className={marksCSS.nav_i + " " + marksCSS.nav_iTextM}>
                                        {marksInfo.pers[param].itog}
                                    </div>
                                </div>
                            )}
                        </div>
                    </div>
            }
        </div>
    )
}
export default Marks;
.AppHeader {
	width: 100%;
	height: 86vh;
	display: flex;
	position: relative;
	top: 7vh;
}

.blockPredm{
	text-align: center;
	margin: auto;
	width: 75%;
}

.predm{
	background-color: var(--bgcV1);
	padding: 10px;
	border-radius: 5px;
	transition: background-color 1s ease;
	margin-block: 5vh;
	overflow-x: auto;
	overflow-y: hidden;
}

.predmGrid{
	display: grid;
	grid-template: 5vh /20vw repeat(auto-fit, 2vw);
	transition: background-color 1s ease;
	width: fit-content;
}

.predmGrid:hover{
	background-color: #FF970055 !important;
}

.persGrid{
	display: grid;
	grid-template: 15vh /20vw repeat(auto-fit, 2vw);
	width: fit-content;
}

.nav_i{
	text-decoration: none;
	border: 1px solid var(--bcV1);
	cursor: pointer;
	color: var(--cV1);
	font-size: 1.25vw;
	font-weight: 500;
	display: flex;
	align-items: center;
	justify-content: center;
	align-self: stretch;
	-webkit-transition: color 1s ease;
	-o-transition: color 1s ease;
	transition: color 1s ease;
	transition-property: color, text-shadow, border-color;
	margin: -0.5px;
	padding: 5px;
	position: relative;
}

#nav_i:hover, #nav_i:hover *{
	color: #00ff00 !important;
	text-shadow: 0 0 2vw #66ff66;
}

.nav_iText{
	transform: rotateZ(270deg);
	color: #990000;
}

.nav_iBr{
	border: none;
}

.nam{
	position: absolute;
	width: 22vw;
	height: 5vh;
	padding: 0;
	background-color: var(--bgcV1);
	z-index: 1;
}

.nav_iTextM{
	color: #990000;
}

.nav_iTextD{
	font-size: 0.75vw;
}

.descr{
	padding: 1vw;
}

.nav_iTextDescr{
	font-size: 1vw;
	width: fit-content;
	border: none;
	padding: 0;
}

.nav_iWeight{
	border: none;
	font-size: 0.75vw;
	margin: initial;
	padding: initial;
	align-items: center;
	top: 0.75vw;
	position: relative;
	margin-block: 0.75vw;
}
import React, {useEffect, useRef} from "react";
import {Helmet} from "react-helmet-async";
import journalCSS from './journal.module.css';
import {journals} from "../../../store/selector";
import {useDispatch, useSelector} from "react-redux";
import {setActNew} from "../AnalyticsMain";
import ErrFound from "../../other/error/ErrFound";

let dispatch, journalsInfo, maxEl, obj, errText;
errText = "К сожалению, информация не найдена... Можете попробовать попросить завуча заполнить информацию.";
maxEl = 0;
// obj = {
//     days : {
//         "14.05.22": {
//             mark: 5,
//             weight: 1,
//             type: "Ответ на уроке"
//         },
//         "15.05.22": {
//             mark: 5,
//             weight: 5,
//             type: "Контрольная работа"
//         },
//         "16.05.22": {
//             mark: "Н",
//             weight: 1
//         },
//         "17.05.22": {
//             mark: 3,
//             weight: 4,
//             type: "Самостоятельная работа"
//         }
//     },
//     avg: {
//         mark: 4
//     }
// };

function getDate(dat) {
    let d = dat.split('.');
    return new Date("20" + [d[2], d[1], d[0]].join("-"));
}

function updDateP(id) {
    for(let el of document.querySelectorAll("." + journalCSS.daysGrid + " #" + journalCSS.nav_i))
    {
        el.innerHTML = "";
    }
    for(let el of document.querySelectorAll("." + journalCSS.descr + " div"))
    {
        el.innerHTML = "<br/>";
    }
    let mas = Object.getOwnPropertyNames(journalsInfo[id].days), lMonth = 0;
    for(let i = 0, i1 = 0; i < mas.length; i++)
    {
        let date = getDate(mas[i]), month = date.toLocaleString("ru", {month:"2-digit"}), dat = date.toLocaleString("ru", month == lMonth ? {day:"2-digit"} : {day:"2-digit", month:"short"});
        lMonth = month;
        document.querySelector("." + journalCSS.daysGrid + " div:nth-child(" + (i + 2) + ")").innerHTML = dat;
        if(journalsInfo[id].days[mas[i]].type) {
            document.querySelector("." + journalCSS.descr + " div:nth-child(" + (i1 + 1) + ")").innerHTML = mas[i] + " - " + journalsInfo[id].days[mas[i]].type;
            i1++;
        }
    }
}

function updDate(e) {
    updDateP(this.id);
}

export function AnalyticsJournal() {
    journalsInfo = useSelector(journals);
    for(let el of Object.getOwnPropertyNames(journalsInfo)){
        let len = Object.getOwnPropertyNames(journalsInfo[el].days).length;
        if(len > maxEl )maxEl = len;
    }
    if(!dispatch) setActNew(3);
    dispatch = useDispatch();
    const isFirstUpdate = useRef(true);
    useEffect(() => {
        console.log("I was triggered during componentDidMount AnalyticsJournal.jsx");
        // dispatch(changeJournal("Англ. яз.", obj));
        // document.querySelector("." + journalCSS.predm).addEventListener('mouseover', updDate, {capture: true});
        for(let el of document.querySelectorAll("div[class='" + journalCSS.predmGrid+"']"))
        {
            el.addEventListener('mouseover', updDate);
        }
        updDateP(Object.getOwnPropertyNames(journalsInfo)[0]);
        let scr = document.querySelector("." + journalCSS.days);
        scr.scrollTo(scr.scrollWidth, 0);
        return function() {
            dispatch = undefined;
            console.log("I was triggered during componentWillUnmount AnalyticsJournal.jsx");
        }
    }, []);
    useEffect(() => {
        if (isFirstUpdate.current) {
            isFirstUpdate.current = false;
            return;
        }
        console.log('componentDidUpdate AnalyticsJournal.jsx');
    });
    return (
        <div className={journalCSS.AppHeader}>
            <Helmet>
                <title>Журнал</title>
            </Helmet>
            {Object.getOwnPropertyNames(journalsInfo).length == 0 ?
                    <ErrFound text={errText}/>
                :
                    <div className={journalCSS.blockPredm}>
                        <div className={journalCSS.predm}>
                            <div className={journalCSS.days}>
                                <div className={journalCSS.daysGrid} style={{gridTemplate: "15vh /22vw repeat(" + (maxEl + 1) + ", 2vw)"}}>
                                    <div className={journalCSS.nav_i} id={journalCSS.nav_i}>
                                        <br/>
                                    </div>
                                    {Array(maxEl).fill('').map(param =>
                                        <div className={journalCSS.nav_i+" "+journalCSS.nav_iTextD} id={journalCSS.nav_i}>
                                            <br/>
                                        </div>
                                    )}
                                    <div className={journalCSS.nav_i}>
                                        <div className={journalCSS.nav_iText}>
                                            Средняя
                                        </div>
                                    </div>
                                </div>
                                {Object.getOwnPropertyNames(journalsInfo).map(param =>
                                    <div className={journalCSS.predmGrid} style={{gridTemplate: "5vh /20vw repeat(" + (maxEl + 2) + ", 2vw)"}} id={param}>
                                        <div className={journalCSS.nav_i+" nam " + journalCSS.nam} id={journalCSS.nav_i}>
                                            {param}
                                        </div>
                                        <div className={journalCSS.nav_i+" "+journalCSS.nav_iBr} id={journalCSS.nav_i}>
                                            <br/>
                                        </div>
                                        <div className={journalCSS.nav_i+" "+journalCSS.nav_iBr} id={journalCSS.nav_i}>
                                            <br/>
                                        </div>
                                        {Object.getOwnPropertyNames(journalsInfo[param].days).map(param1 =>
                                            <div className={journalCSS.nav_i} id={journalCSS.nav_i}>
                                                {journalsInfo[param].days[param1].mark}
                                                {journalsInfo[param].days[param1].weight > 1 && (<div className={journalCSS.nav_i+" "+journalCSS.nav_iWeight} id={journalCSS.nav_i}>
                                                    {journalsInfo[param].days[param1].weight}
                                                </div>)}
                                            </div>
                                        )}
                                        {Object.getOwnPropertyNames(journalsInfo[param].days).length < maxEl && Array(maxEl-Object.getOwnPropertyNames(journalsInfo[param].days).length).fill('').map(param =>
                                            <div className={journalCSS.nav_i} id={journalCSS.nav_i}>
                                                <br/>
                                            </div>
                                        )}
                                        <div className={journalCSS.nav_i + " " + journalCSS.nav_iTextM}>
                                            {journalsInfo[param].avg.mark}
                                        </div>
                                    </div>
                                )}
                            </div>
                            <div className={journalCSS.descr}>
                                {Array(maxEl).fill('').map(param =>
                                    <div className={journalCSS.nav_i+" "+journalCSS.nav_iTextDescr} id={journalCSS.nav_i}>
                                        <br/>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
            }
        </div>
    )
}
export default AnalyticsJournal;
.AppHeader {
	width: 100%;
	height: 86vh;
	display: flex;
	position: relative;
	top: 7vh;
}

.blockPredm{
	text-align: center;
	margin: auto;
	width: 75%;
}

.predm{
	background-color: var(--bgcV1);
	padding: 10px;
	border-radius: 5px;
	transition: background-color 1s ease;
	margin-block: 5vh;
	overflow-x: auto;
	overflow-y: hidden;
}

.days{
	overflow-x: auto;
	overflow-y: hidden;
}

.predmGrid{
	display: grid;
	grid-template: 5vh /20vw repeat(auto-fit, 2vw);
	transition: background-color 1s ease;
	width: fit-content;
}

.predmGrid:hover{
	background-color: #FF970055 !important;
}

.daysGrid{
	display: grid;
	grid-template: 15vh /20vw repeat(auto-fit, 2vw);
	width: fit-content;
}

.nav_i{
	text-decoration: none;
	border: 1px solid var(--bcV1);
	cursor: pointer;
	color: var(--cV1);
	font-size: 1.25vw;
	font-weight: 500;
	display: flex;
	align-items: center;
	justify-content: center;
	align-self: stretch;
	-webkit-transition: color 1s 2s ease;
	-o-transition: color 1s 2s ease;
	transition: color 1s 2s ease;
	transition-property: color, text-shadow, border-color;
	margin: -0.5px;
	padding: 5px;
	position: relative;
}

#nav_i:hover, #nav_i:hover *{
	color: #00ff00 !important;
	text-shadow: 0 0 2vw #66ff66;
}

.nav_iText{
	transform: rotateZ(270deg);
	color: #990000;
}

.nav_iBr{
	border: none;
}

.nam{
	position: absolute;
	width: 22vw;
	height: 5vh;
	padding: 0;
	background-color: var(--bgcV1);
	z-index: 1;
}

.nav_iTextM{
	color: #990000;
}

.nav_iTextD{
	font-size: 0.75vw;
}

.descr{
	padding: 1vw;
}

.nav_iTextDescr{
	font-size: 1vw;
	width: fit-content;
	border: none;
	padding: 0;
}

.nav_iWeight{
	border: none;
	font-size: 0.75vw;
	margin: initial;
	padding: initial;
	align-items: center;
	top: 0.75vw;
	position: relative;
	margin-block: 0.75vw;
}